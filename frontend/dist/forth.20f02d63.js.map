{"mappings":"A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,ECAA,SAAS,EAAW,CAAK,EACvB,IAAI,EAAM,EAAE,CAIZ,OAHA,EAAM,KAAK,CAAC,KAAK,OAAO,CAAC,SAAS,CAAC,EACjC,EAAI,IAAI,CAAC,CAAC,KAAM,CAAC,EACnB,GACO,CACT,C,O,c,C,E,O,C,Q,C,I,I,E,I,K,E,W,C,E,a,C,C,GAEA,IAAI,EAAe,EACjB,u6BAuCE,EAAoB,EAAW,oIAEnC,SAAS,EAAgB,CAAQ,CAAE,CAAI,EACrC,IAAI,EACJ,IAAK,EAAI,EAAS,MAAM,CAAG,EAAG,GAAK,EAAG,IACpC,GAAI,CAAQ,CAAC,EAAE,CAAC,IAAI,GAAK,EAAK,WAAW,GACvC,OAAO,CAAQ,CAAC,EAAE,AAIxB,CACO,IAAM,EAAQ,CACnB,KAAM,QACN,WAAY,WACV,MAAO,CACL,MAAO,GACP,KAAM,GACN,aAAc,EACd,kBAAmB,EACnB,SAAU,EAAE,AACd,CACF,EACA,MAAO,SAAU,CAAM,CAAE,CAAG,EAC1B,IAAI,EACJ,GAAI,EAAO,QAAQ,GACjB,OAAO,KAET,GAAI,AAAc,KAAd,EAAI,KAAK,CAAS,CACpB,GAAI,EAAO,KAAK,CAAC,wBAEf,OADA,EAAI,KAAK,CAAG,eACL,UAGT,GADA,EAAM,EAAO,KAAK,CAAC,wBAIjB,OAFA,EAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAM,CAAG,CAAC,EAAE,CAAC,WAAW,EAAE,GAC7C,EAAI,KAAK,CAAG,eACL,MAGT,GADA,EAAM,EAAO,KAAK,CAAC,uFAGjB,OADA,EAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAM,CAAG,CAAC,EAAE,CAAC,WAAW,EAAE,GACtC,MAGT,GADA,EAAM,EAAO,KAAK,CAAC,+BAEjB,MAAO,SAEX,KAAO,CAEL,GAAI,EAAO,KAAK,CAAC,gBAGf,OAFA,EAAI,KAAK,CAAG,GACZ,EAAO,MAAM,CAAC,GACP,UAET,GAAI,EAAO,KAAK,CAAC,eAEf,OADA,EAAI,KAAK,CAAG,GACL,UAET,GAAI,EAAO,KAAK,CAAC,4BACf,MAAO,SAEX,CAIA,GADA,EAAM,EAAO,KAAK,CAAC,wBAEjB,AAAI,AAAyC,KAAA,IAAzC,EAAe,EAAI,QAAQ,CAAE,CAAG,CAAC,EAAE,EAC9B,WAIL,AAAW,OAAX,CAAG,CAAC,EAAE,EACR,EAAO,SAAS,GACT,WAIL,AAA6C,KAAA,IAA7C,EAAe,EAAI,YAAY,CAAE,CAAG,CAAC,EAAE,EAClC,UAEL,AAAkD,KAAA,IAAlD,EAAe,EAAI,iBAAiB,CAAE,CAAG,CAAC,EAAE,EACvC,UAGL,AAAW,MAAX,CAAG,CAAC,EAAE,EACR,EAAO,QAAQ,CAAC,SAAU,CAAC,EAAI,MAAO,AAAM,MAAN,CAAW,GACjD,EAAO,GAAG,CAAC,KACJ,WAIL,AAAW,OAAX,CAAG,CAAC,EAAE,EACR,EAAO,QAAQ,CAAC,SAAU,CAAC,EAAI,MAAO,AAAM,MAAN,CAAW,GACjD,EAAO,GAAG,CAAC,KACJ,UAEL,AAAW,OAAX,CAAG,CAAC,EAAE,EAAa,AAAW,OAAX,CAAG,CAAC,EAAE,EAAa,AAAW,OAAX,CAAG,CAAC,EAAE,EAC9C,EAAO,QAAQ,CAAC,SAAU,CAAC,EAAI,MAAO,AAAM,MAAN,CAAW,GACjD,EAAO,GAAG,CAAC,KACJ,UAIL,CAAG,CAAC,EAAE,CAAG,YACJ,SAMF,MAEX,CACF,C","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/forth.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"4AEXZ\", function(module, exports) {\n\n$parcel$export(module.exports, \"forth\", () => $357a4d52c395dc72$export$49457c0717f8366c);\nfunction $357a4d52c395dc72$var$toWordList(words) {\n    var ret = [];\n    words.split(' ').forEach(function(e) {\n        ret.push({\n            name: e\n        });\n    });\n    return ret;\n}\nvar $357a4d52c395dc72$var$coreWordList = $357a4d52c395dc72$var$toWordList('INVERT AND OR XOR\\\n 2* 2/ LSHIFT RSHIFT\\\n 0= = 0< < > U< MIN MAX\\\n 2DROP 2DUP 2OVER 2SWAP ?DUP DEPTH DROP DUP OVER ROT SWAP\\\n >R R> R@\\\n + - 1+ 1- ABS NEGATE\\\n S>D * M* UM*\\\n FM/MOD SM/REM UM/MOD */ */MOD / /MOD MOD\\\n HERE , @ ! CELL+ CELLS C, C@ C! CHARS 2@ 2!\\\n ALIGN ALIGNED +! ALLOT\\\n CHAR [CHAR] [ ] BL\\\n FIND EXECUTE IMMEDIATE COUNT LITERAL STATE\\\n ; DOES> >BODY\\\n EVALUATE\\\n SOURCE >IN\\\n <# # #S #> HOLD SIGN BASE >NUMBER HEX DECIMAL\\\n FILL MOVE\\\n . CR EMIT SPACE SPACES TYPE U. .R U.R\\\n ACCEPT\\\n TRUE FALSE\\\n <> U> 0<> 0>\\\n NIP TUCK ROLL PICK\\\n 2>R 2R@ 2R>\\\n WITHIN UNUSED MARKER\\\n I J\\\n TO\\\n COMPILE, [COMPILE]\\\n SAVE-INPUT RESTORE-INPUT\\\n PAD ERASE\\\n 2LITERAL DNEGATE\\\n D- D+ D0< D0= D2* D2/ D< D= DMAX DMIN D>S DABS\\\n M+ M*/ D. D.R 2ROT DU<\\\n CATCH THROW\\\n FREE RESIZE ALLOCATE\\\n CS-PICK CS-ROLL\\\n GET-CURRENT SET-CURRENT FORTH-WORDLIST GET-ORDER SET-ORDER\\\n PREVIOUS SEARCH-WORDLIST WORDLIST FIND ALSO ONLY FORTH DEFINITIONS ORDER\\\n -TRAILING /STRING SEARCH COMPARE CMOVE CMOVE> BLANK SLITERAL');\nvar $357a4d52c395dc72$var$immediateWordList = $357a4d52c395dc72$var$toWordList('IF ELSE THEN BEGIN WHILE REPEAT UNTIL RECURSE [IF] [ELSE] [THEN] ?DO DO LOOP +LOOP UNLOOP LEAVE EXIT AGAIN CASE OF ENDOF ENDCASE');\nfunction $357a4d52c395dc72$var$searchWordList(wordList, word) {\n    var i;\n    for(i = wordList.length - 1; i >= 0; i--){\n        if (wordList[i].name === word.toUpperCase()) return wordList[i];\n    }\n    return undefined;\n}\nconst $357a4d52c395dc72$export$49457c0717f8366c = {\n    name: \"forth\",\n    startState: function() {\n        return {\n            state: '',\n            base: 10,\n            coreWordList: $357a4d52c395dc72$var$coreWordList,\n            immediateWordList: $357a4d52c395dc72$var$immediateWordList,\n            wordList: []\n        };\n    },\n    token: function(stream, stt) {\n        var mat;\n        if (stream.eatSpace()) return null;\n        if (stt.state === '') {\n            if (stream.match(/^(\\]|:NONAME)(\\s|$)/i)) {\n                stt.state = ' compilation';\n                return 'builtin';\n            }\n            mat = stream.match(/^(\\:)\\s+(\\S+)(\\s|$)+/);\n            if (mat) {\n                stt.wordList.push({\n                    name: mat[2].toUpperCase()\n                });\n                stt.state = ' compilation';\n                return 'def';\n            }\n            mat = stream.match(/^(VARIABLE|2VARIABLE|CONSTANT|2CONSTANT|CREATE|POSTPONE|VALUE|WORD)\\s+(\\S+)(\\s|$)+/i);\n            if (mat) {\n                stt.wordList.push({\n                    name: mat[2].toUpperCase()\n                });\n                return 'def';\n            }\n            mat = stream.match(/^(\\'|\\[\\'\\])\\s+(\\S+)(\\s|$)+/);\n            if (mat) return 'builtin';\n        } else {\n            // ; [\n            if (stream.match(/^(\\;|\\[)(\\s)/)) {\n                stt.state = '';\n                stream.backUp(1);\n                return 'builtin';\n            }\n            if (stream.match(/^(\\;|\\[)($)/)) {\n                stt.state = '';\n                return 'builtin';\n            }\n            if (stream.match(/^(POSTPONE)\\s+\\S+(\\s|$)+/)) return 'builtin';\n        }\n        // dynamic wordlist\n        mat = stream.match(/^(\\S+)(\\s+|$)/);\n        if (mat) {\n            if ($357a4d52c395dc72$var$searchWordList(stt.wordList, mat[1]) !== undefined) return 'variable';\n            // comments\n            if (mat[1] === '\\\\') {\n                stream.skipToEnd();\n                return 'comment';\n            }\n            // core words\n            if ($357a4d52c395dc72$var$searchWordList(stt.coreWordList, mat[1]) !== undefined) return 'builtin';\n            if ($357a4d52c395dc72$var$searchWordList(stt.immediateWordList, mat[1]) !== undefined) return 'keyword';\n            if (mat[1] === '(') {\n                stream.eatWhile(function(s) {\n                    return s !== ')';\n                });\n                stream.eat(')');\n                return 'comment';\n            }\n            // // strings\n            if (mat[1] === '.(') {\n                stream.eatWhile(function(s) {\n                    return s !== ')';\n                });\n                stream.eat(')');\n                return 'string';\n            }\n            if (mat[1] === 'S\"' || mat[1] === '.\"' || mat[1] === 'C\"') {\n                stream.eatWhile(function(s) {\n                    return s !== '\"';\n                });\n                stream.eat('\"');\n                return 'string';\n            }\n            // numbers\n            if (mat[1] - 0xfffffffff) return 'number';\n            // if (mat[1].match(/^[-+]?[0-9]+\\.[0-9]*/)) {\n            //     return 'number';\n            // }\n            return 'atom';\n        }\n    }\n};\n\n});\n\n\n//# sourceMappingURL=forth.20f02d63.js.map\n","function toWordList(words) {\n  var ret = [];\n  words.split(' ').forEach(function(e){\n    ret.push({name: e});\n  });\n  return ret;\n}\n\nvar coreWordList = toWordList(\n  'INVERT AND OR XOR\\\n 2* 2/ LSHIFT RSHIFT\\\n 0= = 0< < > U< MIN MAX\\\n 2DROP 2DUP 2OVER 2SWAP ?DUP DEPTH DROP DUP OVER ROT SWAP\\\n >R R> R@\\\n + - 1+ 1- ABS NEGATE\\\n S>D * M* UM*\\\n FM/MOD SM/REM UM/MOD */ */MOD / /MOD MOD\\\n HERE , @ ! CELL+ CELLS C, C@ C! CHARS 2@ 2!\\\n ALIGN ALIGNED +! ALLOT\\\n CHAR [CHAR] [ ] BL\\\n FIND EXECUTE IMMEDIATE COUNT LITERAL STATE\\\n ; DOES> >BODY\\\n EVALUATE\\\n SOURCE >IN\\\n <# # #S #> HOLD SIGN BASE >NUMBER HEX DECIMAL\\\n FILL MOVE\\\n . CR EMIT SPACE SPACES TYPE U. .R U.R\\\n ACCEPT\\\n TRUE FALSE\\\n <> U> 0<> 0>\\\n NIP TUCK ROLL PICK\\\n 2>R 2R@ 2R>\\\n WITHIN UNUSED MARKER\\\n I J\\\n TO\\\n COMPILE, [COMPILE]\\\n SAVE-INPUT RESTORE-INPUT\\\n PAD ERASE\\\n 2LITERAL DNEGATE\\\n D- D+ D0< D0= D2* D2/ D< D= DMAX DMIN D>S DABS\\\n M+ M*/ D. D.R 2ROT DU<\\\n CATCH THROW\\\n FREE RESIZE ALLOCATE\\\n CS-PICK CS-ROLL\\\n GET-CURRENT SET-CURRENT FORTH-WORDLIST GET-ORDER SET-ORDER\\\n PREVIOUS SEARCH-WORDLIST WORDLIST FIND ALSO ONLY FORTH DEFINITIONS ORDER\\\n -TRAILING /STRING SEARCH COMPARE CMOVE CMOVE> BLANK SLITERAL');\n\nvar immediateWordList = toWordList('IF ELSE THEN BEGIN WHILE REPEAT UNTIL RECURSE [IF] [ELSE] [THEN] ?DO DO LOOP +LOOP UNLOOP LEAVE EXIT AGAIN CASE OF ENDOF ENDCASE');\n\nfunction searchWordList (wordList, word) {\n  var i;\n  for (i = wordList.length - 1; i >= 0; i--) {\n    if (wordList[i].name === word.toUpperCase()) {\n      return wordList[i];\n    }\n  }\n  return undefined;\n}\nexport const forth = {\n  name: \"forth\",\n  startState: function() {\n    return {\n      state: '',\n      base: 10,\n      coreWordList: coreWordList,\n      immediateWordList: immediateWordList,\n      wordList: []\n    };\n  },\n  token: function (stream, stt) {\n    var mat;\n    if (stream.eatSpace()) {\n      return null;\n    }\n    if (stt.state === '') { // interpretation\n      if (stream.match(/^(\\]|:NONAME)(\\s|$)/i)) {\n        stt.state = ' compilation';\n        return 'builtin';\n      }\n      mat = stream.match(/^(\\:)\\s+(\\S+)(\\s|$)+/);\n      if (mat) {\n        stt.wordList.push({name: mat[2].toUpperCase()});\n        stt.state = ' compilation';\n        return 'def';\n      }\n      mat = stream.match(/^(VARIABLE|2VARIABLE|CONSTANT|2CONSTANT|CREATE|POSTPONE|VALUE|WORD)\\s+(\\S+)(\\s|$)+/i);\n      if (mat) {\n        stt.wordList.push({name: mat[2].toUpperCase()});\n        return 'def';\n      }\n      mat = stream.match(/^(\\'|\\[\\'\\])\\s+(\\S+)(\\s|$)+/);\n      if (mat) {\n        return 'builtin'\n      }\n    } else { // compilation\n      // ; [\n      if (stream.match(/^(\\;|\\[)(\\s)/)) {\n        stt.state = '';\n        stream.backUp(1);\n        return 'builtin';\n      }\n      if (stream.match(/^(\\;|\\[)($)/)) {\n        stt.state = '';\n        return 'builtin';\n      }\n      if (stream.match(/^(POSTPONE)\\s+\\S+(\\s|$)+/)) {\n        return 'builtin';\n      }\n    }\n\n    // dynamic wordlist\n    mat = stream.match(/^(\\S+)(\\s+|$)/);\n    if (mat) {\n      if (searchWordList(stt.wordList, mat[1]) !== undefined) {\n        return 'variable';\n      }\n\n      // comments\n      if (mat[1] === '\\\\') {\n        stream.skipToEnd();\n        return 'comment';\n      }\n\n      // core words\n      if (searchWordList(stt.coreWordList, mat[1]) !== undefined) {\n        return 'builtin';\n      }\n      if (searchWordList(stt.immediateWordList, mat[1]) !== undefined) {\n        return 'keyword';\n      }\n\n      if (mat[1] === '(') {\n        stream.eatWhile(function (s) { return s !== ')'; });\n        stream.eat(')');\n        return 'comment';\n      }\n\n      // // strings\n      if (mat[1] === '.(') {\n        stream.eatWhile(function (s) { return s !== ')'; });\n        stream.eat(')');\n        return 'string';\n      }\n      if (mat[1] === 'S\"' || mat[1] === '.\"' || mat[1] === 'C\"') {\n        stream.eatWhile(function (s) { return s !== '\"'; });\n        stream.eat('\"');\n        return 'string';\n      }\n\n      // numbers\n      if (mat[1] - 0xfffffffff) {\n        return 'number';\n      }\n      // if (mat[1].match(/^[-+]?[0-9]+\\.[0-9]*/)) {\n      //     return 'number';\n      // }\n\n      return 'atom';\n    }\n  }\n};\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","$357a4d52c395dc72$var$toWordList","words","ret","split","forEach","e","push","name","Object","defineProperty","get","$357a4d52c395dc72$export$49457c0717f8366c","set","s","enumerable","configurable","$357a4d52c395dc72$var$coreWordList","$357a4d52c395dc72$var$immediateWordList","$357a4d52c395dc72$var$searchWordList","wordList","word","i","length","toUpperCase","startState","state","base","coreWordList","immediateWordList","token","stream","stt","mat","eatSpace","match","backUp","undefined","skipToEnd","eatWhile","eat"],"version":3,"file":"forth.20f02d63.js.map"}