{"mappings":"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","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/javascript.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"3jNKc\", function(module, exports) {\n\n$parcel$export(module.exports, \"javascript\", () => $26a9bb98cfa29abc$export$755219397dca4f08);\n$parcel$export(module.exports, \"jsonld\", () => $26a9bb98cfa29abc$export$f8fce98513fdd41a);\nfunction $26a9bb98cfa29abc$var$mkJavaScript(parserConfig) {\n    var statementIndent = parserConfig.statementIndent;\n    var jsonldMode = parserConfig.jsonld;\n    var jsonMode = parserConfig.json || jsonldMode;\n    var isTS = parserConfig.typescript;\n    var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/;\n    // Tokenizer\n    var keywords = function() {\n        function kw(type) {\n            return {\n                type: type,\n                style: \"keyword\"\n            };\n        }\n        var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\"), D = kw(\"keyword d\");\n        var operator = kw(\"operator\"), atom = {\n            type: \"atom\",\n            style: \"atom\"\n        };\n        return {\n            \"if\": kw(\"if\"),\n            \"while\": A,\n            \"with\": A,\n            \"else\": B,\n            \"do\": B,\n            \"try\": B,\n            \"finally\": B,\n            \"return\": D,\n            \"break\": D,\n            \"continue\": D,\n            \"new\": kw(\"new\"),\n            \"delete\": C,\n            \"void\": C,\n            \"throw\": C,\n            \"debugger\": kw(\"debugger\"),\n            \"var\": kw(\"var\"),\n            \"const\": kw(\"var\"),\n            \"let\": kw(\"var\"),\n            \"function\": kw(\"function\"),\n            \"catch\": kw(\"catch\"),\n            \"for\": kw(\"for\"),\n            \"switch\": kw(\"switch\"),\n            \"case\": kw(\"case\"),\n            \"default\": kw(\"default\"),\n            \"in\": operator,\n            \"typeof\": operator,\n            \"instanceof\": operator,\n            \"true\": atom,\n            \"false\": atom,\n            \"null\": atom,\n            \"undefined\": atom,\n            \"NaN\": atom,\n            \"Infinity\": atom,\n            \"this\": kw(\"this\"),\n            \"class\": kw(\"class\"),\n            \"super\": kw(\"atom\"),\n            \"yield\": C,\n            \"export\": kw(\"export\"),\n            \"import\": kw(\"import\"),\n            \"extends\": C,\n            \"await\": C\n        };\n    }();\n    var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n    var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n    function readRegexp(stream) {\n        var escaped = false, next, inSet = false;\n        while((next = stream.next()) != null){\n            if (!escaped) {\n                if (next == \"/\" && !inSet) return;\n                if (next == \"[\") inSet = true;\n                else if (inSet && next == \"]\") inSet = false;\n            }\n            escaped = !escaped && next == \"\\\\\";\n        }\n    }\n    // Used as scratch variables to communicate multiple values without\n    // consing up tons of objects.\n    var type, content;\n    function ret(tp, style, cont) {\n        type = tp;\n        content = cont;\n        return style;\n    }\n    function tokenBase(stream, state) {\n        var ch = stream.next();\n        if (ch == '\"' || ch == \"'\") {\n            state.tokenize = tokenString(ch);\n            return state.tokenize(stream, state);\n        } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) return ret(\"number\", \"number\");\n        else if (ch == \".\" && stream.match(\"..\")) return ret(\"spread\", \"meta\");\n        else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) return ret(ch);\n        else if (ch == \"=\" && stream.eat(\">\")) return ret(\"=>\", \"operator\");\n        else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) return ret(\"number\", \"number\");\n        else if (/\\d/.test(ch)) {\n            stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n            return ret(\"number\", \"number\");\n        } else if (ch == \"/\") {\n            if (stream.eat(\"*\")) {\n                state.tokenize = tokenComment;\n                return tokenComment(stream, state);\n            } else if (stream.eat(\"/\")) {\n                stream.skipToEnd();\n                return ret(\"comment\", \"comment\");\n            } else if (expressionAllowed(stream, state, 1)) {\n                readRegexp(stream);\n                stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n                return ret(\"regexp\", \"string.special\");\n            } else {\n                stream.eat(\"=\");\n                return ret(\"operator\", \"operator\", stream.current());\n            }\n        } else if (ch == \"`\") {\n            state.tokenize = tokenQuasi;\n            return tokenQuasi(stream, state);\n        } else if (ch == \"#\" && stream.peek() == \"!\") {\n            stream.skipToEnd();\n            return ret(\"meta\", \"meta\");\n        } else if (ch == \"#\" && stream.eatWhile(wordRE)) return ret(\"variable\", \"property\");\n        else if (ch == \"<\" && stream.match(\"!--\") || ch == \"-\" && stream.match(\"->\") && !/\\S/.test(stream.string.slice(0, stream.start))) {\n            stream.skipToEnd();\n            return ret(\"comment\", \"comment\");\n        } else if (isOperatorChar.test(ch)) {\n            if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n                if (stream.eat(\"=\")) {\n                    if (ch == \"!\" || ch == \"=\") stream.eat(\"=\");\n                } else if (/[<>*+\\-|&?]/.test(ch)) {\n                    stream.eat(ch);\n                    if (ch == \">\") stream.eat(ch);\n                }\n            }\n            if (ch == \"?\" && stream.eat(\".\")) return ret(\".\");\n            return ret(\"operator\", \"operator\", stream.current());\n        } else if (wordRE.test(ch)) {\n            stream.eatWhile(wordRE);\n            var word = stream.current();\n            if (state.lastType != \".\") {\n                if (keywords.propertyIsEnumerable(word)) {\n                    var kw = keywords[word];\n                    return ret(kw.type, kw.style, word);\n                }\n                if (word == \"async\" && stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/, false)) return ret(\"async\", \"keyword\", word);\n            }\n            return ret(\"variable\", \"variable\", word);\n        }\n    }\n    function tokenString(quote) {\n        return function(stream, state) {\n            var escaped = false, next;\n            if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)) {\n                state.tokenize = tokenBase;\n                return ret(\"jsonld-keyword\", \"meta\");\n            }\n            while((next = stream.next()) != null){\n                if (next == quote && !escaped) break;\n                escaped = !escaped && next == \"\\\\\";\n            }\n            if (!escaped) state.tokenize = tokenBase;\n            return ret(\"string\", \"string\");\n        };\n    }\n    function tokenComment(stream, state) {\n        var maybeEnd = false, ch;\n        while(ch = stream.next()){\n            if (ch == \"/\" && maybeEnd) {\n                state.tokenize = tokenBase;\n                break;\n            }\n            maybeEnd = ch == \"*\";\n        }\n        return ret(\"comment\", \"comment\");\n    }\n    function tokenQuasi(stream, state) {\n        var escaped = false, next;\n        while((next = stream.next()) != null){\n            if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n                state.tokenize = tokenBase;\n                break;\n            }\n            escaped = !escaped && next == \"\\\\\";\n        }\n        return ret(\"quasi\", \"string.special\", stream.current());\n    }\n    var brackets = \"([{}])\";\n    // This is a crude lookahead trick to try and notice that we're\n    // parsing the argument patterns for a fat-arrow function before we\n    // actually hit the arrow token. It only works if the arrow is on\n    // the same line as the arguments and there's no strange noise\n    // (comments) in between. Fallback is to only notice when we hit the\n    // arrow, and not declare the arguments as locals for the arrow\n    // body.\n    function findFatArrow(stream, state) {\n        if (state.fatArrowAt) state.fatArrowAt = null;\n        var arrow = stream.string.indexOf(\"=>\", stream.start);\n        if (arrow < 0) return;\n        if (isTS) {\n            var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow));\n            if (m) arrow = m.index;\n        }\n        var depth = 0, sawSomething = false;\n        for(var pos = arrow - 1; pos >= 0; --pos){\n            var ch = stream.string.charAt(pos);\n            var bracket = brackets.indexOf(ch);\n            if (bracket >= 0 && bracket < 3) {\n                if (!depth) {\n                    ++pos;\n                    break;\n                }\n                if (--depth == 0) {\n                    if (ch == \"(\") sawSomething = true;\n                    break;\n                }\n            } else if (bracket >= 3 && bracket < 6) ++depth;\n            else if (wordRE.test(ch)) sawSomething = true;\n            else if (/[\"'\\/`]/.test(ch)) for(;; --pos){\n                if (pos == 0) return;\n                var next = stream.string.charAt(pos - 1);\n                if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") {\n                    pos--;\n                    break;\n                }\n            }\n            else if (sawSomething && !depth) {\n                ++pos;\n                break;\n            }\n        }\n        if (sawSomething && !depth) state.fatArrowAt = pos;\n    }\n    // Parser\n    var atomicTypes = {\n        \"atom\": true,\n        \"number\": true,\n        \"variable\": true,\n        \"string\": true,\n        \"regexp\": true,\n        \"this\": true,\n        \"import\": true,\n        \"jsonld-keyword\": true\n    };\n    function JSLexical(indented, column, type, align, prev, info) {\n        this.indented = indented;\n        this.column = column;\n        this.type = type;\n        this.prev = prev;\n        this.info = info;\n        if (align != null) this.align = align;\n    }\n    function inScope(state, varname) {\n        for(var v = state.localVars; v; v = v.next)if (v.name == varname) return true;\n        for(var cx = state.context; cx; cx = cx.prev){\n            for(var v = cx.vars; v; v = v.next)if (v.name == varname) return true;\n        }\n    }\n    function parseJS(state, style, type, content, stream) {\n        var cc = state.cc;\n        // Communicate our context to the combinators.\n        // (Less wasteful than consing up a hundred closures on every call.)\n        cx.state = state;\n        cx.stream = stream;\n        cx.marked = null;\n        cx.cc = cc;\n        cx.style = style;\n        if (!state.lexical.hasOwnProperty(\"align\")) state.lexical.align = true;\n        while(true){\n            var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n            if (combinator(type, content)) {\n                while(cc.length && cc[cc.length - 1].lex)cc.pop()();\n                if (cx.marked) return cx.marked;\n                if (type == \"variable\" && inScope(state, content)) return \"variableName.local\";\n                return style;\n            }\n        }\n    }\n    // Combinator utils\n    var cx = {\n        state: null,\n        column: null,\n        marked: null,\n        cc: null\n    };\n    function pass() {\n        for(var i = arguments.length - 1; i >= 0; i--)cx.cc.push(arguments[i]);\n    }\n    function cont() {\n        pass.apply(null, arguments);\n        return true;\n    }\n    function inList(name, list) {\n        for(var v = list; v; v = v.next)if (v.name == name) return true;\n        return false;\n    }\n    function register(varname) {\n        var state = cx.state;\n        cx.marked = \"def\";\n        if (state.context) {\n            if (state.lexical.info == \"var\" && state.context && state.context.block) {\n                // FIXME function decls are also not block scoped\n                var newContext = registerVarScoped(varname, state.context);\n                if (newContext != null) {\n                    state.context = newContext;\n                    return;\n                }\n            } else if (!inList(varname, state.localVars)) {\n                state.localVars = new Var(varname, state.localVars);\n                return;\n            }\n        }\n        // Fall through means this is global\n        if (parserConfig.globalVars && !inList(varname, state.globalVars)) state.globalVars = new Var(varname, state.globalVars);\n    }\n    function registerVarScoped(varname, context) {\n        if (!context) return null;\n        else if (context.block) {\n            var inner = registerVarScoped(varname, context.prev);\n            if (!inner) return null;\n            if (inner == context.prev) return context;\n            return new Context(inner, context.vars, true);\n        } else if (inList(varname, context.vars)) return context;\n        else return new Context(context.prev, new Var(varname, context.vars), false);\n    }\n    function isModifier(name) {\n        return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\";\n    }\n    // Combinators\n    function Context(prev, vars, block) {\n        this.prev = prev;\n        this.vars = vars;\n        this.block = block;\n    }\n    function Var(name, next) {\n        this.name = name;\n        this.next = next;\n    }\n    var defaultVars = new Var(\"this\", new Var(\"arguments\", null));\n    function pushcontext() {\n        cx.state.context = new Context(cx.state.context, cx.state.localVars, false);\n        cx.state.localVars = defaultVars;\n    }\n    function pushblockcontext() {\n        cx.state.context = new Context(cx.state.context, cx.state.localVars, true);\n        cx.state.localVars = null;\n    }\n    pushcontext.lex = pushblockcontext.lex = true;\n    function popcontext() {\n        cx.state.localVars = cx.state.context.vars;\n        cx.state.context = cx.state.context.prev;\n    }\n    popcontext.lex = true;\n    function pushlex(type, info) {\n        var result = function() {\n            var state = cx.state, indent = state.indented;\n            if (state.lexical.type == \"stat\") indent = state.lexical.indented;\n            else for(var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev)indent = outer.indented;\n            state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n        };\n        result.lex = true;\n        return result;\n    }\n    function poplex() {\n        var state = cx.state;\n        if (state.lexical.prev) {\n            if (state.lexical.type == \")\") state.indented = state.lexical.indented;\n            state.lexical = state.lexical.prev;\n        }\n    }\n    poplex.lex = true;\n    function expect(wanted) {\n        function exp(type) {\n            if (type == wanted) return cont();\n            else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();\n            else return cont(exp);\n        }\n        return exp;\n    }\n    function statement(type, value) {\n        if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n        if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n        if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n        if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n        if (type == \"debugger\") return cont(expect(\";\"));\n        if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n        if (type == \";\") return cont();\n        if (type == \"if\") {\n            if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex) cx.state.cc.pop()();\n            return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n        }\n        if (type == \"function\") return cont(functiondef);\n        if (type == \"for\") return cont(pushlex(\"form\"), pushblockcontext, forspec, statement, popcontext, poplex);\n        if (type == \"class\" || isTS && value == \"interface\") {\n            cx.marked = \"keyword\";\n            return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex);\n        }\n        if (type == \"variable\") {\n            if (isTS && value == \"declare\") {\n                cx.marked = \"keyword\";\n                return cont(statement);\n            } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n                cx.marked = \"keyword\";\n                if (value == \"enum\") return cont(enumdef);\n                else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));\n                else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex);\n            } else if (isTS && value == \"namespace\") {\n                cx.marked = \"keyword\";\n                return cont(pushlex(\"form\"), expression, statement, poplex);\n            } else if (isTS && value == \"abstract\") {\n                cx.marked = \"keyword\";\n                return cont(statement);\n            } else return cont(pushlex(\"stat\"), maybelabel);\n        }\n        if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext, block, poplex, poplex, popcontext);\n        if (type == \"case\") return cont(expression, expect(\":\"));\n        if (type == \"default\") return cont(expect(\":\"));\n        if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n        if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n        if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n        if (type == \"async\") return cont(statement);\n        if (value == \"@\") return cont(expression, statement);\n        return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n    }\n    function maybeCatchBinding(type) {\n        if (type == \"(\") return cont(funarg, expect(\")\"));\n    }\n    function expression(type, value) {\n        return expressionInner(type, value, false);\n    }\n    function expressionNoComma(type, value) {\n        return expressionInner(type, value, true);\n    }\n    function parenExpr(type) {\n        if (type != \"(\") return pass();\n        return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex);\n    }\n    function expressionInner(type, value, noComma) {\n        if (cx.state.fatArrowAt == cx.stream.start) {\n            var body = noComma ? arrowBodyNoComma : arrowBody;\n            if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);\n            else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n        }\n        var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n        if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n        if (type == \"function\") return cont(functiondef, maybeop);\n        if (type == \"class\" || isTS && value == \"interface\") {\n            cx.marked = \"keyword\";\n            return cont(pushlex(\"form\"), classExpression, poplex);\n        }\n        if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n        if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n        if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n        if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n        if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n        if (type == \"quasi\") return pass(quasi, maybeop);\n        if (type == \"new\") return cont(maybeTarget(noComma));\n        return cont();\n    }\n    function maybeexpression(type) {\n        if (type.match(/[;\\}\\)\\],]/)) return pass();\n        return pass(expression);\n    }\n    function maybeoperatorComma(type, value) {\n        if (type == \",\") return cont(maybeexpression);\n        return maybeoperatorNoComma(type, value, false);\n    }\n    function maybeoperatorNoComma(type, value, noComma) {\n        var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n        var expr = noComma == false ? expression : expressionNoComma;\n        if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n        if (type == \"operator\") {\n            if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n            if (isTS && value == \"<\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false)) return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n            if (value == \"?\") return cont(expression, expect(\":\"), expr);\n            return cont(expr);\n        }\n        if (type == \"quasi\") return pass(quasi, me);\n        if (type == \";\") return;\n        if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n        if (type == \".\") return cont(property, me);\n        if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n        if (isTS && value == \"as\") {\n            cx.marked = \"keyword\";\n            return cont(typeexpr, me);\n        }\n        if (type == \"regexp\") {\n            cx.state.lastType = cx.marked = \"operator\";\n            cx.stream.backUp(cx.stream.pos - cx.stream.start - 1);\n            return cont(expr);\n        }\n    }\n    function quasi(type, value) {\n        if (type != \"quasi\") return pass();\n        if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n        return cont(maybeexpression, continueQuasi);\n    }\n    function continueQuasi(type) {\n        if (type == \"}\") {\n            cx.marked = \"string.special\";\n            cx.state.tokenize = tokenQuasi;\n            return cont(quasi);\n        }\n    }\n    function arrowBody(type) {\n        findFatArrow(cx.stream, cx.state);\n        return pass(type == \"{\" ? statement : expression);\n    }\n    function arrowBodyNoComma(type) {\n        findFatArrow(cx.stream, cx.state);\n        return pass(type == \"{\" ? statement : expressionNoComma);\n    }\n    function maybeTarget(noComma) {\n        return function(type) {\n            if (type == \".\") return cont(noComma ? targetNoComma : target);\n            else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma);\n            else return pass(noComma ? expressionNoComma : expression);\n        };\n    }\n    function target(_, value) {\n        if (value == \"target\") {\n            cx.marked = \"keyword\";\n            return cont(maybeoperatorComma);\n        }\n    }\n    function targetNoComma(_, value) {\n        if (value == \"target\") {\n            cx.marked = \"keyword\";\n            return cont(maybeoperatorNoComma);\n        }\n    }\n    function maybelabel(type) {\n        if (type == \":\") return cont(poplex, statement);\n        return pass(maybeoperatorComma, expect(\";\"), poplex);\n    }\n    function property(type) {\n        if (type == \"variable\") {\n            cx.marked = \"property\";\n            return cont();\n        }\n    }\n    function objprop(type, value) {\n        if (type == \"async\") {\n            cx.marked = \"property\";\n            return cont(objprop);\n        } else if (type == \"variable\" || cx.style == \"keyword\") {\n            cx.marked = \"property\";\n            if (value == \"get\" || value == \"set\") return cont(getterSetter);\n            var m // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n            ;\n            if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false))) cx.state.fatArrowAt = cx.stream.pos + m[0].length;\n            return cont(afterprop);\n        } else if (type == \"number\" || type == \"string\") {\n            cx.marked = jsonldMode ? \"property\" : cx.style + \" property\";\n            return cont(afterprop);\n        } else if (type == \"jsonld-keyword\") return cont(afterprop);\n        else if (isTS && isModifier(value)) {\n            cx.marked = \"keyword\";\n            return cont(objprop);\n        } else if (type == \"[\") return cont(expression, maybetype, expect(\"]\"), afterprop);\n        else if (type == \"spread\") return cont(expressionNoComma, afterprop);\n        else if (value == \"*\") {\n            cx.marked = \"keyword\";\n            return cont(objprop);\n        } else if (type == \":\") return pass(afterprop);\n    }\n    function getterSetter(type) {\n        if (type != \"variable\") return pass(afterprop);\n        cx.marked = \"property\";\n        return cont(functiondef);\n    }\n    function afterprop(type) {\n        if (type == \":\") return cont(expressionNoComma);\n        if (type == \"(\") return pass(functiondef);\n    }\n    function commasep(what, end, sep) {\n        function proceed(type, value) {\n            if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n                var lex = cx.state.lexical;\n                if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n                return cont(function(type, value) {\n                    if (type == end || value == end) return pass();\n                    return pass(what);\n                }, proceed);\n            }\n            if (type == end || value == end) return cont();\n            if (sep && sep.indexOf(\";\") > -1) return pass(what);\n            return cont(expect(end));\n        }\n        return function(type, value) {\n            if (type == end || value == end) return cont();\n            return pass(what, proceed);\n        };\n    }\n    function contCommasep(what, end, info) {\n        for(var i = 3; i < arguments.length; i++)cx.cc.push(arguments[i]);\n        return cont(pushlex(end, info), commasep(what, end), poplex);\n    }\n    function block(type) {\n        if (type == \"}\") return cont();\n        return pass(statement, block);\n    }\n    function maybetype(type, value) {\n        if (isTS) {\n            if (type == \":\") return cont(typeexpr);\n            if (value == \"?\") return cont(maybetype);\n        }\n    }\n    function maybetypeOrIn(type, value) {\n        if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr);\n    }\n    function mayberettype(type) {\n        if (isTS && type == \":\") {\n            if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr);\n            else return cont(typeexpr);\n        }\n    }\n    function isKW(_, value) {\n        if (value == \"is\") {\n            cx.marked = \"keyword\";\n            return cont();\n        }\n    }\n    function typeexpr(type, value) {\n        if (value == \"keyof\" || value == \"typeof\" || value == \"infer\" || value == \"readonly\") {\n            cx.marked = \"keyword\";\n            return cont(value == \"typeof\" ? expressionNoComma : typeexpr);\n        }\n        if (type == \"variable\" || value == \"void\") {\n            cx.marked = \"type\";\n            return cont(afterType);\n        }\n        if (value == \"|\" || value == \"&\") return cont(typeexpr);\n        if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n        if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType);\n        if (type == \"{\") return cont(pushlex(\"}\"), typeprops, poplex, afterType);\n        if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType);\n        if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr);\n        if (type == \"quasi\") return pass(quasiType, afterType);\n    }\n    function maybeReturnType(type) {\n        if (type == \"=>\") return cont(typeexpr);\n    }\n    function typeprops(type) {\n        if (type.match(/[\\}\\)\\]]/)) return cont();\n        if (type == \",\" || type == \";\") return cont(typeprops);\n        return pass(typeprop, typeprops);\n    }\n    function typeprop(type, value) {\n        if (type == \"variable\" || cx.style == \"keyword\") {\n            cx.marked = \"property\";\n            return cont(typeprop);\n        } else if (value == \"?\" || type == \"number\" || type == \"string\") return cont(typeprop);\n        else if (type == \":\") return cont(typeexpr);\n        else if (type == \"[\") return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop);\n        else if (type == \"(\") return pass(functiondecl, typeprop);\n        else if (!type.match(/[;\\}\\)\\],]/)) return cont();\n    }\n    function quasiType(type, value) {\n        if (type != \"quasi\") return pass();\n        if (value.slice(value.length - 2) != \"${\") return cont(quasiType);\n        return cont(typeexpr, continueQuasiType);\n    }\n    function continueQuasiType(type) {\n        if (type == \"}\") {\n            cx.marked = \"string.special\";\n            cx.state.tokenize = tokenQuasi;\n            return cont(quasiType);\n        }\n    }\n    function typearg(type, value) {\n        if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg);\n        if (type == \":\") return cont(typeexpr);\n        if (type == \"spread\") return cont(typearg);\n        return pass(typeexpr);\n    }\n    function afterType(type, value) {\n        if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType);\n        if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr);\n        if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType);\n        if (value == \"extends\" || value == \"implements\") {\n            cx.marked = \"keyword\";\n            return cont(typeexpr);\n        }\n        if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr);\n    }\n    function maybeTypeArgs(_, value) {\n        if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType);\n    }\n    function typeparam() {\n        return pass(typeexpr, maybeTypeDefault);\n    }\n    function maybeTypeDefault(_, value) {\n        if (value == \"=\") return cont(typeexpr);\n    }\n    function vardef(_, value) {\n        if (value == \"enum\") {\n            cx.marked = \"keyword\";\n            return cont(enumdef);\n        }\n        return pass(pattern, maybetype, maybeAssign, vardefCont);\n    }\n    function pattern(type, value) {\n        if (isTS && isModifier(value)) {\n            cx.marked = \"keyword\";\n            return cont(pattern);\n        }\n        if (type == \"variable\") {\n            register(value);\n            return cont();\n        }\n        if (type == \"spread\") return cont(pattern);\n        if (type == \"[\") return contCommasep(eltpattern, \"]\");\n        if (type == \"{\") return contCommasep(proppattern, \"}\");\n    }\n    function proppattern(type, value) {\n        if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n            register(value);\n            return cont(maybeAssign);\n        }\n        if (type == \"variable\") cx.marked = \"property\";\n        if (type == \"spread\") return cont(pattern);\n        if (type == \"}\") return pass();\n        if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n        return cont(expect(\":\"), pattern, maybeAssign);\n    }\n    function eltpattern() {\n        return pass(pattern, maybeAssign);\n    }\n    function maybeAssign(_type, value) {\n        if (value == \"=\") return cont(expressionNoComma);\n    }\n    function vardefCont(type) {\n        if (type == \",\") return cont(vardef);\n    }\n    function maybeelse(type, value) {\n        if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n    }\n    function forspec(type, value) {\n        if (value == \"await\") return cont(forspec);\n        if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n    }\n    function forspec1(type) {\n        if (type == \"var\") return cont(vardef, forspec2);\n        if (type == \"variable\") return cont(forspec2);\n        return pass(forspec2);\n    }\n    function forspec2(type, value) {\n        if (type == \")\") return cont();\n        if (type == \";\") return cont(forspec2);\n        if (value == \"in\" || value == \"of\") {\n            cx.marked = \"keyword\";\n            return cont(expression, forspec2);\n        }\n        return pass(expression, forspec2);\n    }\n    function functiondef(type, value) {\n        if (value == \"*\") {\n            cx.marked = \"keyword\";\n            return cont(functiondef);\n        }\n        if (type == \"variable\") {\n            register(value);\n            return cont(functiondef);\n        }\n        if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n        if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef);\n    }\n    function functiondecl(type, value) {\n        if (value == \"*\") {\n            cx.marked = \"keyword\";\n            return cont(functiondecl);\n        }\n        if (type == \"variable\") {\n            register(value);\n            return cont(functiondecl);\n        }\n        if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n        if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl);\n    }\n    function typename(type, value) {\n        if (type == \"keyword\" || type == \"variable\") {\n            cx.marked = \"type\";\n            return cont(typename);\n        } else if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex);\n    }\n    function funarg(type, value) {\n        if (value == \"@\") cont(expression, funarg);\n        if (type == \"spread\") return cont(funarg);\n        if (isTS && isModifier(value)) {\n            cx.marked = \"keyword\";\n            return cont(funarg);\n        }\n        if (isTS && type == \"this\") return cont(maybetype, maybeAssign);\n        return pass(pattern, maybetype, maybeAssign);\n    }\n    function classExpression(type, value) {\n        // Class expressions may have an optional name.\n        if (type == \"variable\") return className(type, value);\n        return classNameAfter(type, value);\n    }\n    function className(type, value) {\n        if (type == \"variable\") {\n            register(value);\n            return cont(classNameAfter);\n        }\n    }\n    function classNameAfter(type, value) {\n        if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter);\n        if (value == \"extends\" || value == \"implements\" || isTS && type == \",\") {\n            if (value == \"implements\") cx.marked = \"keyword\";\n            return cont(isTS ? typeexpr : expression, classNameAfter);\n        }\n        if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n    }\n    function classBody(type, value) {\n        if (type == \"async\" || type == \"variable\" && (value == \"static\" || value == \"get\" || value == \"set\" || isTS && isModifier(value)) && cx.stream.match(/^\\s+#?[\\w$\\xa1-\\uffff]/, false)) {\n            cx.marked = \"keyword\";\n            return cont(classBody);\n        }\n        if (type == \"variable\" || cx.style == \"keyword\") {\n            cx.marked = \"property\";\n            return cont(classfield, classBody);\n        }\n        if (type == \"number\" || type == \"string\") return cont(classfield, classBody);\n        if (type == \"[\") return cont(expression, maybetype, expect(\"]\"), classfield, classBody);\n        if (value == \"*\") {\n            cx.marked = \"keyword\";\n            return cont(classBody);\n        }\n        if (isTS && type == \"(\") return pass(functiondecl, classBody);\n        if (type == \";\" || type == \",\") return cont(classBody);\n        if (type == \"}\") return cont();\n        if (value == \"@\") return cont(expression, classBody);\n    }\n    function classfield(type, value) {\n        if (value == \"!\" || value == \"?\") return cont(classfield);\n        if (type == \":\") return cont(typeexpr, maybeAssign);\n        if (value == \"=\") return cont(expressionNoComma);\n        var context = cx.state.lexical.prev, isInterface = context && context.info == \"interface\";\n        return pass(isInterface ? functiondecl : functiondef);\n    }\n    function afterExport(type, value) {\n        if (value == \"*\") {\n            cx.marked = \"keyword\";\n            return cont(maybeFrom, expect(\";\"));\n        }\n        if (value == \"default\") {\n            cx.marked = \"keyword\";\n            return cont(expression, expect(\";\"));\n        }\n        if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n        return pass(statement);\n    }\n    function exportField(type, value) {\n        if (value == \"as\") {\n            cx.marked = \"keyword\";\n            return cont(expect(\"variable\"));\n        }\n        if (type == \"variable\") return pass(expressionNoComma, exportField);\n    }\n    function afterImport(type) {\n        if (type == \"string\") return cont();\n        if (type == \"(\") return pass(expression);\n        if (type == \".\") return pass(maybeoperatorComma);\n        return pass(importSpec, maybeMoreImports, maybeFrom);\n    }\n    function importSpec(type, value) {\n        if (type == \"{\") return contCommasep(importSpec, \"}\");\n        if (type == \"variable\") register(value);\n        if (value == \"*\") cx.marked = \"keyword\";\n        return cont(maybeAs);\n    }\n    function maybeMoreImports(type) {\n        if (type == \",\") return cont(importSpec, maybeMoreImports);\n    }\n    function maybeAs(_type, value) {\n        if (value == \"as\") {\n            cx.marked = \"keyword\";\n            return cont(importSpec);\n        }\n    }\n    function maybeFrom(_type, value) {\n        if (value == \"from\") {\n            cx.marked = \"keyword\";\n            return cont(expression);\n        }\n    }\n    function arrayLiteral(type) {\n        if (type == \"]\") return cont();\n        return pass(commasep(expressionNoComma, \"]\"));\n    }\n    function enumdef() {\n        return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex);\n    }\n    function enummember() {\n        return pass(pattern, maybeAssign);\n    }\n    function isContinuedStatement(state, textAfter) {\n        return state.lastType == \"operator\" || state.lastType == \",\" || isOperatorChar.test(textAfter.charAt(0)) || /[,.]/.test(textAfter.charAt(0));\n    }\n    function expressionAllowed(stream, state, backUp) {\n        return state.tokenize == tokenBase && /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) || state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0)));\n    }\n    // Interface\n    return {\n        name: parserConfig.name,\n        startState: function(indentUnit) {\n            var state = {\n                tokenize: tokenBase,\n                lastType: \"sof\",\n                cc: [],\n                lexical: new JSLexical(-indentUnit, 0, \"block\", false),\n                localVars: parserConfig.localVars,\n                context: parserConfig.localVars && new Context(null, null, false),\n                indented: 0\n            };\n            if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\") state.globalVars = parserConfig.globalVars;\n            return state;\n        },\n        token: function(stream, state) {\n            if (stream.sol()) {\n                if (!state.lexical.hasOwnProperty(\"align\")) state.lexical.align = false;\n                state.indented = stream.indentation();\n                findFatArrow(stream, state);\n            }\n            if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n            var style = state.tokenize(stream, state);\n            if (type == \"comment\") return style;\n            state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n            return parseJS(state, style, type, content, stream);\n        },\n        indent: function(state, textAfter, cx) {\n            if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return null;\n            if (state.tokenize != tokenBase) return 0;\n            var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top;\n            // Kludge to prevent 'maybelse' from blocking lexical scope pops\n            if (!/^\\s*else\\b/.test(textAfter)) for(var i = state.cc.length - 1; i >= 0; --i){\n                var c = state.cc[i];\n                if (c == poplex) lexical = lexical.prev;\n                else if (c != maybeelse && c != popcontext) break;\n            }\n            while((lexical.type == \"stat\" || lexical.type == \"form\") && (firstChar == \"}\" || (top = state.cc[state.cc.length - 1]) && (top == maybeoperatorComma || top == maybeoperatorNoComma) && !/^[,\\.=+\\-*:?[\\(]/.test(textAfter)))lexical = lexical.prev;\n            if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\") lexical = lexical.prev;\n            var type = lexical.type, closing = firstChar == type;\n            if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);\n            else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\n            else if (type == \"form\") return lexical.indented + cx.unit;\n            else if (type == \"stat\") return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || cx.unit : 0);\n            else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false) return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? cx.unit : 2 * cx.unit);\n            else if (lexical.align) return lexical.column + (closing ? 0 : 1);\n            else return lexical.indented + (closing ? 0 : cx.unit);\n        },\n        languageData: {\n            indentOnInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n            commentTokens: jsonMode ? undefined : {\n                line: \"//\",\n                block: {\n                    open: \"/*\",\n                    close: \"*/\"\n                }\n            },\n            closeBrackets: {\n                brackets: [\n                    \"(\",\n                    \"[\",\n                    \"{\",\n                    \"'\",\n                    '\"',\n                    \"`\"\n                ]\n            },\n            wordChars: \"$\"\n        }\n    };\n}\nconst $26a9bb98cfa29abc$export$755219397dca4f08 = $26a9bb98cfa29abc$var$mkJavaScript({\n    name: \"javascript\"\n});\nconst $26a9bb98cfa29abc$export$7b419323e6ed4f31 = $26a9bb98cfa29abc$var$mkJavaScript({\n    name: \"json\",\n    json: true\n});\nconst $26a9bb98cfa29abc$export$f8fce98513fdd41a = $26a9bb98cfa29abc$var$mkJavaScript({\n    name: \"json\",\n    jsonld: true\n});\nconst $26a9bb98cfa29abc$export$a2ad696dee00836e = $26a9bb98cfa29abc$var$mkJavaScript({\n    name: \"typescript\",\n    typescript: true\n});\n\n});\n\n\n//# sourceMappingURL=javascript.a22b71c8.js.map\n","function mkJavaScript(parserConfig) {\n  var statementIndent = parserConfig.statementIndent;\n  var jsonldMode = parserConfig.jsonld;\n  var jsonMode = parserConfig.json || jsonldMode;\n  var isTS = parserConfig.typescript;\n  var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/;\n\n  // Tokenizer\n\n  var keywords = function(){\n    function kw(type) {return {type: type, style: \"keyword\"};}\n    var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\"), D = kw(\"keyword d\");\n    var operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"};\n\n    return {\n      \"if\": kw(\"if\"), \"while\": A, \"with\": A, \"else\": B, \"do\": B, \"try\": B, \"finally\": B,\n      \"return\": D, \"break\": D, \"continue\": D, \"new\": kw(\"new\"), \"delete\": C, \"void\": C, \"throw\": C,\n      \"debugger\": kw(\"debugger\"), \"var\": kw(\"var\"), \"const\": kw(\"var\"), \"let\": kw(\"var\"),\n      \"function\": kw(\"function\"), \"catch\": kw(\"catch\"),\n      \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\n      \"in\": operator, \"typeof\": operator, \"instanceof\": operator,\n      \"true\": atom, \"false\": atom, \"null\": atom, \"undefined\": atom, \"NaN\": atom, \"Infinity\": atom,\n      \"this\": kw(\"this\"), \"class\": kw(\"class\"), \"super\": kw(\"atom\"),\n      \"yield\": C, \"export\": kw(\"export\"), \"import\": kw(\"import\"), \"extends\": C,\n      \"await\": C\n    };\n  }();\n\n  var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n  function readRegexp(stream) {\n    var escaped = false, next, inSet = false;\n    while ((next = stream.next()) != null) {\n      if (!escaped) {\n        if (next == \"/\" && !inSet) return;\n        if (next == \"[\") inSet = true;\n        else if (inSet && next == \"]\") inSet = false;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n  }\n\n  // Used as scratch variables to communicate multiple values without\n  // consing up tons of objects.\n  var type, content;\n  function ret(tp, style, cont) {\n    type = tp; content = cont;\n    return style;\n  }\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n      return ret(\"number\", \"number\");\n    } else if (ch == \".\" && stream.match(\"..\")) {\n      return ret(\"spread\", \"meta\");\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return ret(ch);\n    } else if (ch == \"=\" && stream.eat(\">\")) {\n      return ret(\"=>\", \"operator\");\n    } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n      return ret(\"number\", \"number\");\n    } else if (/\\d/.test(ch)) {\n      stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n      return ret(\"number\", \"number\");\n    } else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (expressionAllowed(stream, state, 1)) {\n        readRegexp(stream);\n        stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n        return ret(\"regexp\", \"string.special\");\n      } else {\n        stream.eat(\"=\");\n        return ret(\"operator\", \"operator\", stream.current());\n      }\n    } else if (ch == \"`\") {\n      state.tokenize = tokenQuasi;\n      return tokenQuasi(stream, state);\n    } else if (ch == \"#\" && stream.peek() == \"!\") {\n      stream.skipToEnd();\n      return ret(\"meta\", \"meta\");\n    } else if (ch == \"#\" && stream.eatWhile(wordRE)) {\n      return ret(\"variable\", \"property\")\n    } else if (ch == \"<\" && stream.match(\"!--\") ||\n               (ch == \"-\" && stream.match(\"->\") && !/\\S/.test(stream.string.slice(0, stream.start)))) {\n      stream.skipToEnd()\n      return ret(\"comment\", \"comment\")\n    } else if (isOperatorChar.test(ch)) {\n      if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n        if (stream.eat(\"=\")) {\n          if (ch == \"!\" || ch == \"=\") stream.eat(\"=\")\n        } else if (/[<>*+\\-|&?]/.test(ch)) {\n          stream.eat(ch)\n          if (ch == \">\") stream.eat(ch)\n        }\n      }\n      if (ch == \"?\" && stream.eat(\".\")) return ret(\".\")\n      return ret(\"operator\", \"operator\", stream.current());\n    } else if (wordRE.test(ch)) {\n      stream.eatWhile(wordRE);\n      var word = stream.current()\n      if (state.lastType != \".\") {\n        if (keywords.propertyIsEnumerable(word)) {\n          var kw = keywords[word]\n          return ret(kw.type, kw.style, word)\n        }\n        if (word == \"async\" && stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/, false))\n          return ret(\"async\", \"keyword\", word)\n      }\n      return ret(\"variable\", \"variable\", word)\n    }\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)){\n        state.tokenize = tokenBase;\n        return ret(\"jsonld-keyword\", \"meta\");\n      }\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return ret(\"string\", \"string\");\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  function tokenQuasi(stream, state) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    return ret(\"quasi\", \"string.special\", stream.current());\n  }\n\n  var brackets = \"([{}])\";\n  // This is a crude lookahead trick to try and notice that we're\n  // parsing the argument patterns for a fat-arrow function before we\n  // actually hit the arrow token. It only works if the arrow is on\n  // the same line as the arguments and there's no strange noise\n  // (comments) in between. Fallback is to only notice when we hit the\n  // arrow, and not declare the arguments as locals for the arrow\n  // body.\n  function findFatArrow(stream, state) {\n    if (state.fatArrowAt) state.fatArrowAt = null;\n    var arrow = stream.string.indexOf(\"=>\", stream.start);\n    if (arrow < 0) return;\n\n    if (isTS) { // Try to skip TypeScript return type declarations after the arguments\n      var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow))\n      if (m) arrow = m.index\n    }\n\n    var depth = 0, sawSomething = false;\n    for (var pos = arrow - 1; pos >= 0; --pos) {\n      var ch = stream.string.charAt(pos);\n      var bracket = brackets.indexOf(ch);\n      if (bracket >= 0 && bracket < 3) {\n        if (!depth) { ++pos; break; }\n        if (--depth == 0) { if (ch == \"(\") sawSomething = true; break; }\n      } else if (bracket >= 3 && bracket < 6) {\n        ++depth;\n      } else if (wordRE.test(ch)) {\n        sawSomething = true;\n      } else if (/[\"'\\/`]/.test(ch)) {\n        for (;; --pos) {\n          if (pos == 0) return\n          var next = stream.string.charAt(pos - 1)\n          if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") { pos--; break }\n        }\n      } else if (sawSomething && !depth) {\n        ++pos;\n        break;\n      }\n    }\n    if (sawSomething && !depth) state.fatArrowAt = pos;\n  }\n\n  // Parser\n\n  var atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true,\n                     \"regexp\": true, \"this\": true, \"import\": true, \"jsonld-keyword\": true};\n\n  function JSLexical(indented, column, type, align, prev, info) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.prev = prev;\n    this.info = info;\n    if (align != null) this.align = align;\n  }\n\n  function inScope(state, varname) {\n    for (var v = state.localVars; v; v = v.next)\n      if (v.name == varname) return true;\n    for (var cx = state.context; cx; cx = cx.prev) {\n      for (var v = cx.vars; v; v = v.next)\n        if (v.name == varname) return true;\n    }\n  }\n\n  function parseJS(state, style, type, content, stream) {\n    var cc = state.cc;\n    // Communicate our context to the combinators.\n    // (Less wasteful than consing up a hundred closures on every call.)\n    cx.state = state; cx.stream = stream; cx.marked = null; cx.cc = cc; cx.style = style;\n\n    if (!state.lexical.hasOwnProperty(\"align\"))\n      state.lexical.align = true;\n\n    while(true) {\n      var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n      if (combinator(type, content)) {\n        while(cc.length && cc[cc.length - 1].lex)\n          cc.pop()();\n        if (cx.marked) return cx.marked;\n        if (type == \"variable\" && inScope(state, content)) return \"variableName.local\";\n        return style;\n      }\n    }\n  }\n\n  // Combinator utils\n\n  var cx = {state: null, column: null, marked: null, cc: null};\n  function pass() {\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n  }\n  function cont() {\n    pass.apply(null, arguments);\n    return true;\n  }\n  function inList(name, list) {\n    for (var v = list; v; v = v.next) if (v.name == name) return true\n    return false;\n  }\n  function register(varname) {\n    var state = cx.state;\n    cx.marked = \"def\";\n    if (state.context) {\n      if (state.lexical.info == \"var\" && state.context && state.context.block) {\n        // FIXME function decls are also not block scoped\n        var newContext = registerVarScoped(varname, state.context)\n        if (newContext != null) {\n          state.context = newContext\n          return\n        }\n      } else if (!inList(varname, state.localVars)) {\n        state.localVars = new Var(varname, state.localVars)\n        return\n      }\n    }\n    // Fall through means this is global\n    if (parserConfig.globalVars && !inList(varname, state.globalVars))\n      state.globalVars = new Var(varname, state.globalVars)\n  }\n  function registerVarScoped(varname, context) {\n    if (!context) {\n      return null\n    } else if (context.block) {\n      var inner = registerVarScoped(varname, context.prev)\n      if (!inner) return null\n      if (inner == context.prev) return context\n      return new Context(inner, context.vars, true)\n    } else if (inList(varname, context.vars)) {\n      return context\n    } else {\n      return new Context(context.prev, new Var(varname, context.vars), false)\n    }\n  }\n\n  function isModifier(name) {\n    return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\"\n  }\n\n  // Combinators\n\n  function Context(prev, vars, block) { this.prev = prev; this.vars = vars; this.block = block }\n  function Var(name, next) { this.name = name; this.next = next }\n\n  var defaultVars = new Var(\"this\", new Var(\"arguments\", null))\n  function pushcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, false)\n    cx.state.localVars = defaultVars\n  }\n  function pushblockcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, true)\n    cx.state.localVars = null\n  }\n  pushcontext.lex = pushblockcontext.lex = true\n  function popcontext() {\n    cx.state.localVars = cx.state.context.vars\n    cx.state.context = cx.state.context.prev\n  }\n  popcontext.lex = true\n  function pushlex(type, info) {\n    var result = function() {\n      var state = cx.state, indent = state.indented;\n      if (state.lexical.type == \"stat\") indent = state.lexical.indented;\n      else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev)\n        indent = outer.indented;\n      state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n    };\n    result.lex = true;\n    return result;\n  }\n  function poplex() {\n    var state = cx.state;\n    if (state.lexical.prev) {\n      if (state.lexical.type == \")\")\n        state.indented = state.lexical.indented;\n      state.lexical = state.lexical.prev;\n    }\n  }\n  poplex.lex = true;\n\n  function expect(wanted) {\n    function exp(type) {\n      if (type == wanted) return cont();\n      else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();\n      else return cont(exp);\n    };\n    return exp;\n  }\n\n  function statement(type, value) {\n    if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n    if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n    if (type == \"debugger\") return cont(expect(\";\"));\n    if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n    if (type == \";\") return cont();\n    if (type == \"if\") {\n      if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex)\n        cx.state.cc.pop()();\n      return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n    }\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"for\") return cont(pushlex(\"form\"), pushblockcontext, forspec, statement, popcontext, poplex);\n    if (type == \"class\" || (isTS && value == \"interface\")) {\n      cx.marked = \"keyword\"\n      return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex)\n    }\n    if (type == \"variable\") {\n      if (isTS && value == \"declare\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n        cx.marked = \"keyword\"\n        if (value == \"enum\") return cont(enumdef);\n        else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));\n        else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex)\n      } else if (isTS && value == \"namespace\") {\n        cx.marked = \"keyword\"\n        return cont(pushlex(\"form\"), expression, statement, poplex)\n      } else if (isTS && value == \"abstract\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else {\n        return cont(pushlex(\"stat\"), maybelabel);\n      }\n    }\n    if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext,\n                                      block, poplex, poplex, popcontext);\n    if (type == \"case\") return cont(expression, expect(\":\"));\n    if (type == \"default\") return cont(expect(\":\"));\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n    if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n    if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n    if (type == \"async\") return cont(statement)\n    if (value == \"@\") return cont(expression, statement)\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n  }\n  function maybeCatchBinding(type) {\n    if (type == \"(\") return cont(funarg, expect(\")\"))\n  }\n  function expression(type, value) {\n    return expressionInner(type, value, false);\n  }\n  function expressionNoComma(type, value) {\n    return expressionInner(type, value, true);\n  }\n  function parenExpr(type) {\n    if (type != \"(\") return pass()\n    return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex)\n  }\n  function expressionInner(type, value, noComma) {\n    if (cx.state.fatArrowAt == cx.stream.start) {\n      var body = noComma ? arrowBodyNoComma : arrowBody;\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);\n      else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n    }\n\n    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n    if (type == \"function\") return cont(functiondef, maybeop);\n    if (type == \"class\" || (isTS && value == \"interface\")) { cx.marked = \"keyword\"; return cont(pushlex(\"form\"), classExpression, poplex); }\n    if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n    if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n    if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n    if (type == \"quasi\") return pass(quasi, maybeop);\n    if (type == \"new\") return cont(maybeTarget(noComma));\n    return cont();\n  }\n  function maybeexpression(type) {\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\n    return pass(expression);\n  }\n\n  function maybeoperatorComma(type, value) {\n    if (type == \",\") return cont(maybeexpression);\n    return maybeoperatorNoComma(type, value, false);\n  }\n  function maybeoperatorNoComma(type, value, noComma) {\n    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n    var expr = noComma == false ? expression : expressionNoComma;\n    if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n    if (type == \"operator\") {\n      if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n      if (isTS && value == \"<\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false))\n        return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n      if (value == \"?\") return cont(expression, expect(\":\"), expr);\n      return cont(expr);\n    }\n    if (type == \"quasi\") { return pass(quasi, me); }\n    if (type == \";\") return;\n    if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n    if (type == \".\") return cont(property, me);\n    if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n    if (isTS && value == \"as\") { cx.marked = \"keyword\"; return cont(typeexpr, me) }\n    if (type == \"regexp\") {\n      cx.state.lastType = cx.marked = \"operator\"\n      cx.stream.backUp(cx.stream.pos - cx.stream.start - 1)\n      return cont(expr)\n    }\n  }\n  function quasi(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n    return cont(maybeexpression, continueQuasi);\n  }\n  function continueQuasi(type) {\n    if (type == \"}\") {\n      cx.marked = \"string.special\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasi);\n    }\n  }\n  function arrowBody(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expression);\n  }\n  function arrowBodyNoComma(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expressionNoComma);\n  }\n  function maybeTarget(noComma) {\n    return function(type) {\n      if (type == \".\") return cont(noComma ? targetNoComma : target);\n      else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma)\n      else return pass(noComma ? expressionNoComma : expression);\n    };\n  }\n  function target(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorComma); }\n  }\n  function targetNoComma(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorNoComma); }\n  }\n  function maybelabel(type) {\n    if (type == \":\") return cont(poplex, statement);\n    return pass(maybeoperatorComma, expect(\";\"), poplex);\n  }\n  function property(type) {\n    if (type == \"variable\") {cx.marked = \"property\"; return cont();}\n  }\n  function objprop(type, value) {\n    if (type == \"async\") {\n      cx.marked = \"property\";\n      return cont(objprop);\n    } else if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      if (value == \"get\" || value == \"set\") return cont(getterSetter);\n      var m // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n      if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false)))\n        cx.state.fatArrowAt = cx.stream.pos + m[0].length\n      return cont(afterprop);\n    } else if (type == \"number\" || type == \"string\") {\n      cx.marked = jsonldMode ? \"property\" : (cx.style + \" property\");\n      return cont(afterprop);\n    } else if (type == \"jsonld-keyword\") {\n      return cont(afterprop);\n    } else if (isTS && isModifier(value)) {\n      cx.marked = \"keyword\"\n      return cont(objprop)\n    } else if (type == \"[\") {\n      return cont(expression, maybetype, expect(\"]\"), afterprop);\n    } else if (type == \"spread\") {\n      return cont(expressionNoComma, afterprop);\n    } else if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(objprop);\n    } else if (type == \":\") {\n      return pass(afterprop)\n    }\n  }\n  function getterSetter(type) {\n    if (type != \"variable\") return pass(afterprop);\n    cx.marked = \"property\";\n    return cont(functiondef);\n  }\n  function afterprop(type) {\n    if (type == \":\") return cont(expressionNoComma);\n    if (type == \"(\") return pass(functiondef);\n  }\n  function commasep(what, end, sep) {\n    function proceed(type, value) {\n      if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n        var lex = cx.state.lexical;\n        if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n        return cont(function(type, value) {\n          if (type == end || value == end) return pass()\n          return pass(what)\n        }, proceed);\n      }\n      if (type == end || value == end) return cont();\n      if (sep && sep.indexOf(\";\") > -1) return pass(what)\n      return cont(expect(end));\n    }\n    return function(type, value) {\n      if (type == end || value == end) return cont();\n      return pass(what, proceed);\n    };\n  }\n  function contCommasep(what, end, info) {\n    for (var i = 3; i < arguments.length; i++)\n      cx.cc.push(arguments[i]);\n    return cont(pushlex(end, info), commasep(what, end), poplex);\n  }\n  function block(type) {\n    if (type == \"}\") return cont();\n    return pass(statement, block);\n  }\n  function maybetype(type, value) {\n    if (isTS) {\n      if (type == \":\") return cont(typeexpr);\n      if (value == \"?\") return cont(maybetype);\n    }\n  }\n  function maybetypeOrIn(type, value) {\n    if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr)\n  }\n  function mayberettype(type) {\n    if (isTS && type == \":\") {\n      if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr)\n      else return cont(typeexpr)\n    }\n  }\n  function isKW(_, value) {\n    if (value == \"is\") {\n      cx.marked = \"keyword\"\n      return cont()\n    }\n  }\n  function typeexpr(type, value) {\n    if (value == \"keyof\" || value == \"typeof\" || value == \"infer\" || value == \"readonly\") {\n      cx.marked = \"keyword\"\n      return cont(value == \"typeof\" ? expressionNoComma : typeexpr)\n    }\n    if (type == \"variable\" || value == \"void\") {\n      cx.marked = \"type\"\n      return cont(afterType)\n    }\n    if (value == \"|\" || value == \"&\") return cont(typeexpr)\n    if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType)\n    if (type == \"{\") return cont(pushlex(\"}\"), typeprops, poplex, afterType)\n    if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType)\n    if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr)\n    if (type == \"quasi\") return pass(quasiType, afterType)\n  }\n  function maybeReturnType(type) {\n    if (type == \"=>\") return cont(typeexpr)\n  }\n  function typeprops(type) {\n    if (type.match(/[\\}\\)\\]]/)) return cont()\n    if (type == \",\" || type == \";\") return cont(typeprops)\n    return pass(typeprop, typeprops)\n  }\n  function typeprop(type, value) {\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\"\n      return cont(typeprop)\n    } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n      return cont(typeprop)\n    } else if (type == \":\") {\n      return cont(typeexpr)\n    } else if (type == \"[\") {\n      return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop)\n    } else if (type == \"(\") {\n      return pass(functiondecl, typeprop)\n    } else if (!type.match(/[;\\}\\)\\],]/)) {\n      return cont()\n    }\n  }\n  function quasiType(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasiType);\n    return cont(typeexpr, continueQuasiType);\n  }\n  function continueQuasiType(type) {\n   if (type == \"}\") {\n      cx.marked = \"string.special\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasiType);\n    }\n  }\n  function typearg(type, value) {\n    if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg)\n    if (type == \":\") return cont(typeexpr)\n    if (type == \"spread\") return cont(typearg)\n    return pass(typeexpr)\n  }\n  function afterType(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n    if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr)\n    if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType)\n    if (value == \"extends\" || value == \"implements\") { cx.marked = \"keyword\"; return cont(typeexpr) }\n    if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr)\n  }\n  function maybeTypeArgs(_, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n  }\n  function typeparam() {\n    return pass(typeexpr, maybeTypeDefault)\n  }\n  function maybeTypeDefault(_, value) {\n    if (value == \"=\") return cont(typeexpr)\n  }\n  function vardef(_, value) {\n    if (value == \"enum\") {cx.marked = \"keyword\"; return cont(enumdef)}\n    return pass(pattern, maybetype, maybeAssign, vardefCont);\n  }\n  function pattern(type, value) {\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(pattern) }\n    if (type == \"variable\") { register(value); return cont(); }\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"[\") return contCommasep(eltpattern, \"]\");\n    if (type == \"{\") return contCommasep(proppattern, \"}\");\n  }\n  function proppattern(type, value) {\n    if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n      register(value);\n      return cont(maybeAssign);\n    }\n    if (type == \"variable\") cx.marked = \"property\";\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"}\") return pass();\n    if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n    return cont(expect(\":\"), pattern, maybeAssign);\n  }\n  function eltpattern() {\n    return pass(pattern, maybeAssign)\n  }\n  function maybeAssign(_type, value) {\n    if (value == \"=\") return cont(expressionNoComma);\n  }\n  function vardefCont(type) {\n    if (type == \",\") return cont(vardef);\n  }\n  function maybeelse(type, value) {\n    if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n  }\n  function forspec(type, value) {\n    if (value == \"await\") return cont(forspec);\n    if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n  }\n  function forspec1(type) {\n    if (type == \"var\") return cont(vardef, forspec2);\n    if (type == \"variable\") return cont(forspec2);\n    return pass(forspec2)\n  }\n  function forspec2(type, value) {\n    if (type == \")\") return cont()\n    if (type == \";\") return cont(forspec2)\n    if (value == \"in\" || value == \"of\") { cx.marked = \"keyword\"; return cont(expression, forspec2) }\n    return pass(expression, forspec2)\n  }\n  function functiondef(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondef);}\n    if (type == \"variable\") {register(value); return cont(functiondef);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef)\n  }\n  function functiondecl(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondecl);}\n    if (type == \"variable\") {register(value); return cont(functiondecl);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl)\n  }\n  function typename(type, value) {\n    if (type == \"keyword\" || type == \"variable\") {\n      cx.marked = \"type\"\n      return cont(typename)\n    } else if (value == \"<\") {\n      return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex)\n    }\n  }\n  function funarg(type, value) {\n    if (value == \"@\") cont(expression, funarg)\n    if (type == \"spread\") return cont(funarg);\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(funarg); }\n    if (isTS && type == \"this\") return cont(maybetype, maybeAssign)\n    return pass(pattern, maybetype, maybeAssign);\n  }\n  function classExpression(type, value) {\n    // Class expressions may have an optional name.\n    if (type == \"variable\") return className(type, value);\n    return classNameAfter(type, value);\n  }\n  function className(type, value) {\n    if (type == \"variable\") {register(value); return cont(classNameAfter);}\n  }\n  function classNameAfter(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter)\n    if (value == \"extends\" || value == \"implements\" || (isTS && type == \",\")) {\n      if (value == \"implements\") cx.marked = \"keyword\";\n      return cont(isTS ? typeexpr : expression, classNameAfter);\n    }\n    if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n  }\n  function classBody(type, value) {\n    if (type == \"async\" ||\n        (type == \"variable\" &&\n         (value == \"static\" || value == \"get\" || value == \"set\" || (isTS && isModifier(value))) &&\n         cx.stream.match(/^\\s+#?[\\w$\\xa1-\\uffff]/, false))) {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      return cont(classfield, classBody);\n    }\n    if (type == \"number\" || type == \"string\") return cont(classfield, classBody);\n    if (type == \"[\")\n      return cont(expression, maybetype, expect(\"]\"), classfield, classBody)\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (isTS && type == \"(\") return pass(functiondecl, classBody)\n    if (type == \";\" || type == \",\") return cont(classBody);\n    if (type == \"}\") return cont();\n    if (value == \"@\") return cont(expression, classBody)\n  }\n  function classfield(type, value) {\n    if (value == \"!\" || value == \"?\") return cont(classfield)\n    if (type == \":\") return cont(typeexpr, maybeAssign)\n    if (value == \"=\") return cont(expressionNoComma)\n    var context = cx.state.lexical.prev, isInterface = context && context.info == \"interface\"\n    return pass(isInterface ? functiondecl : functiondef)\n  }\n  function afterExport(type, value) {\n    if (value == \"*\") { cx.marked = \"keyword\"; return cont(maybeFrom, expect(\";\")); }\n    if (value == \"default\") { cx.marked = \"keyword\"; return cont(expression, expect(\";\")); }\n    if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n    return pass(statement);\n  }\n  function exportField(type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(expect(\"variable\")); }\n    if (type == \"variable\") return pass(expressionNoComma, exportField);\n  }\n  function afterImport(type) {\n    if (type == \"string\") return cont();\n    if (type == \"(\") return pass(expression);\n    if (type == \".\") return pass(maybeoperatorComma);\n    return pass(importSpec, maybeMoreImports, maybeFrom);\n  }\n  function importSpec(type, value) {\n    if (type == \"{\") return contCommasep(importSpec, \"}\");\n    if (type == \"variable\") register(value);\n    if (value == \"*\") cx.marked = \"keyword\";\n    return cont(maybeAs);\n  }\n  function maybeMoreImports(type) {\n    if (type == \",\") return cont(importSpec, maybeMoreImports)\n  }\n  function maybeAs(_type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(importSpec); }\n  }\n  function maybeFrom(_type, value) {\n    if (value == \"from\") { cx.marked = \"keyword\"; return cont(expression); }\n  }\n  function arrayLiteral(type) {\n    if (type == \"]\") return cont();\n    return pass(commasep(expressionNoComma, \"]\"));\n  }\n  function enumdef() {\n    return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex)\n  }\n  function enummember() {\n    return pass(pattern, maybeAssign);\n  }\n\n  function isContinuedStatement(state, textAfter) {\n    return state.lastType == \"operator\" || state.lastType == \",\" ||\n      isOperatorChar.test(textAfter.charAt(0)) ||\n      /[,.]/.test(textAfter.charAt(0));\n  }\n\n  function expressionAllowed(stream, state, backUp) {\n    return state.tokenize == tokenBase &&\n      /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) ||\n      (state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))\n  }\n\n  // Interface\n\n  return {\n    name: parserConfig.name,\n\n    startState: function(indentUnit) {\n      var state = {\n        tokenize: tokenBase,\n        lastType: \"sof\",\n        cc: [],\n        lexical: new JSLexical(-indentUnit, 0, \"block\", false),\n        localVars: parserConfig.localVars,\n        context: parserConfig.localVars && new Context(null, null, false),\n        indented: 0\n      };\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\")\n        state.globalVars = parserConfig.globalVars;\n      return state;\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (!state.lexical.hasOwnProperty(\"align\"))\n          state.lexical.align = false;\n        state.indented = stream.indentation();\n        findFatArrow(stream, state);\n      }\n      if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (type == \"comment\") return style;\n      state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n      return parseJS(state, style, type, content, stream);\n    },\n\n    indent: function(state, textAfter, cx) {\n      if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return null;\n      if (state.tokenize != tokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top\n      // Kludge to prevent 'maybelse' from blocking lexical scope pops\n      if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n        var c = state.cc[i];\n        if (c == poplex) lexical = lexical.prev;\n        else if (c != maybeelse && c != popcontext) break;\n      }\n      while ((lexical.type == \"stat\" || lexical.type == \"form\") &&\n             (firstChar == \"}\" || ((top = state.cc[state.cc.length - 1]) &&\n                                   (top == maybeoperatorComma || top == maybeoperatorNoComma) &&\n                                   !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))))\n        lexical = lexical.prev;\n      if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\")\n        lexical = lexical.prev;\n      var type = lexical.type, closing = firstChar == type;\n\n      if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);\n      else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\n      else if (type == \"form\") return lexical.indented + cx.unit;\n      else if (type == \"stat\")\n        return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || cx.unit : 0);\n      else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false)\n        return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? cx.unit : 2 * cx.unit);\n      else if (lexical.align) return lexical.column + (closing ? 0 : 1);\n      else return lexical.indented + (closing ? 0 : cx.unit);\n    },\n\n    languageData: {\n      indentOnInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n      commentTokens: jsonMode ? undefined : {line: \"//\", block: {open: \"/*\", close: \"*/\"}},\n      closeBrackets: {brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"`\"]},\n      wordChars: \"$\"\n    }\n  };\n};\n\nexport const javascript = mkJavaScript({name: \"javascript\"})\nexport const json = mkJavaScript({name: \"json\", json: true})\nexport const jsonld = mkJavaScript({name: \"json\", jsonld: true})\nexport const typescript = mkJavaScript({name: \"typescript\", typescript: true})\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRegister","parcelRequire","$parcel$global","globalThis","register","module","exports","$26a9bb98cfa29abc$var$mkJavaScript","parserConfig","type","content","statementIndent","jsonldMode","jsonld","jsonMode","json","isTS","typescript","wordRE","wordCharacters","keywords","kw","style","A","B","C","D","operator","atom","isOperatorChar","isJsonldKeyword","ret","tp","cont","tokenBase","stream","state","quote","ch","next","tokenize","escaped","peek","match","test","eat","tokenComment","skipToEnd","lastType","string","slice","pos","readRegexp","inSet","current","tokenQuasi","eatWhile","start","lexical","word","propertyIsEnumerable","maybeEnd","findFatArrow","fatArrowAt","arrow","indexOf","m","exec","index","depth","sawSomething","charAt","bracket","brackets","atomicTypes","JSLexical","indented","column","align","prev","info","cx","marked","cc","pass","i","arguments","length","push","apply","inList","name","list","varname","context","block","newContext","registerVarScoped","inner","Context","vars","Var","localVars","globalVars","isModifier","defaultVars","pushcontext","pushblockcontext","popcontext","pushlex","result","indent","outer","lex","poplex","expect","wanted","exp","statement","value","vardef","parenExpr","maybeexpression","pop","maybeelse","functiondef","forspec","className","enumdef","typename","typeexpr","pattern","expression","maybelabel","maybeCatchBinding","afterExport","afterImport","funarg","expressionInner","expressionNoComma","noComma","body","arrowBodyNoComma","arrowBody","commasep","maybeop","maybeoperatorNoComma","maybeoperatorComma","hasOwnProperty","classExpression","arrayLiteral","contCommasep","objprop","quasi","targetNoComma","target","maybeTypeArgs","me","expr","property","backUp","continueQuasi","_","getterSetter","afterprop","maybetype","what","end","sep","proceed","maybetypeOrIn","mayberettype","isKW","afterType","typeprops","typearg","maybeReturnType","quasiType","typeprop","functiondecl","continueQuasiType","typeparam","maybeTypeDefault","maybeAssign","vardefCont","eltpattern","proppattern","_type","forspec1","forspec2","classNameAfter","classBody","classfield","isInterface","maybeFrom","exportField","importSpec","maybeMoreImports","maybeAs","enummember","startState","indentUnit","token","sol","indentation","eatSpace","combinator","inScope","textAfter","top","firstChar","c","closing","unit","isContinuedStatement","doubleIndentSwitch","languageData","indentOnInput","commentTokens","undefined","line","open","close","closeBrackets","wordChars","$26a9bb98cfa29abc$export$755219397dca4f08","$26a9bb98cfa29abc$export$f8fce98513fdd41a"],"version":3,"file":"javascript.a22b71c8.js.map"}