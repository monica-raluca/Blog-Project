{"mappings":"A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,O,C,I,I,E,I,K,E,W,C,E,a,C,C,GCAA,IAAI,EAAU,CACZ,OAAQ,SAAU,WAAY,KAAM,KAAM,MAAO,aACjD,cAAe,aAAc,cAAe,gBAAiB,YAC7D,YAAa,aAAc,oBAAqB,cAAe,WAChE,CACG,EAAiB,CACnB,OAAQ,UAAW,WAAY,WAAY,cAC5C,CAEG,EAAa,SACb,EAAY,SACZ,EAAgB,AAAI,OAAO,KAAO,EAAQ,IAAI,CAAC,KAAO,OACtD,EAAuB,AAAI,OAAO,KAAO,EAAe,IAAI,CAAC,KAAO,OACpE,EAAS,UACT,EAAQ,eACR,EAAa,uBACb,EAAiB,SACjB,EAAsB,eAwEnB,IAAM,EAAO,CAClB,KAAM,OACN,WAAY,WACV,MAAO,CAEL,YAAa,CAAA,EAEb,SAAU,CAAA,EAEV,eAAgB,CAAA,EAEhB,OAAQ,KAER,UAAW,CAAA,CACb,CACF,EACA,MAjFF,SAAmB,CAAM,CAAE,CAAK,EAC9B,GAAI,EAAO,GAAG,GAAI,CAGhB,GADA,EAAM,WAAW,CAAG,CAAA,EAChB,EAAM,QAAQ,EAAI,EAAO,KAAK,CAAC,GAEjC,OAAO,KAMT,GAJE,EAAM,QAAQ,CAAG,CAAA,EACjB,EAAM,MAAM,CAAG,KAGb,EAAO,KAAK,CAAC,GAGf,OAFA,EAAM,SAAS,CAAG,CAAA,EAClB,EAAM,WAAW,CAAG,CAAA,EACb,OAIT,IADI,EACA,EAAiB,CAAA,QACrB,AAAK,AAAA,CAAA,EAAQ,EAAO,KAAK,CAAC,EAAA,GACtB,CAAA,EAAkB,CAAA,EAAU,EAAQ,EAAO,KAAK,CAAC,EAAA,GACnD,EAAM,SAAS,CAAG,CAAA,EAClB,EAAM,QAAQ,CAAG,CAAA,EACjB,EAAM,cAAc,CAAG,EACvB,EAAM,MAAM,CAAG,CAAK,CAAC,EAAE,CAChB,QAKL,EAAM,SAAS,EAAK,CAAA,EAAQ,EAAO,KAAK,CAAC,EAAA,GAC3C,EAAM,QAAQ,CAAG,CAAA,EACjB,EAAM,cAAc,CAAG,CAAA,EACvB,EAAM,MAAM,CAAG,CAAK,CAAC,EAAE,CAChB,SAGT,EAAM,SAAS,CAAG,CAAA,EAClB,EAAO,SAAS,GACT,KACT,CAEA,GAAI,EAAM,WAAW,QACnB,AAAI,EAAO,KAAK,CAAC,GAAe,QAC5B,EAAO,KAAK,CAAC,IACjB,EAAO,SAAS,GADqB,QAKvC,GAAI,EAAM,QAAQ,CAAE,CAClB,IAAI,EAvDN,AAAI,AAAW,YAuDc,EAAM,MAAM,CAvDR,SAC1B,SAwDL,GAAI,EAAM,cAAc,CAAE,CACxB,GAAI,EAAO,KAAK,CAAC,GAAiB,OAAO,EAAQ,QACjD,GAAI,EAAO,KAAK,CAAC,GAAsB,OAAO,CAChD,CAEA,OADA,EAAO,SAAS,GACT,CACT,CAGA,OADA,EAAO,SAAS,GACT,IACT,EAmBE,UAAW,SAAS,CAAK,EACvB,EAAM,SAAS,CAAG,EAAM,WAAW,CAAG,EAAM,QAAQ,CAAG,CAAA,CACzD,EACA,aAAc,CACZ,aAAc,EAAQ,MAAM,CAAC,EAC/B,CACF,C","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/mbox.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"hlEok\", function(module, exports) {\n\n$parcel$export(module.exports, \"mbox\", () => $ca13babda0758252$export$ea8f8755af44bbba);\nvar $ca13babda0758252$var$rfc2822 = [\n    \"From\",\n    \"Sender\",\n    \"Reply-To\",\n    \"To\",\n    \"Cc\",\n    \"Bcc\",\n    \"Message-ID\",\n    \"In-Reply-To\",\n    \"References\",\n    \"Resent-From\",\n    \"Resent-Sender\",\n    \"Resent-To\",\n    \"Resent-Cc\",\n    \"Resent-Bcc\",\n    \"Resent-Message-ID\",\n    \"Return-Path\",\n    \"Received\"\n];\nvar $ca13babda0758252$var$rfc2822NoEmail = [\n    \"Date\",\n    \"Subject\",\n    \"Comments\",\n    \"Keywords\",\n    \"Resent-Date\"\n];\nvar $ca13babda0758252$var$whitespace = /^[ \\t]/;\nvar $ca13babda0758252$var$separator = /^From /; // See RFC 4155\nvar $ca13babda0758252$var$rfc2822Header = new RegExp(\"^(\" + $ca13babda0758252$var$rfc2822.join(\"|\") + \"): \");\nvar $ca13babda0758252$var$rfc2822HeaderNoEmail = new RegExp(\"^(\" + $ca13babda0758252$var$rfc2822NoEmail.join(\"|\") + \"): \");\nvar $ca13babda0758252$var$header = /^[^:]+:/; // Optional fields defined in RFC 2822\nvar $ca13babda0758252$var$email = /^[^ ]+@[^ ]+/;\nvar $ca13babda0758252$var$untilEmail = /^.*?(?=[^ ]+?@[^ ]+)/;\nvar $ca13babda0758252$var$bracketedEmail = /^<.*?>/;\nvar $ca13babda0758252$var$untilBracketedEmail = /^.*?(?=<.*>)/;\nfunction $ca13babda0758252$var$styleForHeader(header) {\n    if (header === \"Subject\") return \"header\";\n    return \"string\";\n}\nfunction $ca13babda0758252$var$readToken(stream, state) {\n    if (stream.sol()) {\n        // From last line\n        state.inSeparator = false;\n        if (state.inHeader && stream.match($ca13babda0758252$var$whitespace)) // Header folding\n        return null;\n        else {\n            state.inHeader = false;\n            state.header = null;\n        }\n        if (stream.match($ca13babda0758252$var$separator)) {\n            state.inHeaders = true;\n            state.inSeparator = true;\n            return \"atom\";\n        }\n        var match;\n        var emailPermitted = false;\n        if ((match = stream.match($ca13babda0758252$var$rfc2822HeaderNoEmail)) || (emailPermitted = true, match = stream.match($ca13babda0758252$var$rfc2822Header))) {\n            state.inHeaders = true;\n            state.inHeader = true;\n            state.emailPermitted = emailPermitted;\n            state.header = match[1];\n            return \"atom\";\n        }\n        // Use vim's heuristics: recognize custom headers only if the line is in a\n        // block of legitimate headers.\n        if (state.inHeaders && (match = stream.match($ca13babda0758252$var$header))) {\n            state.inHeader = true;\n            state.emailPermitted = true;\n            state.header = match[1];\n            return \"atom\";\n        }\n        state.inHeaders = false;\n        stream.skipToEnd();\n        return null;\n    }\n    if (state.inSeparator) {\n        if (stream.match($ca13babda0758252$var$email)) return \"link\";\n        if (stream.match($ca13babda0758252$var$untilEmail)) return \"atom\";\n        stream.skipToEnd();\n        return \"atom\";\n    }\n    if (state.inHeader) {\n        var style = $ca13babda0758252$var$styleForHeader(state.header);\n        if (state.emailPermitted) {\n            if (stream.match($ca13babda0758252$var$bracketedEmail)) return style + \" link\";\n            if (stream.match($ca13babda0758252$var$untilBracketedEmail)) return style;\n        }\n        stream.skipToEnd();\n        return style;\n    }\n    stream.skipToEnd();\n    return null;\n}\nconst $ca13babda0758252$export$ea8f8755af44bbba = {\n    name: \"mbox\",\n    startState: function() {\n        return {\n            // Is in a mbox separator\n            inSeparator: false,\n            // Is in a mail header\n            inHeader: false,\n            // If bracketed email is permitted. Only applicable when inHeader\n            emailPermitted: false,\n            // Name of current header\n            header: null,\n            // Is in a region of mail headers\n            inHeaders: false\n        };\n    },\n    token: $ca13babda0758252$var$readToken,\n    blankLine: function(state) {\n        state.inHeaders = state.inSeparator = state.inHeader = false;\n    },\n    languageData: {\n        autocomplete: $ca13babda0758252$var$rfc2822.concat($ca13babda0758252$var$rfc2822NoEmail)\n    }\n};\n\n});\n\n\n//# sourceMappingURL=mbox.c16a797a.js.map\n","var rfc2822 = [\n  \"From\", \"Sender\", \"Reply-To\", \"To\", \"Cc\", \"Bcc\", \"Message-ID\",\n  \"In-Reply-To\", \"References\", \"Resent-From\", \"Resent-Sender\", \"Resent-To\",\n  \"Resent-Cc\", \"Resent-Bcc\", \"Resent-Message-ID\", \"Return-Path\", \"Received\"\n];\nvar rfc2822NoEmail = [\n  \"Date\", \"Subject\", \"Comments\", \"Keywords\", \"Resent-Date\"\n];\n\nvar whitespace = /^[ \\t]/;\nvar separator = /^From /; // See RFC 4155\nvar rfc2822Header = new RegExp(\"^(\" + rfc2822.join(\"|\") + \"): \");\nvar rfc2822HeaderNoEmail = new RegExp(\"^(\" + rfc2822NoEmail.join(\"|\") + \"): \");\nvar header = /^[^:]+:/; // Optional fields defined in RFC 2822\nvar email = /^[^ ]+@[^ ]+/;\nvar untilEmail = /^.*?(?=[^ ]+?@[^ ]+)/;\nvar bracketedEmail = /^<.*?>/;\nvar untilBracketedEmail = /^.*?(?=<.*>)/;\n\nfunction styleForHeader(header) {\n  if (header === \"Subject\") return \"header\";\n  return \"string\";\n}\n\nfunction readToken(stream, state) {\n  if (stream.sol()) {\n    // From last line\n    state.inSeparator = false;\n    if (state.inHeader && stream.match(whitespace)) {\n      // Header folding\n      return null;\n    } else {\n      state.inHeader = false;\n      state.header = null;\n    }\n\n    if (stream.match(separator)) {\n      state.inHeaders = true;\n      state.inSeparator = true;\n      return \"atom\";\n    }\n\n    var match;\n    var emailPermitted = false;\n    if ((match = stream.match(rfc2822HeaderNoEmail)) ||\n        (emailPermitted = true) && (match = stream.match(rfc2822Header))) {\n      state.inHeaders = true;\n      state.inHeader = true;\n      state.emailPermitted = emailPermitted;\n      state.header = match[1];\n      return \"atom\";\n    }\n\n    // Use vim's heuristics: recognize custom headers only if the line is in a\n    // block of legitimate headers.\n    if (state.inHeaders && (match = stream.match(header))) {\n      state.inHeader = true;\n      state.emailPermitted = true;\n      state.header = match[1];\n      return \"atom\";\n    }\n\n    state.inHeaders = false;\n    stream.skipToEnd();\n    return null;\n  }\n\n  if (state.inSeparator) {\n    if (stream.match(email)) return \"link\";\n    if (stream.match(untilEmail)) return \"atom\";\n    stream.skipToEnd();\n    return \"atom\";\n  }\n\n  if (state.inHeader) {\n    var style = styleForHeader(state.header);\n\n    if (state.emailPermitted) {\n      if (stream.match(bracketedEmail)) return style + \" link\";\n      if (stream.match(untilBracketedEmail)) return style;\n    }\n    stream.skipToEnd();\n    return style;\n  }\n\n  stream.skipToEnd();\n  return null;\n};\n\nexport const mbox = {\n  name: \"mbox\",\n  startState: function() {\n    return {\n      // Is in a mbox separator\n      inSeparator: false,\n      // Is in a mail header\n      inHeader: false,\n      // If bracketed email is permitted. Only applicable when inHeader\n      emailPermitted: false,\n      // Name of current header\n      header: null,\n      // Is in a region of mail headers\n      inHeaders: false\n    };\n  },\n  token: readToken,\n  blankLine: function(state) {\n    state.inHeaders = state.inSeparator = state.inHeader = false;\n  },\n  languageData: {\n    autocomplete: rfc2822.concat(rfc2822NoEmail)\n  }\n}\n\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","Object","defineProperty","get","$ca13babda0758252$export$ea8f8755af44bbba","set","s","enumerable","configurable","$ca13babda0758252$var$rfc2822","$ca13babda0758252$var$rfc2822NoEmail","$ca13babda0758252$var$whitespace","$ca13babda0758252$var$separator","$ca13babda0758252$var$rfc2822Header","RegExp","join","$ca13babda0758252$var$rfc2822HeaderNoEmail","$ca13babda0758252$var$header","$ca13babda0758252$var$email","$ca13babda0758252$var$untilEmail","$ca13babda0758252$var$bracketedEmail","$ca13babda0758252$var$untilBracketedEmail","name","startState","inSeparator","inHeader","emailPermitted","header","inHeaders","token","stream","state","sol","match","skipToEnd","style","blankLine","languageData","autocomplete","concat"],"version":3,"file":"mbox.c16a797a.js.map"}