{"mappings":"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","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/d.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"hm3G1\", function(module, exports) {\n\n$parcel$export(module.exports, \"d\", () => $ca2757da0280eebf$export$4368d992c4eafac0);\nfunction $ca2757da0280eebf$var$words(str) {\n    var obj = {}, words = str.split(\" \");\n    for(var i = 0; i < words.length; ++i)obj[words[i]] = true;\n    return obj;\n}\nvar $ca2757da0280eebf$var$blockKeywordsStr = \"body catch class do else enum for foreach foreach_reverse if in interface mixin out scope struct switch try union unittest version while with\";\nconst $ca2757da0280eebf$var$parserConfig = {\n    keywords: $ca2757da0280eebf$var$words(\"abstract alias align asm assert auto break case cast cdouble cent cfloat const continue debug default delegate delete deprecated export extern final finally function goto immutable import inout invariant is lazy macro module new nothrow override package pragma private protected public pure ref return shared short static super synchronized template this throw typedef typeid typeof volatile __FILE__ __LINE__ __gshared __traits __vector __parameters \" + $ca2757da0280eebf$var$blockKeywordsStr),\n    blockKeywords: $ca2757da0280eebf$var$words($ca2757da0280eebf$var$blockKeywordsStr),\n    builtin: $ca2757da0280eebf$var$words(\"bool byte char creal dchar double float idouble ifloat int ireal long real short ubyte ucent uint ulong ushort wchar wstring void size_t sizediff_t\"),\n    atoms: $ca2757da0280eebf$var$words(\"exit failure success true false null\"),\n    hooks: {\n        \"@\": function(stream, _state) {\n            stream.eatWhile(/[\\w\\$_]/);\n            return \"meta\";\n        }\n    }\n};\nvar $ca2757da0280eebf$var$statementIndentUnit = $ca2757da0280eebf$var$parserConfig.statementIndentUnit, $ca2757da0280eebf$var$keywords = $ca2757da0280eebf$var$parserConfig.keywords, $ca2757da0280eebf$var$builtin = $ca2757da0280eebf$var$parserConfig.builtin, $ca2757da0280eebf$var$blockKeywords = $ca2757da0280eebf$var$parserConfig.blockKeywords, $ca2757da0280eebf$var$atoms = $ca2757da0280eebf$var$parserConfig.atoms, $ca2757da0280eebf$var$hooks = $ca2757da0280eebf$var$parserConfig.hooks, $ca2757da0280eebf$var$multiLineStrings = $ca2757da0280eebf$var$parserConfig.multiLineStrings;\nvar $ca2757da0280eebf$var$isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\nvar $ca2757da0280eebf$var$curPunc;\nfunction $ca2757da0280eebf$var$tokenBase(stream, state) {\n    var ch = stream.next();\n    if ($ca2757da0280eebf$var$hooks[ch]) {\n        var result = $ca2757da0280eebf$var$hooks[ch](stream, state);\n        if (result !== false) return result;\n    }\n    if (ch == '\"' || ch == \"'\" || ch == \"`\") {\n        state.tokenize = $ca2757da0280eebf$var$tokenString(ch);\n        return state.tokenize(stream, state);\n    }\n    if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n        $ca2757da0280eebf$var$curPunc = ch;\n        return null;\n    }\n    if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n    }\n    if (ch == \"/\") {\n        if (stream.eat(\"+\")) {\n            state.tokenize = $ca2757da0280eebf$var$tokenNestedComment;\n            return $ca2757da0280eebf$var$tokenNestedComment(stream, state);\n        }\n        if (stream.eat(\"*\")) {\n            state.tokenize = $ca2757da0280eebf$var$tokenComment;\n            return $ca2757da0280eebf$var$tokenComment(stream, state);\n        }\n        if (stream.eat(\"/\")) {\n            stream.skipToEnd();\n            return \"comment\";\n        }\n    }\n    if ($ca2757da0280eebf$var$isOperatorChar.test(ch)) {\n        stream.eatWhile($ca2757da0280eebf$var$isOperatorChar);\n        return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n    var cur = stream.current();\n    if ($ca2757da0280eebf$var$keywords.propertyIsEnumerable(cur)) {\n        if ($ca2757da0280eebf$var$blockKeywords.propertyIsEnumerable(cur)) $ca2757da0280eebf$var$curPunc = \"newstatement\";\n        return \"keyword\";\n    }\n    if ($ca2757da0280eebf$var$builtin.propertyIsEnumerable(cur)) {\n        if ($ca2757da0280eebf$var$blockKeywords.propertyIsEnumerable(cur)) $ca2757da0280eebf$var$curPunc = \"newstatement\";\n        return \"builtin\";\n    }\n    if ($ca2757da0280eebf$var$atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n}\nfunction $ca2757da0280eebf$var$tokenString(quote) {\n    return function(stream, state) {\n        var escaped = false, next, end = false;\n        while((next = stream.next()) != null){\n            if (next == quote && !escaped) {\n                end = true;\n                break;\n            }\n            escaped = !escaped && next == \"\\\\\";\n        }\n        if (end || !(escaped || $ca2757da0280eebf$var$multiLineStrings)) state.tokenize = null;\n        return \"string\";\n    };\n}\nfunction $ca2757da0280eebf$var$tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while(ch = stream.next()){\n        if (ch == \"/\" && maybeEnd) {\n            state.tokenize = null;\n            break;\n        }\n        maybeEnd = ch == \"*\";\n    }\n    return \"comment\";\n}\nfunction $ca2757da0280eebf$var$tokenNestedComment(stream, state) {\n    var maybeEnd = false, ch;\n    while(ch = stream.next()){\n        if (ch == \"/\" && maybeEnd) {\n            state.tokenize = null;\n            break;\n        }\n        maybeEnd = ch == \"+\";\n    }\n    return \"comment\";\n}\nfunction $ca2757da0280eebf$var$Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n}\nfunction $ca2757da0280eebf$var$pushContext(state, col, type) {\n    var indent = state.indented;\n    if (state.context && state.context.type == \"statement\") indent = state.context.indented;\n    return state.context = new $ca2757da0280eebf$var$Context(indent, col, type, null, state.context);\n}\nfunction $ca2757da0280eebf$var$popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n    return state.context = state.context.prev;\n}\nconst $ca2757da0280eebf$export$4368d992c4eafac0 = {\n    name: \"d\",\n    startState: function(indentUnit) {\n        return {\n            tokenize: null,\n            context: new $ca2757da0280eebf$var$Context(-indentUnit, 0, \"top\", false),\n            indented: 0,\n            startOfLine: true\n        };\n    },\n    token: function(stream, state) {\n        var ctx = state.context;\n        if (stream.sol()) {\n            if (ctx.align == null) ctx.align = false;\n            state.indented = stream.indentation();\n            state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n        $ca2757da0280eebf$var$curPunc = null;\n        var style = (state.tokenize || $ca2757da0280eebf$var$tokenBase)(stream, state);\n        if (style == \"comment\" || style == \"meta\") return style;\n        if (ctx.align == null) ctx.align = true;\n        if (($ca2757da0280eebf$var$curPunc == \";\" || $ca2757da0280eebf$var$curPunc == \":\" || $ca2757da0280eebf$var$curPunc == \",\") && ctx.type == \"statement\") $ca2757da0280eebf$var$popContext(state);\n        else if ($ca2757da0280eebf$var$curPunc == \"{\") $ca2757da0280eebf$var$pushContext(state, stream.column(), \"}\");\n        else if ($ca2757da0280eebf$var$curPunc == \"[\") $ca2757da0280eebf$var$pushContext(state, stream.column(), \"]\");\n        else if ($ca2757da0280eebf$var$curPunc == \"(\") $ca2757da0280eebf$var$pushContext(state, stream.column(), \")\");\n        else if ($ca2757da0280eebf$var$curPunc == \"}\") {\n            while(ctx.type == \"statement\")ctx = $ca2757da0280eebf$var$popContext(state);\n            if (ctx.type == \"}\") ctx = $ca2757da0280eebf$var$popContext(state);\n            while(ctx.type == \"statement\")ctx = $ca2757da0280eebf$var$popContext(state);\n        } else if ($ca2757da0280eebf$var$curPunc == ctx.type) $ca2757da0280eebf$var$popContext(state);\n        else if ((ctx.type == \"}\" || ctx.type == \"top\") && $ca2757da0280eebf$var$curPunc != ';' || ctx.type == \"statement\" && $ca2757da0280eebf$var$curPunc == \"newstatement\") $ca2757da0280eebf$var$pushContext(state, stream.column(), \"statement\");\n        state.startOfLine = false;\n        return style;\n    },\n    indent: function(state, textAfter, cx) {\n        if (state.tokenize != $ca2757da0280eebf$var$tokenBase && state.tokenize != null) return null;\n        var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n        if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n        var closing = firstChar == ctx.type;\n        if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : $ca2757da0280eebf$var$statementIndentUnit || cx.unit);\n        else if (ctx.align) return ctx.column + (closing ? 0 : 1);\n        else return ctx.indented + (closing ? 0 : cx.unit);\n    },\n    languageData: {\n        indentOnInput: /^\\s*[{}]$/,\n        commentTokens: {\n            line: \"//\",\n            block: {\n                open: \"/*\",\n                close: \"*/\"\n            }\n        }\n    }\n};\n\n});\n\n\n//# sourceMappingURL=d.bdcc2af4.js.map\n","function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nvar blockKeywordsStr = \"body catch class do else enum for foreach foreach_reverse if in interface mixin \" +\n    \"out scope struct switch try union unittest version while with\";\n\nconst parserConfig = {\n  keywords: words(\"abstract alias align asm assert auto break case cast cdouble cent cfloat const continue \" +\n                  \"debug default delegate delete deprecated export extern final finally function goto immutable \" +\n                  \"import inout invariant is lazy macro module new nothrow override package pragma private \" +\n                  \"protected public pure ref return shared short static super synchronized template this \" +\n                  \"throw typedef typeid typeof volatile __FILE__ __LINE__ __gshared __traits __vector __parameters \" +\n                  blockKeywordsStr),\n  blockKeywords: words(blockKeywordsStr),\n  builtin: words(\"bool byte char creal dchar double float idouble ifloat int ireal long real short ubyte \" +\n                 \"ucent uint ulong ushort wchar wstring void size_t sizediff_t\"),\n  atoms: words(\"exit failure success true false null\"),\n  hooks: {\n    \"@\": function(stream, _state) {\n      stream.eatWhile(/[\\w\\$_]/);\n      return \"meta\";\n    }\n  }\n}\n\nvar statementIndentUnit = parserConfig.statementIndentUnit,\n    keywords = parserConfig.keywords,\n    builtin = parserConfig.builtin,\n    blockKeywords = parserConfig.blockKeywords,\n    atoms = parserConfig.atoms,\n    hooks = parserConfig.hooks,\n    multiLineStrings = parserConfig.multiLineStrings;\nvar isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n\nvar curPunc;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (hooks[ch]) {\n    var result = hooks[ch](stream, state);\n    if (result !== false) return result;\n  }\n  if (ch == '\"' || ch == \"'\" || ch == \"`\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  if (ch == \"/\") {\n    if (stream.eat(\"+\")) {\n      state.tokenize = tokenNestedComment;\n      return tokenNestedComment(stream, state);\n    }\n    if (stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n  var cur = stream.current();\n  if (keywords.propertyIsEnumerable(cur)) {\n    if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n    return \"keyword\";\n  }\n  if (builtin.propertyIsEnumerable(cur)) {\n    if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n    return \"builtin\";\n  }\n  if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n  return \"variable\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {end = true; break;}\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !(escaped || multiLineStrings))\n      state.tokenize = null;\n    return \"string\";\n  };\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = null;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction tokenNestedComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = null;\n      break;\n    }\n    maybeEnd = (ch == \"+\");\n  }\n  return \"comment\";\n}\n\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\nfunction pushContext(state, col, type) {\n  var indent = state.indented;\n  if (state.context && state.context.type == \"statement\")\n    indent = state.context.indented;\n  return state.context = new Context(indent, col, type, null, state.context);\n}\nfunction popContext(state) {\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\")\n    state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\n// Interface\n\nexport const d = {\n  name: \"d\",\n  startState: function(indentUnit) {\n    return {\n      tokenize: null,\n      context: new Context(-indentUnit, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true\n    };\n  },\n\n  token: function(stream, state) {\n    var ctx = state.context;\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n    }\n    if (stream.eatSpace()) return null;\n    curPunc = null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\" || style == \"meta\") return style;\n    if (ctx.align == null) ctx.align = true;\n\n    if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") popContext(state);\n    else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n    else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n    else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n    else if (curPunc == \"}\") {\n      while (ctx.type == \"statement\") ctx = popContext(state);\n      if (ctx.type == \"}\") ctx = popContext(state);\n      while (ctx.type == \"statement\") ctx = popContext(state);\n    }\n    else if (curPunc == ctx.type) popContext(state);\n    else if (((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';') || (ctx.type == \"statement\" && curPunc == \"newstatement\"))\n      pushContext(state, stream.column(), \"statement\");\n    state.startOfLine = false;\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    if (state.tokenize != tokenBase && state.tokenize != null) return null;\n    var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n    if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n    var closing = firstChar == ctx.type;\n    if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit || cx.unit);\n    else if (ctx.align) return ctx.column + (closing ? 0 : 1);\n    else return ctx.indented + (closing ? 0 : cx.unit);\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}}\n  }\n};\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","$ca2757da0280eebf$var$words","str","obj","words","split","i","length","e","Object","defineProperty","get","$ca2757da0280eebf$export$4368d992c4eafac0","set","s","enumerable","configurable","$ca2757da0280eebf$var$curPunc","$ca2757da0280eebf$var$blockKeywordsStr","$ca2757da0280eebf$var$parserConfig","keywords","blockKeywords","builtin","atoms","hooks","stream","_state","eatWhile","$ca2757da0280eebf$var$statementIndentUnit","statementIndentUnit","$ca2757da0280eebf$var$keywords","$ca2757da0280eebf$var$builtin","$ca2757da0280eebf$var$blockKeywords","$ca2757da0280eebf$var$atoms","$ca2757da0280eebf$var$hooks","$ca2757da0280eebf$var$multiLineStrings","multiLineStrings","$ca2757da0280eebf$var$isOperatorChar","$ca2757da0280eebf$var$tokenBase","state","quote","ch","next","result","tokenize","escaped","end","test","eat","$ca2757da0280eebf$var$tokenNestedComment","$ca2757da0280eebf$var$tokenComment","skipToEnd","cur","current","propertyIsEnumerable","maybeEnd","$ca2757da0280eebf$var$Context","indented","column","type","align","prev","$ca2757da0280eebf$var$pushContext","col","indent","context","$ca2757da0280eebf$var$popContext","t","name","startState","indentUnit","startOfLine","token","ctx","sol","indentation","eatSpace","style","textAfter","cx","firstChar","charAt","closing","unit","languageData","indentOnInput","commentTokens","line","block","open","close"],"version":3,"file":"d.bdcc2af4.js.map"}