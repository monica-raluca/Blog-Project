{"mappings":"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","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/ebnf.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"k2VfX\", function(module, exports) {\n\n$parcel$export(module.exports, \"ebnf\", () => $e98068803c7f17c0$export$7102e98014088217);\nvar $e98068803c7f17c0$var$commentType = {\n    slash: 0,\n    parenthesis: 1\n};\nvar $e98068803c7f17c0$var$stateType = {\n    comment: 0,\n    _string: 1,\n    characterClass: 2\n};\nconst $e98068803c7f17c0$export$7102e98014088217 = {\n    name: \"ebnf\",\n    startState: function() {\n        return {\n            stringType: null,\n            commentType: null,\n            braced: 0,\n            lhs: true,\n            localState: null,\n            stack: [],\n            inDefinition: false\n        };\n    },\n    token: function(stream, state) {\n        if (!stream) return;\n        //check for state changes\n        if (state.stack.length === 0) {\n            //strings\n            if (stream.peek() == '\"' || stream.peek() == \"'\") {\n                state.stringType = stream.peek();\n                stream.next(); // Skip quote\n                state.stack.unshift($e98068803c7f17c0$var$stateType._string);\n            } else if (stream.match('/*')) {\n                state.stack.unshift($e98068803c7f17c0$var$stateType.comment);\n                state.commentType = $e98068803c7f17c0$var$commentType.slash;\n            } else if (stream.match('(*')) {\n                state.stack.unshift($e98068803c7f17c0$var$stateType.comment);\n                state.commentType = $e98068803c7f17c0$var$commentType.parenthesis;\n            }\n        }\n        //return state\n        //stack has\n        switch(state.stack[0]){\n            case $e98068803c7f17c0$var$stateType._string:\n                while(state.stack[0] === $e98068803c7f17c0$var$stateType._string && !stream.eol()){\n                    if (stream.peek() === state.stringType) {\n                        stream.next(); // Skip quote\n                        state.stack.shift(); // Clear flag\n                    } else if (stream.peek() === \"\\\\\") {\n                        stream.next();\n                        stream.next();\n                    } else stream.match(/^.[^\\\\\\\"\\']*/);\n                }\n                return state.lhs ? \"property\" : \"string\"; // Token style\n            case $e98068803c7f17c0$var$stateType.comment:\n                while(state.stack[0] === $e98068803c7f17c0$var$stateType.comment && !stream.eol()){\n                    if (state.commentType === $e98068803c7f17c0$var$commentType.slash && stream.match('*/')) {\n                        state.stack.shift(); // Clear flag\n                        state.commentType = null;\n                    } else if (state.commentType === $e98068803c7f17c0$var$commentType.parenthesis && stream.match('*)')) {\n                        state.stack.shift(); // Clear flag\n                        state.commentType = null;\n                    } else stream.match(/^.[^\\*]*/);\n                }\n                return \"comment\";\n            case $e98068803c7f17c0$var$stateType.characterClass:\n                while(state.stack[0] === $e98068803c7f17c0$var$stateType.characterClass && !stream.eol())if (!(stream.match(/^[^\\]\\\\]+/) || stream.match('.'))) state.stack.shift();\n                return \"operator\";\n        }\n        var peek = stream.peek();\n        //no stack\n        switch(peek){\n            case \"[\":\n                stream.next();\n                state.stack.unshift($e98068803c7f17c0$var$stateType.characterClass);\n                return \"bracket\";\n            case \":\":\n            case \"|\":\n            case \";\":\n                stream.next();\n                return \"operator\";\n            case \"%\":\n                if (stream.match(\"%%\")) return \"header\";\n                else if (stream.match(/[%][A-Za-z]+/)) return \"keyword\";\n                else if (stream.match(/[%][}]/)) return \"bracket\";\n                break;\n            case \"/\":\n                if (stream.match(/[\\/][A-Za-z]+/)) return \"keyword\";\n            case \"\\\\\":\n                if (stream.match(/[\\][a-z]+/)) return \"string.special\";\n            case \".\":\n                if (stream.match(\".\")) return \"atom\";\n            case \"*\":\n            case \"-\":\n            case \"+\":\n            case \"^\":\n                if (stream.match(peek)) return \"atom\";\n            case \"$\":\n                if (stream.match(\"$$\")) return \"builtin\";\n                else if (stream.match(/[$][0-9]+/)) return \"variableName.special\";\n            case \"<\":\n                if (stream.match(/<<[a-zA-Z_]+>>/)) return \"builtin\";\n        }\n        if (stream.match('//')) {\n            stream.skipToEnd();\n            return \"comment\";\n        } else if (stream.match('return')) return \"operator\";\n        else if (stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/)) {\n            if (stream.match(/(?=[\\(.])/)) return \"variable\";\n            else if (stream.match(/(?=[\\s\\n]*[:=])/)) return \"def\";\n            return \"variableName.special\";\n        } else if ([\n            \"[\",\n            \"]\",\n            \"(\",\n            \")\"\n        ].indexOf(stream.peek()) != -1) {\n            stream.next();\n            return \"bracket\";\n        } else if (!stream.eatSpace()) stream.next();\n        return null;\n    }\n};\n\n});\n\n\n//# sourceMappingURL=ebnf.d9511a0e.js.map\n","var commentType = {slash: 0, parenthesis: 1};\nvar stateType = {comment: 0, _string: 1, characterClass: 2};\n\nexport const ebnf = {\n  name: \"ebnf\",\n  startState: function () {\n    return {\n      stringType: null,\n      commentType: null,\n      braced: 0,\n      lhs: true,\n      localState: null,\n      stack: [],\n      inDefinition: false\n    };\n  },\n  token: function (stream, state) {\n    if (!stream) return;\n\n    //check for state changes\n    if (state.stack.length === 0) {\n      //strings\n      if ((stream.peek() == '\"') || (stream.peek() == \"'\")) {\n        state.stringType = stream.peek();\n        stream.next(); // Skip quote\n        state.stack.unshift(stateType._string);\n      } else if (stream.match('/*')) { //comments starting with /*\n        state.stack.unshift(stateType.comment);\n        state.commentType = commentType.slash;\n      } else if (stream.match('(*')) { //comments starting with (*\n        state.stack.unshift(stateType.comment);\n        state.commentType = commentType.parenthesis;\n      }\n    }\n\n    //return state\n    //stack has\n    switch (state.stack[0]) {\n    case stateType._string:\n      while (state.stack[0] === stateType._string && !stream.eol()) {\n        if (stream.peek() === state.stringType) {\n          stream.next(); // Skip quote\n          state.stack.shift(); // Clear flag\n        } else if (stream.peek() === \"\\\\\") {\n          stream.next();\n          stream.next();\n        } else {\n          stream.match(/^.[^\\\\\\\"\\']*/);\n        }\n      }\n      return state.lhs ? \"property\" : \"string\"; // Token style\n\n    case stateType.comment:\n      while (state.stack[0] === stateType.comment && !stream.eol()) {\n        if (state.commentType === commentType.slash && stream.match('*/')) {\n          state.stack.shift(); // Clear flag\n          state.commentType = null;\n        } else if (state.commentType === commentType.parenthesis && stream.match('*)')) {\n          state.stack.shift(); // Clear flag\n          state.commentType = null;\n        } else {\n          stream.match(/^.[^\\*]*/);\n        }\n      }\n      return \"comment\";\n\n    case stateType.characterClass:\n      while (state.stack[0] === stateType.characterClass && !stream.eol()) {\n        if (!(stream.match(/^[^\\]\\\\]+/) || stream.match('.'))) {\n          state.stack.shift();\n        }\n      }\n      return \"operator\";\n    }\n\n    var peek = stream.peek();\n\n    //no stack\n    switch (peek) {\n    case \"[\":\n      stream.next();\n      state.stack.unshift(stateType.characterClass);\n      return \"bracket\";\n    case \":\":\n    case \"|\":\n    case \";\":\n      stream.next();\n      return \"operator\";\n    case \"%\":\n      if (stream.match(\"%%\")) {\n        return \"header\";\n      } else if (stream.match(/[%][A-Za-z]+/)) {\n        return \"keyword\";\n      } else if (stream.match(/[%][}]/)) {\n        return \"bracket\";\n      }\n      break;\n    case \"/\":\n      if (stream.match(/[\\/][A-Za-z]+/)) {\n        return \"keyword\";\n      }\n    case \"\\\\\":\n      if (stream.match(/[\\][a-z]+/)) {\n        return \"string.special\";\n      }\n    case \".\":\n      if (stream.match(\".\")) {\n        return \"atom\";\n      }\n    case \"*\":\n    case \"-\":\n    case \"+\":\n    case \"^\":\n      if (stream.match(peek)) {\n        return \"atom\";\n      }\n    case \"$\":\n      if (stream.match(\"$$\")) {\n        return \"builtin\";\n      } else if (stream.match(/[$][0-9]+/)) {\n        return \"variableName.special\";\n      }\n    case \"<\":\n      if (stream.match(/<<[a-zA-Z_]+>>/)) {\n        return \"builtin\";\n      }\n    }\n\n    if (stream.match('//')) {\n      stream.skipToEnd();\n      return \"comment\";\n    } else if (stream.match('return')) {\n      return \"operator\";\n    } else if (stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/)) {\n      if (stream.match(/(?=[\\(.])/)) {\n        return \"variable\";\n      } else if (stream.match(/(?=[\\s\\n]*[:=])/)) {\n        return \"def\";\n      }\n      return \"variableName.special\";\n    } else if ([\"[\", \"]\", \"(\", \")\"].indexOf(stream.peek()) != -1) {\n      stream.next();\n      return \"bracket\";\n    } else if (!stream.eatSpace()) {\n      stream.next();\n    }\n    return null;\n  }\n};\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","Object","defineProperty","get","$e98068803c7f17c0$export$7102e98014088217","set","s","enumerable","configurable","name","startState","stringType","commentType","braced","lhs","localState","stack","inDefinition","token","stream","state","length","peek","next","unshift","match","eol","shift","skipToEnd","indexOf","eatSpace"],"version":3,"file":"ebnf.d9511a0e.js.map"}