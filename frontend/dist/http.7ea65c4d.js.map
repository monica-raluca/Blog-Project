{"mappings":"A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,ECAA,SAAS,EAAc,CAAM,CAAE,CAAK,EAGlC,OAFA,EAAO,SAAS,GAChB,EAAM,GAAG,CAAG,EACL,OACT,CAEA,SAAS,EAAM,CAAM,CAAE,CAAK,SAC1B,AAAI,EAAO,KAAK,CAAC,kBACf,EAAM,GAAG,CAAG,EACL,WACE,EAAO,KAAK,CAAC,YAAc,QAAQ,IAAI,CAAC,EAAO,IAAI,KAC5D,EAAM,GAAG,CAAG,EACL,WAEA,EAAc,EAAQ,EAEjC,CAEA,SAAS,EAAmB,CAAM,CAAE,CAAK,EACvC,IAAI,EAAO,EAAO,KAAK,CAAC,QACxB,GAAI,CAAC,EAAM,OAAO,EAAc,EAAQ,EAExC,CAAA,EAAM,GAAG,CAAG,EACZ,IAAI,EAAS,OAAO,CAAI,CAAC,EAAE,SAC3B,AAAI,GAAU,KAAO,EAAS,IACrB,OAEA,OAEX,CAEA,SAAS,EAAmB,CAAM,CAAE,CAAK,EAGvC,OAFA,EAAO,SAAS,GAChB,EAAM,GAAG,CAAG,EACL,IACT,CAEA,SAAS,EAAY,CAAM,CAAE,CAAK,EAGhC,OAFA,EAAO,QAAQ,CAAC,MAChB,EAAM,GAAG,CAAG,EACL,gBACT,CAEA,SAAS,EAAgB,CAAM,CAAE,CAAK,SACpC,AAAI,EAAO,KAAK,CAAC,mBACf,EAAM,GAAG,CAAG,EACL,WAEA,EAAc,EAAQ,EAEjC,CAEA,SAAS,EAAO,CAAM,QACpB,AAAI,CAAA,EAAO,GAAG,IAAO,EAAO,GAAG,CAAC,UAQ9B,EAAO,SAAS,GACT,UARH,EAAO,KAAK,CAAC,SACR,QAEP,EAAO,SAAS,GACT,QAMb,CAEA,SAAS,EAAK,CAAM,EAElB,OADA,EAAO,SAAS,GACT,IACT,C,O,c,C,E,O,C,O,C,I,I,E,I,K,E,W,C,E,a,C,C,GAEO,IAAM,EAAO,CAClB,KAAM,OACN,MAAO,SAAS,CAAM,CAAE,CAAK,EAC3B,IAAI,EAAM,EAAM,GAAG,QACnB,AAAI,GAAO,GAAU,GAAO,GAAQ,EAAO,QAAQ,GAAW,KACvD,EAAI,EAAQ,EACrB,EAEA,UAAW,SAAS,CAAK,EACvB,EAAM,GAAG,CAAG,CACd,EAEA,WAAY,WACV,MAAO,CAAC,IAAK,CAAK,CACpB,CACF,C","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/http.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"jmRDP\", function(module, exports) {\n\n$parcel$export(module.exports, \"http\", () => $e199ae7c03b2cad2$export$7d6f1c8842f9f527);\nfunction $e199ae7c03b2cad2$var$failFirstLine(stream, state) {\n    stream.skipToEnd();\n    state.cur = $e199ae7c03b2cad2$var$header;\n    return \"error\";\n}\nfunction $e199ae7c03b2cad2$var$start(stream, state) {\n    if (stream.match(/^HTTP\\/\\d\\.\\d/)) {\n        state.cur = $e199ae7c03b2cad2$var$responseStatusCode;\n        return \"keyword\";\n    } else if (stream.match(/^[A-Z]+/) && /[ \\t]/.test(stream.peek())) {\n        state.cur = $e199ae7c03b2cad2$var$requestPath;\n        return \"keyword\";\n    } else return $e199ae7c03b2cad2$var$failFirstLine(stream, state);\n}\nfunction $e199ae7c03b2cad2$var$responseStatusCode(stream, state) {\n    var code = stream.match(/^\\d+/);\n    if (!code) return $e199ae7c03b2cad2$var$failFirstLine(stream, state);\n    state.cur = $e199ae7c03b2cad2$var$responseStatusText;\n    var status = Number(code[0]);\n    if (status >= 100 && status < 400) return \"atom\";\n    else return \"error\";\n}\nfunction $e199ae7c03b2cad2$var$responseStatusText(stream, state) {\n    stream.skipToEnd();\n    state.cur = $e199ae7c03b2cad2$var$header;\n    return null;\n}\nfunction $e199ae7c03b2cad2$var$requestPath(stream, state) {\n    stream.eatWhile(/\\S/);\n    state.cur = $e199ae7c03b2cad2$var$requestProtocol;\n    return \"string.special\";\n}\nfunction $e199ae7c03b2cad2$var$requestProtocol(stream, state) {\n    if (stream.match(/^HTTP\\/\\d\\.\\d$/)) {\n        state.cur = $e199ae7c03b2cad2$var$header;\n        return \"keyword\";\n    } else return $e199ae7c03b2cad2$var$failFirstLine(stream, state);\n}\nfunction $e199ae7c03b2cad2$var$header(stream) {\n    if (stream.sol() && !stream.eat(/[ \\t]/)) {\n        if (stream.match(/^.*?:/)) return \"atom\";\n        else {\n            stream.skipToEnd();\n            return \"error\";\n        }\n    } else {\n        stream.skipToEnd();\n        return \"string\";\n    }\n}\nfunction $e199ae7c03b2cad2$var$body(stream) {\n    stream.skipToEnd();\n    return null;\n}\nconst $e199ae7c03b2cad2$export$7d6f1c8842f9f527 = {\n    name: \"http\",\n    token: function(stream, state) {\n        var cur = state.cur;\n        if (cur != $e199ae7c03b2cad2$var$header && cur != $e199ae7c03b2cad2$var$body && stream.eatSpace()) return null;\n        return cur(stream, state);\n    },\n    blankLine: function(state) {\n        state.cur = $e199ae7c03b2cad2$var$body;\n    },\n    startState: function() {\n        return {\n            cur: $e199ae7c03b2cad2$var$start\n        };\n    }\n};\n\n});\n\n\n//# sourceMappingURL=http.7ea65c4d.js.map\n","function failFirstLine(stream, state) {\n  stream.skipToEnd();\n  state.cur = header;\n  return \"error\";\n}\n\nfunction start(stream, state) {\n  if (stream.match(/^HTTP\\/\\d\\.\\d/)) {\n    state.cur = responseStatusCode;\n    return \"keyword\";\n  } else if (stream.match(/^[A-Z]+/) && /[ \\t]/.test(stream.peek())) {\n    state.cur = requestPath;\n    return \"keyword\";\n  } else {\n    return failFirstLine(stream, state);\n  }\n}\n\nfunction responseStatusCode(stream, state) {\n  var code = stream.match(/^\\d+/);\n  if (!code) return failFirstLine(stream, state);\n\n  state.cur = responseStatusText;\n  var status = Number(code[0]);\n  if (status >= 100 && status < 400) {\n    return \"atom\";\n  } else {\n    return \"error\";\n  }\n}\n\nfunction responseStatusText(stream, state) {\n  stream.skipToEnd();\n  state.cur = header;\n  return null;\n}\n\nfunction requestPath(stream, state) {\n  stream.eatWhile(/\\S/);\n  state.cur = requestProtocol;\n  return \"string.special\";\n}\n\nfunction requestProtocol(stream, state) {\n  if (stream.match(/^HTTP\\/\\d\\.\\d$/)) {\n    state.cur = header;\n    return \"keyword\";\n  } else {\n    return failFirstLine(stream, state);\n  }\n}\n\nfunction header(stream) {\n  if (stream.sol() && !stream.eat(/[ \\t]/)) {\n    if (stream.match(/^.*?:/)) {\n      return \"atom\";\n    } else {\n      stream.skipToEnd();\n      return \"error\";\n    }\n  } else {\n    stream.skipToEnd();\n    return \"string\";\n  }\n}\n\nfunction body(stream) {\n  stream.skipToEnd();\n  return null;\n}\n\nexport const http = {\n  name: \"http\",\n  token: function(stream, state) {\n    var cur = state.cur;\n    if (cur != header && cur != body && stream.eatSpace()) return null;\n    return cur(stream, state);\n  },\n\n  blankLine: function(state) {\n    state.cur = body;\n  },\n\n  startState: function() {\n    return {cur: start};\n  }\n};\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","$e199ae7c03b2cad2$var$failFirstLine","stream","state","skipToEnd","cur","$e199ae7c03b2cad2$var$header","$e199ae7c03b2cad2$var$start","match","$e199ae7c03b2cad2$var$responseStatusCode","test","peek","$e199ae7c03b2cad2$var$requestPath","code","$e199ae7c03b2cad2$var$responseStatusText","status","Number","eatWhile","$e199ae7c03b2cad2$var$requestProtocol","sol","eat","$e199ae7c03b2cad2$var$body","Object","defineProperty","get","$e199ae7c03b2cad2$export$7d6f1c8842f9f527","set","s","enumerable","configurable","name","token","eatSpace","blankLine","startState"],"version":3,"file":"http.7ea65c4d.js.map"}