{"mappings":"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","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/vbscript.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"gMCQR\", function(module, exports) {\n\n$parcel$export(module.exports, \"vbScript\", () => $c37f44295f3a60f4$export$719ec0fd7e6154e5);\nfunction $c37f44295f3a60f4$var$mkVBScript(parserConf) {\n    var ERRORCLASS = 'error';\n    function wordRegexp(words) {\n        return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n    }\n    var singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&\\\\\\\\\\\\^<>=]\");\n    var doubleOperators = new RegExp(\"^((<>)|(<=)|(>=))\");\n    var singleDelimiters = new RegExp('^[\\\\.,]');\n    var brackets = new RegExp('^[\\\\(\\\\)]');\n    var identifiers = new RegExp(\"^[A-Za-z][_A-Za-z0-9]*\");\n    var openingKeywords = [\n        'class',\n        'sub',\n        'select',\n        'while',\n        'if',\n        'function',\n        'property',\n        'with',\n        'for'\n    ];\n    var middleKeywords = [\n        'else',\n        'elseif',\n        'case'\n    ];\n    var endKeywords = [\n        'next',\n        'loop',\n        'wend'\n    ];\n    var wordOperators = wordRegexp([\n        'and',\n        'or',\n        'not',\n        'xor',\n        'is',\n        'mod',\n        'eqv',\n        'imp'\n    ]);\n    var commonkeywords = [\n        'dim',\n        'redim',\n        'then',\n        'until',\n        'randomize',\n        'byval',\n        'byref',\n        'new',\n        'property',\n        'exit',\n        'in',\n        'const',\n        'private',\n        'public',\n        'get',\n        'set',\n        'let',\n        'stop',\n        'on error resume next',\n        'on error goto 0',\n        'option explicit',\n        'call',\n        'me'\n    ];\n    //This list was from: http://msdn.microsoft.com/en-us/library/f8tbc79x(v=vs.84).aspx\n    var atomWords = [\n        'true',\n        'false',\n        'nothing',\n        'empty',\n        'null'\n    ];\n    //This list was from: http://msdn.microsoft.com/en-us/library/3ca8tfek(v=vs.84).aspx\n    var builtinFuncsWords = [\n        'abs',\n        'array',\n        'asc',\n        'atn',\n        'cbool',\n        'cbyte',\n        'ccur',\n        'cdate',\n        'cdbl',\n        'chr',\n        'cint',\n        'clng',\n        'cos',\n        'csng',\n        'cstr',\n        'date',\n        'dateadd',\n        'datediff',\n        'datepart',\n        'dateserial',\n        'datevalue',\n        'day',\n        'escape',\n        'eval',\n        'execute',\n        'exp',\n        'filter',\n        'formatcurrency',\n        'formatdatetime',\n        'formatnumber',\n        'formatpercent',\n        'getlocale',\n        'getobject',\n        'getref',\n        'hex',\n        'hour',\n        'inputbox',\n        'instr',\n        'instrrev',\n        'int',\n        'fix',\n        'isarray',\n        'isdate',\n        'isempty',\n        'isnull',\n        'isnumeric',\n        'isobject',\n        'join',\n        'lbound',\n        'lcase',\n        'left',\n        'len',\n        'loadpicture',\n        'log',\n        'ltrim',\n        'rtrim',\n        'trim',\n        'maths',\n        'mid',\n        'minute',\n        'month',\n        'monthname',\n        'msgbox',\n        'now',\n        'oct',\n        'replace',\n        'rgb',\n        'right',\n        'rnd',\n        'round',\n        'scriptengine',\n        'scriptenginebuildversion',\n        'scriptenginemajorversion',\n        'scriptengineminorversion',\n        'second',\n        'setlocale',\n        'sgn',\n        'sin',\n        'space',\n        'split',\n        'sqr',\n        'strcomp',\n        'string',\n        'strreverse',\n        'tan',\n        'time',\n        'timer',\n        'timeserial',\n        'timevalue',\n        'typename',\n        'ubound',\n        'ucase',\n        'unescape',\n        'vartype',\n        'weekday',\n        'weekdayname',\n        'year'\n    ];\n    //This list was from: http://msdn.microsoft.com/en-us/library/ydz4cfk3(v=vs.84).aspx\n    var builtinConsts = [\n        'vbBlack',\n        'vbRed',\n        'vbGreen',\n        'vbYellow',\n        'vbBlue',\n        'vbMagenta',\n        'vbCyan',\n        'vbWhite',\n        'vbBinaryCompare',\n        'vbTextCompare',\n        'vbSunday',\n        'vbMonday',\n        'vbTuesday',\n        'vbWednesday',\n        'vbThursday',\n        'vbFriday',\n        'vbSaturday',\n        'vbUseSystemDayOfWeek',\n        'vbFirstJan1',\n        'vbFirstFourDays',\n        'vbFirstFullWeek',\n        'vbGeneralDate',\n        'vbLongDate',\n        'vbShortDate',\n        'vbLongTime',\n        'vbShortTime',\n        'vbObjectError',\n        'vbOKOnly',\n        'vbOKCancel',\n        'vbAbortRetryIgnore',\n        'vbYesNoCancel',\n        'vbYesNo',\n        'vbRetryCancel',\n        'vbCritical',\n        'vbQuestion',\n        'vbExclamation',\n        'vbInformation',\n        'vbDefaultButton1',\n        'vbDefaultButton2',\n        'vbDefaultButton3',\n        'vbDefaultButton4',\n        'vbApplicationModal',\n        'vbSystemModal',\n        'vbOK',\n        'vbCancel',\n        'vbAbort',\n        'vbRetry',\n        'vbIgnore',\n        'vbYes',\n        'vbNo',\n        'vbCr',\n        'VbCrLf',\n        'vbFormFeed',\n        'vbLf',\n        'vbNewLine',\n        'vbNullChar',\n        'vbNullString',\n        'vbTab',\n        'vbVerticalTab',\n        'vbUseDefault',\n        'vbTrue',\n        'vbFalse',\n        'vbEmpty',\n        'vbNull',\n        'vbInteger',\n        'vbLong',\n        'vbSingle',\n        'vbDouble',\n        'vbCurrency',\n        'vbDate',\n        'vbString',\n        'vbObject',\n        'vbError',\n        'vbBoolean',\n        'vbVariant',\n        'vbDataObject',\n        'vbDecimal',\n        'vbByte',\n        'vbArray'\n    ];\n    //This list was from: http://msdn.microsoft.com/en-us/library/hkc375ea(v=vs.84).aspx\n    var builtinObjsWords = [\n        'WScript',\n        'err',\n        'debug',\n        'RegExp'\n    ];\n    var knownProperties = [\n        'description',\n        'firstindex',\n        'global',\n        'helpcontext',\n        'helpfile',\n        'ignorecase',\n        'length',\n        'number',\n        'pattern',\n        'source',\n        'value',\n        'count'\n    ];\n    var knownMethods = [\n        'clear',\n        'execute',\n        'raise',\n        'replace',\n        'test',\n        'write',\n        'writeline',\n        'close',\n        'open',\n        'state',\n        'eof',\n        'update',\n        'addnew',\n        'end',\n        'createobject',\n        'quit'\n    ];\n    var aspBuiltinObjsWords = [\n        'server',\n        'response',\n        'request',\n        'session',\n        'application'\n    ];\n    var aspKnownProperties = [\n        'buffer',\n        'cachecontrol',\n        'charset',\n        'contenttype',\n        'expires',\n        'expiresabsolute',\n        'isclientconnected',\n        'pics',\n        'status',\n        'clientcertificate',\n        'cookies',\n        'form',\n        'querystring',\n        'servervariables',\n        'totalbytes',\n        'contents',\n        'staticobjects',\n        'codepage',\n        'lcid',\n        'sessionid',\n        'timeout',\n        'scripttimeout'\n    ]; //server\n    var aspKnownMethods = [\n        'addheader',\n        'appendtolog',\n        'binarywrite',\n        'end',\n        'flush',\n        'redirect',\n        'binaryread',\n        'remove',\n        'removeall',\n        'lock',\n        'unlock',\n        'abandon',\n        'getlasterror',\n        'htmlencode',\n        'mappath',\n        'transfer',\n        'urlencode'\n    ]; //server\n    var knownWords = knownMethods.concat(knownProperties);\n    builtinObjsWords = builtinObjsWords.concat(builtinConsts);\n    if (parserConf.isASP) {\n        builtinObjsWords = builtinObjsWords.concat(aspBuiltinObjsWords);\n        knownWords = knownWords.concat(aspKnownMethods, aspKnownProperties);\n    }\n    var keywords = wordRegexp(commonkeywords);\n    var atoms = wordRegexp(atomWords);\n    var builtinFuncs = wordRegexp(builtinFuncsWords);\n    var builtinObjs = wordRegexp(builtinObjsWords);\n    var known = wordRegexp(knownWords);\n    var stringPrefixes = '\"';\n    var opening = wordRegexp(openingKeywords);\n    var middle = wordRegexp(middleKeywords);\n    var closing = wordRegexp(endKeywords);\n    var doubleClosing = wordRegexp([\n        'end'\n    ]);\n    var doOpening = wordRegexp([\n        'do'\n    ]);\n    var noIndentWords = wordRegexp([\n        'on error resume next',\n        'exit'\n    ]);\n    var comment = wordRegexp([\n        'rem'\n    ]);\n    function indent(_stream, state) {\n        state.currentIndent++;\n    }\n    function dedent(_stream, state) {\n        state.currentIndent--;\n    }\n    // tokenizers\n    function tokenBase(stream, state) {\n        if (stream.eatSpace()) return null;\n        var ch = stream.peek();\n        // Handle Comments\n        if (ch === \"'\") {\n            stream.skipToEnd();\n            return 'comment';\n        }\n        if (stream.match(comment)) {\n            stream.skipToEnd();\n            return 'comment';\n        }\n        // Handle Number Literals\n        if (stream.match(/^((&H)|(&O))?[0-9\\.]/i, false) && !stream.match(/^((&H)|(&O))?[0-9\\.]+[a-z_]/i, false)) {\n            var floatLiteral = false;\n            // Floats\n            if (stream.match(/^\\d*\\.\\d+/i)) floatLiteral = true;\n            else if (stream.match(/^\\d+\\.\\d*/)) floatLiteral = true;\n            else if (stream.match(/^\\.\\d+/)) floatLiteral = true;\n            if (floatLiteral) {\n                // Float literals may be \"imaginary\"\n                stream.eat(/J/i);\n                return 'number';\n            }\n            // Integers\n            var intLiteral = false;\n            // Hex\n            if (stream.match(/^&H[0-9a-f]+/i)) intLiteral = true;\n            else if (stream.match(/^&O[0-7]+/i)) intLiteral = true;\n            else if (stream.match(/^[1-9]\\d*F?/)) {\n                // Decimal literals may be \"imaginary\"\n                stream.eat(/J/i);\n                // TODO - Can you have imaginary longs?\n                intLiteral = true;\n            } else if (stream.match(/^0(?![\\dx])/i)) intLiteral = true;\n            if (intLiteral) {\n                // Integer literals may be \"long\"\n                stream.eat(/L/i);\n                return 'number';\n            }\n        }\n        // Handle Strings\n        if (stream.match(stringPrefixes)) {\n            state.tokenize = tokenStringFactory(stream.current());\n            return state.tokenize(stream, state);\n        }\n        // Handle operators and Delimiters\n        if (stream.match(doubleOperators) || stream.match(singleOperators) || stream.match(wordOperators)) return 'operator';\n        if (stream.match(singleDelimiters)) return null;\n        if (stream.match(brackets)) return \"bracket\";\n        if (stream.match(noIndentWords)) {\n            state.doInCurrentLine = true;\n            return 'keyword';\n        }\n        if (stream.match(doOpening)) {\n            indent(stream, state);\n            state.doInCurrentLine = true;\n            return 'keyword';\n        }\n        if (stream.match(opening)) {\n            if (!state.doInCurrentLine) indent(stream, state);\n            else state.doInCurrentLine = false;\n            return 'keyword';\n        }\n        if (stream.match(middle)) return 'keyword';\n        if (stream.match(doubleClosing)) {\n            dedent(stream, state);\n            dedent(stream, state);\n            return 'keyword';\n        }\n        if (stream.match(closing)) {\n            if (!state.doInCurrentLine) dedent(stream, state);\n            else state.doInCurrentLine = false;\n            return 'keyword';\n        }\n        if (stream.match(keywords)) return 'keyword';\n        if (stream.match(atoms)) return 'atom';\n        if (stream.match(known)) return 'variableName.special';\n        if (stream.match(builtinFuncs)) return 'builtin';\n        if (stream.match(builtinObjs)) return 'builtin';\n        if (stream.match(identifiers)) return 'variable';\n        // Handle non-detected items\n        stream.next();\n        return ERRORCLASS;\n    }\n    function tokenStringFactory(delimiter) {\n        var singleline = delimiter.length == 1;\n        var OUTCLASS = 'string';\n        return function(stream, state) {\n            while(!stream.eol()){\n                stream.eatWhile(/[^'\"]/);\n                if (stream.match(delimiter)) {\n                    state.tokenize = tokenBase;\n                    return OUTCLASS;\n                } else stream.eat(/['\"]/);\n            }\n            if (singleline) state.tokenize = tokenBase;\n            return OUTCLASS;\n        };\n    }\n    function tokenLexer(stream, state) {\n        var style = state.tokenize(stream, state);\n        var current = stream.current();\n        // Handle '.' connected identifiers\n        if (current === '.') {\n            style = state.tokenize(stream, state);\n            current = stream.current();\n            if (style && (style.substr(0, 8) === 'variable' || style === 'builtin' || style === 'keyword')) {\n                if (style === 'builtin' || style === 'keyword') style = 'variable';\n                if (knownWords.indexOf(current.substr(1)) > -1) style = 'keyword';\n                return style;\n            } else return ERRORCLASS;\n        }\n        return style;\n    }\n    return {\n        name: \"vbscript\",\n        startState: function() {\n            return {\n                tokenize: tokenBase,\n                lastToken: null,\n                currentIndent: 0,\n                nextLineIndent: 0,\n                doInCurrentLine: false,\n                ignoreKeyword: false\n            };\n        },\n        token: function(stream, state) {\n            if (stream.sol()) {\n                state.currentIndent += state.nextLineIndent;\n                state.nextLineIndent = 0;\n                state.doInCurrentLine = 0;\n            }\n            var style = tokenLexer(stream, state);\n            state.lastToken = {\n                style: style,\n                content: stream.current()\n            };\n            if (style === null) style = null;\n            return style;\n        },\n        indent: function(state, textAfter, cx) {\n            var trueText = textAfter.replace(/^\\s+|\\s+$/g, '');\n            if (trueText.match(closing) || trueText.match(doubleClosing) || trueText.match(middle)) return cx.unit * (state.currentIndent - 1);\n            if (state.currentIndent < 0) return 0;\n            return state.currentIndent * cx.unit;\n        }\n    };\n}\nconst $c37f44295f3a60f4$export$719ec0fd7e6154e5 = $c37f44295f3a60f4$var$mkVBScript({});\nconst $c37f44295f3a60f4$export$5877b29446d887b4 = $c37f44295f3a60f4$var$mkVBScript({\n    isASP: true\n});\n\n});\n\n\n//# sourceMappingURL=vbscript.a5bc9d25.js.map\n","function mkVBScript(parserConf) {\n    var ERRORCLASS = 'error';\n\n    function wordRegexp(words) {\n        return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n    }\n\n    var singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&\\\\\\\\\\\\^<>=]\");\n    var doubleOperators = new RegExp(\"^((<>)|(<=)|(>=))\");\n    var singleDelimiters = new RegExp('^[\\\\.,]');\n    var brackets = new RegExp('^[\\\\(\\\\)]');\n    var identifiers = new RegExp(\"^[A-Za-z][_A-Za-z0-9]*\");\n\n    var openingKeywords = ['class','sub','select','while','if','function', 'property', 'with', 'for'];\n    var middleKeywords = ['else','elseif','case'];\n    var endKeywords = ['next','loop','wend'];\n\n    var wordOperators = wordRegexp(['and', 'or', 'not', 'xor', 'is', 'mod', 'eqv', 'imp']);\n    var commonkeywords = ['dim', 'redim', 'then',  'until', 'randomize',\n                          'byval','byref','new','property', 'exit', 'in',\n                          'const','private', 'public',\n                          'get','set','let', 'stop', 'on error resume next', 'on error goto 0', 'option explicit', 'call', 'me'];\n\n    //This list was from: http://msdn.microsoft.com/en-us/library/f8tbc79x(v=vs.84).aspx\n    var atomWords = ['true', 'false', 'nothing', 'empty', 'null'];\n    //This list was from: http://msdn.microsoft.com/en-us/library/3ca8tfek(v=vs.84).aspx\n    var builtinFuncsWords = ['abs', 'array', 'asc', 'atn', 'cbool', 'cbyte', 'ccur', 'cdate', 'cdbl', 'chr', 'cint', 'clng', 'cos', 'csng', 'cstr', 'date', 'dateadd', 'datediff', 'datepart',\n                        'dateserial', 'datevalue', 'day', 'escape', 'eval', 'execute', 'exp', 'filter', 'formatcurrency', 'formatdatetime', 'formatnumber', 'formatpercent', 'getlocale', 'getobject',\n                        'getref', 'hex', 'hour', 'inputbox', 'instr', 'instrrev', 'int', 'fix', 'isarray', 'isdate', 'isempty', 'isnull', 'isnumeric', 'isobject', 'join', 'lbound', 'lcase', 'left',\n                        'len', 'loadpicture', 'log', 'ltrim', 'rtrim', 'trim', 'maths', 'mid', 'minute', 'month', 'monthname', 'msgbox', 'now', 'oct', 'replace', 'rgb', 'right', 'rnd', 'round',\n                        'scriptengine', 'scriptenginebuildversion', 'scriptenginemajorversion', 'scriptengineminorversion', 'second', 'setlocale', 'sgn', 'sin', 'space', 'split', 'sqr', 'strcomp',\n                        'string', 'strreverse', 'tan', 'time', 'timer', 'timeserial', 'timevalue', 'typename', 'ubound', 'ucase', 'unescape', 'vartype', 'weekday', 'weekdayname', 'year'];\n\n    //This list was from: http://msdn.microsoft.com/en-us/library/ydz4cfk3(v=vs.84).aspx\n    var builtinConsts = ['vbBlack', 'vbRed', 'vbGreen', 'vbYellow', 'vbBlue', 'vbMagenta', 'vbCyan', 'vbWhite', 'vbBinaryCompare', 'vbTextCompare',\n                         'vbSunday', 'vbMonday', 'vbTuesday', 'vbWednesday', 'vbThursday', 'vbFriday', 'vbSaturday', 'vbUseSystemDayOfWeek', 'vbFirstJan1', 'vbFirstFourDays', 'vbFirstFullWeek',\n                         'vbGeneralDate', 'vbLongDate', 'vbShortDate', 'vbLongTime', 'vbShortTime', 'vbObjectError',\n                         'vbOKOnly', 'vbOKCancel', 'vbAbortRetryIgnore', 'vbYesNoCancel', 'vbYesNo', 'vbRetryCancel', 'vbCritical', 'vbQuestion', 'vbExclamation', 'vbInformation', 'vbDefaultButton1', 'vbDefaultButton2',\n                         'vbDefaultButton3', 'vbDefaultButton4', 'vbApplicationModal', 'vbSystemModal', 'vbOK', 'vbCancel', 'vbAbort', 'vbRetry', 'vbIgnore', 'vbYes', 'vbNo',\n                         'vbCr', 'VbCrLf', 'vbFormFeed', 'vbLf', 'vbNewLine', 'vbNullChar', 'vbNullString', 'vbTab', 'vbVerticalTab', 'vbUseDefault', 'vbTrue', 'vbFalse',\n                         'vbEmpty', 'vbNull', 'vbInteger', 'vbLong', 'vbSingle', 'vbDouble', 'vbCurrency', 'vbDate', 'vbString', 'vbObject', 'vbError', 'vbBoolean', 'vbVariant', 'vbDataObject', 'vbDecimal', 'vbByte', 'vbArray'];\n    //This list was from: http://msdn.microsoft.com/en-us/library/hkc375ea(v=vs.84).aspx\n    var builtinObjsWords = ['WScript', 'err', 'debug', 'RegExp'];\n    var knownProperties = ['description', 'firstindex', 'global', 'helpcontext', 'helpfile', 'ignorecase', 'length', 'number', 'pattern', 'source', 'value', 'count'];\n    var knownMethods = ['clear', 'execute', 'raise', 'replace', 'test', 'write', 'writeline', 'close', 'open', 'state', 'eof', 'update', 'addnew', 'end', 'createobject', 'quit'];\n\n    var aspBuiltinObjsWords = ['server', 'response', 'request', 'session', 'application'];\n    var aspKnownProperties = ['buffer', 'cachecontrol', 'charset', 'contenttype', 'expires', 'expiresabsolute', 'isclientconnected', 'pics', 'status', //response\n                              'clientcertificate', 'cookies', 'form', 'querystring', 'servervariables', 'totalbytes', //request\n                              'contents', 'staticobjects', //application\n                              'codepage', 'lcid', 'sessionid', 'timeout', //session\n                              'scripttimeout']; //server\n    var aspKnownMethods = ['addheader', 'appendtolog', 'binarywrite', 'end', 'flush', 'redirect', //response\n                           'binaryread', //request\n                           'remove', 'removeall', 'lock', 'unlock', //application\n                           'abandon', //session\n                           'getlasterror', 'htmlencode', 'mappath', 'transfer', 'urlencode']; //server\n\n    var knownWords = knownMethods.concat(knownProperties);\n\n    builtinObjsWords = builtinObjsWords.concat(builtinConsts);\n\n    if (parserConf.isASP){\n        builtinObjsWords = builtinObjsWords.concat(aspBuiltinObjsWords);\n        knownWords = knownWords.concat(aspKnownMethods, aspKnownProperties);\n    };\n\n    var keywords = wordRegexp(commonkeywords);\n    var atoms = wordRegexp(atomWords);\n    var builtinFuncs = wordRegexp(builtinFuncsWords);\n    var builtinObjs = wordRegexp(builtinObjsWords);\n    var known = wordRegexp(knownWords);\n    var stringPrefixes = '\"';\n\n    var opening = wordRegexp(openingKeywords);\n    var middle = wordRegexp(middleKeywords);\n    var closing = wordRegexp(endKeywords);\n    var doubleClosing = wordRegexp(['end']);\n    var doOpening = wordRegexp(['do']);\n    var noIndentWords = wordRegexp(['on error resume next', 'exit']);\n    var comment = wordRegexp(['rem']);\n\n\n    function indent(_stream, state) {\n      state.currentIndent++;\n    }\n\n    function dedent(_stream, state) {\n      state.currentIndent--;\n    }\n    // tokenizers\n    function tokenBase(stream, state) {\n        if (stream.eatSpace()) {\n            return null\n            //return null;\n        }\n\n        var ch = stream.peek();\n\n        // Handle Comments\n        if (ch === \"'\") {\n            stream.skipToEnd();\n            return 'comment';\n        }\n        if (stream.match(comment)){\n            stream.skipToEnd();\n            return 'comment';\n        }\n\n\n        // Handle Number Literals\n        if (stream.match(/^((&H)|(&O))?[0-9\\.]/i, false) && !stream.match(/^((&H)|(&O))?[0-9\\.]+[a-z_]/i, false)) {\n            var floatLiteral = false;\n            // Floats\n            if (stream.match(/^\\d*\\.\\d+/i)) { floatLiteral = true; }\n            else if (stream.match(/^\\d+\\.\\d*/)) { floatLiteral = true; }\n            else if (stream.match(/^\\.\\d+/)) { floatLiteral = true; }\n\n            if (floatLiteral) {\n                // Float literals may be \"imaginary\"\n                stream.eat(/J/i);\n                return 'number';\n            }\n            // Integers\n            var intLiteral = false;\n            // Hex\n            if (stream.match(/^&H[0-9a-f]+/i)) { intLiteral = true; }\n            // Octal\n            else if (stream.match(/^&O[0-7]+/i)) { intLiteral = true; }\n            // Decimal\n            else if (stream.match(/^[1-9]\\d*F?/)) {\n                // Decimal literals may be \"imaginary\"\n                stream.eat(/J/i);\n                // TODO - Can you have imaginary longs?\n                intLiteral = true;\n            }\n            // Zero by itself with no other piece of number.\n            else if (stream.match(/^0(?![\\dx])/i)) { intLiteral = true; }\n            if (intLiteral) {\n                // Integer literals may be \"long\"\n                stream.eat(/L/i);\n                return 'number';\n            }\n        }\n\n        // Handle Strings\n        if (stream.match(stringPrefixes)) {\n            state.tokenize = tokenStringFactory(stream.current());\n            return state.tokenize(stream, state);\n        }\n\n        // Handle operators and Delimiters\n        if (stream.match(doubleOperators)\n            || stream.match(singleOperators)\n            || stream.match(wordOperators)) {\n            return 'operator';\n        }\n        if (stream.match(singleDelimiters)) {\n            return null;\n        }\n\n        if (stream.match(brackets)) {\n            return \"bracket\";\n        }\n\n        if (stream.match(noIndentWords)) {\n            state.doInCurrentLine = true;\n\n            return 'keyword';\n        }\n\n        if (stream.match(doOpening)) {\n            indent(stream,state);\n            state.doInCurrentLine = true;\n\n            return 'keyword';\n        }\n        if (stream.match(opening)) {\n            if (! state.doInCurrentLine)\n              indent(stream,state);\n            else\n              state.doInCurrentLine = false;\n\n            return 'keyword';\n        }\n        if (stream.match(middle)) {\n            return 'keyword';\n        }\n\n\n        if (stream.match(doubleClosing)) {\n            dedent(stream,state);\n            dedent(stream,state);\n\n            return 'keyword';\n        }\n        if (stream.match(closing)) {\n            if (! state.doInCurrentLine)\n              dedent(stream,state);\n            else\n              state.doInCurrentLine = false;\n\n            return 'keyword';\n        }\n\n        if (stream.match(keywords)) {\n            return 'keyword';\n        }\n\n        if (stream.match(atoms)) {\n            return 'atom';\n        }\n\n        if (stream.match(known)) {\n            return 'variableName.special';\n        }\n\n        if (stream.match(builtinFuncs)) {\n            return 'builtin';\n        }\n\n        if (stream.match(builtinObjs)){\n            return 'builtin';\n        }\n\n        if (stream.match(identifiers)) {\n            return 'variable';\n        }\n\n        // Handle non-detected items\n        stream.next();\n        return ERRORCLASS;\n    }\n\n    function tokenStringFactory(delimiter) {\n        var singleline = delimiter.length == 1;\n        var OUTCLASS = 'string';\n\n        return function(stream, state) {\n            while (!stream.eol()) {\n                stream.eatWhile(/[^'\"]/);\n                if (stream.match(delimiter)) {\n                    state.tokenize = tokenBase;\n                    return OUTCLASS;\n                } else {\n                    stream.eat(/['\"]/);\n                }\n            }\n            if (singleline) {\n              state.tokenize = tokenBase;\n            }\n            return OUTCLASS;\n        };\n    }\n\n\n    function tokenLexer(stream, state) {\n        var style = state.tokenize(stream, state);\n        var current = stream.current();\n\n        // Handle '.' connected identifiers\n        if (current === '.') {\n            style = state.tokenize(stream, state);\n\n            current = stream.current();\n            if (style && (style.substr(0, 8) === 'variable' || style==='builtin' || style==='keyword')){//|| knownWords.indexOf(current.substring(1)) > -1) {\n                if (style === 'builtin' || style === 'keyword') style='variable';\n                if (knownWords.indexOf(current.substr(1)) > -1) style='keyword';\n\n                return style;\n            } else {\n                return ERRORCLASS;\n            }\n        }\n\n        return style;\n    }\n\n    return {\n        name: \"vbscript\",\n        startState: function() {\n            return {\n              tokenize: tokenBase,\n              lastToken: null,\n              currentIndent: 0,\n              nextLineIndent: 0,\n              doInCurrentLine: false,\n              ignoreKeyword: false\n\n\n          };\n        },\n\n        token: function(stream, state) {\n            if (stream.sol()) {\n              state.currentIndent += state.nextLineIndent;\n              state.nextLineIndent = 0;\n              state.doInCurrentLine = 0;\n            }\n            var style = tokenLexer(stream, state);\n\n            state.lastToken = {style:style, content: stream.current()};\n\n            if (style===null) style=null;\n\n            return style;\n        },\n\n        indent: function(state, textAfter, cx) {\n            var trueText = textAfter.replace(/^\\s+|\\s+$/g, '') ;\n            if (trueText.match(closing) || trueText.match(doubleClosing) || trueText.match(middle)) return cx.unit*(state.currentIndent-1);\n            if(state.currentIndent < 0) return 0;\n            return state.currentIndent * cx.unit\n        }\n\n    };\n};\n\nexport const vbScript = mkVBScript({})\nexport const vbScriptASP = mkVBScript({isASP: true})\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","$c37f44295f3a60f4$var$mkVBScript","parserConf","ERRORCLASS","wordRegexp","words","RegExp","join","singleOperators","doubleOperators","singleDelimiters","brackets","identifiers","wordOperators","builtinObjsWords","knownWords","knownMethods","concat","isASP","keywords","atoms","builtinFuncs","builtinObjs","known","opening","middle","closing","doubleClosing","doOpening","noIndentWords","comment","indent","_stream","state","currentIndent","dedent","tokenBase","stream","eatSpace","peek","match","skipToEnd","delimiter","singleline","OUTCLASS","floatLiteral","eat","intLiteral","current","length","tokenize","eol","eatWhile","doInCurrentLine","next","name","startState","lastToken","nextLineIndent","ignoreKeyword","token","sol","style","tokenLexer","substr","indexOf","content","textAfter","cx","trueText","replace","unit","Object","defineProperty","get","$c37f44295f3a60f4$export$719ec0fd7e6154e5","set","s","enumerable","configurable"],"version":3,"file":"vbscript.a5bc9d25.js.map"}