{"mappings":"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","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/swift.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"3N88N\", function(module, exports) {\n\n$parcel$export(module.exports, \"swift\", () => $2c2c43554f61a8e7$export$8da7faf1a9578e7b);\nfunction $2c2c43554f61a8e7$var$wordSet(words) {\n    var set = {};\n    for(var i = 0; i < words.length; i++)set[words[i]] = true;\n    return set;\n}\nvar $2c2c43554f61a8e7$var$keywords = $2c2c43554f61a8e7$var$wordSet([\n    \"_\",\n    \"var\",\n    \"let\",\n    \"actor\",\n    \"class\",\n    \"enum\",\n    \"extension\",\n    \"import\",\n    \"protocol\",\n    \"struct\",\n    \"func\",\n    \"typealias\",\n    \"associatedtype\",\n    \"open\",\n    \"public\",\n    \"internal\",\n    \"fileprivate\",\n    \"private\",\n    \"deinit\",\n    \"init\",\n    \"new\",\n    \"override\",\n    \"self\",\n    \"subscript\",\n    \"super\",\n    \"convenience\",\n    \"dynamic\",\n    \"final\",\n    \"indirect\",\n    \"lazy\",\n    \"required\",\n    \"static\",\n    \"unowned\",\n    \"unowned(safe)\",\n    \"unowned(unsafe)\",\n    \"weak\",\n    \"as\",\n    \"is\",\n    \"break\",\n    \"case\",\n    \"continue\",\n    \"default\",\n    \"else\",\n    \"fallthrough\",\n    \"for\",\n    \"guard\",\n    \"if\",\n    \"in\",\n    \"repeat\",\n    \"switch\",\n    \"where\",\n    \"while\",\n    \"defer\",\n    \"return\",\n    \"inout\",\n    \"mutating\",\n    \"nonmutating\",\n    \"isolated\",\n    \"nonisolated\",\n    \"catch\",\n    \"do\",\n    \"rethrows\",\n    \"throw\",\n    \"throws\",\n    \"async\",\n    \"await\",\n    \"try\",\n    \"didSet\",\n    \"get\",\n    \"set\",\n    \"willSet\",\n    \"assignment\",\n    \"associativity\",\n    \"infix\",\n    \"left\",\n    \"none\",\n    \"operator\",\n    \"postfix\",\n    \"precedence\",\n    \"precedencegroup\",\n    \"prefix\",\n    \"right\",\n    \"Any\",\n    \"AnyObject\",\n    \"Type\",\n    \"dynamicType\",\n    \"Self\",\n    \"Protocol\",\n    \"__COLUMN__\",\n    \"__FILE__\",\n    \"__FUNCTION__\",\n    \"__LINE__\"\n]);\nvar $2c2c43554f61a8e7$var$definingKeywords = $2c2c43554f61a8e7$var$wordSet([\n    \"var\",\n    \"let\",\n    \"actor\",\n    \"class\",\n    \"enum\",\n    \"extension\",\n    \"import\",\n    \"protocol\",\n    \"struct\",\n    \"func\",\n    \"typealias\",\n    \"associatedtype\",\n    \"for\"\n]);\nvar $2c2c43554f61a8e7$var$atoms = $2c2c43554f61a8e7$var$wordSet([\n    \"true\",\n    \"false\",\n    \"nil\",\n    \"self\",\n    \"super\",\n    \"_\"\n]);\nvar $2c2c43554f61a8e7$var$types = $2c2c43554f61a8e7$var$wordSet([\n    \"Array\",\n    \"Bool\",\n    \"Character\",\n    \"Dictionary\",\n    \"Double\",\n    \"Float\",\n    \"Int\",\n    \"Int8\",\n    \"Int16\",\n    \"Int32\",\n    \"Int64\",\n    \"Never\",\n    \"Optional\",\n    \"Set\",\n    \"String\",\n    \"UInt8\",\n    \"UInt16\",\n    \"UInt32\",\n    \"UInt64\",\n    \"Void\"\n]);\nvar $2c2c43554f61a8e7$var$operators = \"+-/*%=|&<>~^?!\";\nvar $2c2c43554f61a8e7$var$punc = \":;,.(){}[]\";\nvar $2c2c43554f61a8e7$var$binary = /^\\-?0b[01][01_]*/;\nvar $2c2c43554f61a8e7$var$octal = /^\\-?0o[0-7][0-7_]*/;\nvar $2c2c43554f61a8e7$var$hexadecimal = /^\\-?0x[\\dA-Fa-f][\\dA-Fa-f_]*(?:(?:\\.[\\dA-Fa-f][\\dA-Fa-f_]*)?[Pp]\\-?\\d[\\d_]*)?/;\nvar $2c2c43554f61a8e7$var$decimal = /^\\-?\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[Ee]\\-?\\d[\\d_]*)?/;\nvar $2c2c43554f61a8e7$var$identifier = /^\\$\\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\\1/;\nvar $2c2c43554f61a8e7$var$property = /^\\.(?:\\$\\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\\1)/;\nvar $2c2c43554f61a8e7$var$instruction = /^\\#[A-Za-z]+/;\nvar $2c2c43554f61a8e7$var$attribute = /^@(?:\\$\\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\\1)/;\n//var regexp = /^\\/(?!\\s)(?:\\/\\/)?(?:\\\\.|[^\\/])+\\//\nfunction $2c2c43554f61a8e7$var$tokenBase(stream, state, prev) {\n    if (stream.sol()) state.indented = stream.indentation();\n    if (stream.eatSpace()) return null;\n    var ch = stream.peek();\n    if (ch == \"/\") {\n        if (stream.match(\"//\")) {\n            stream.skipToEnd();\n            return \"comment\";\n        }\n        if (stream.match(\"/*\")) {\n            state.tokenize.push($2c2c43554f61a8e7$var$tokenComment);\n            return $2c2c43554f61a8e7$var$tokenComment(stream, state);\n        }\n    }\n    if (stream.match($2c2c43554f61a8e7$var$instruction)) return \"builtin\";\n    if (stream.match($2c2c43554f61a8e7$var$attribute)) return \"attribute\";\n    if (stream.match($2c2c43554f61a8e7$var$binary)) return \"number\";\n    if (stream.match($2c2c43554f61a8e7$var$octal)) return \"number\";\n    if (stream.match($2c2c43554f61a8e7$var$hexadecimal)) return \"number\";\n    if (stream.match($2c2c43554f61a8e7$var$decimal)) return \"number\";\n    if (stream.match($2c2c43554f61a8e7$var$property)) return \"property\";\n    if ($2c2c43554f61a8e7$var$operators.indexOf(ch) > -1) {\n        stream.next();\n        return \"operator\";\n    }\n    if ($2c2c43554f61a8e7$var$punc.indexOf(ch) > -1) {\n        stream.next();\n        stream.match(\"..\");\n        return \"punctuation\";\n    }\n    var stringMatch;\n    if (stringMatch = stream.match(/(\"\"\"|\"|')/)) {\n        var tokenize = $2c2c43554f61a8e7$var$tokenString.bind(null, stringMatch[0]);\n        state.tokenize.push(tokenize);\n        return tokenize(stream, state);\n    }\n    if (stream.match($2c2c43554f61a8e7$var$identifier)) {\n        var ident = stream.current();\n        if ($2c2c43554f61a8e7$var$types.hasOwnProperty(ident)) return \"type\";\n        if ($2c2c43554f61a8e7$var$atoms.hasOwnProperty(ident)) return \"atom\";\n        if ($2c2c43554f61a8e7$var$keywords.hasOwnProperty(ident)) {\n            if ($2c2c43554f61a8e7$var$definingKeywords.hasOwnProperty(ident)) state.prev = \"define\";\n            return \"keyword\";\n        }\n        if (prev == \"define\") return \"def\";\n        return \"variable\";\n    }\n    stream.next();\n    return null;\n}\nfunction $2c2c43554f61a8e7$var$tokenUntilClosingParen() {\n    var depth = 0;\n    return function(stream, state, prev) {\n        var inner = $2c2c43554f61a8e7$var$tokenBase(stream, state, prev);\n        if (inner == \"punctuation\") {\n            if (stream.current() == \"(\") ++depth;\n            else if (stream.current() == \")\") {\n                if (depth == 0) {\n                    stream.backUp(1);\n                    state.tokenize.pop();\n                    return state.tokenize[state.tokenize.length - 1](stream, state);\n                } else --depth;\n            }\n        }\n        return inner;\n    };\n}\nfunction $2c2c43554f61a8e7$var$tokenString(openQuote, stream, state) {\n    var singleLine = openQuote.length == 1;\n    var ch, escaped = false;\n    while(ch = stream.peek()){\n        if (escaped) {\n            stream.next();\n            if (ch == \"(\") {\n                state.tokenize.push($2c2c43554f61a8e7$var$tokenUntilClosingParen());\n                return \"string\";\n            }\n            escaped = false;\n        } else if (stream.match(openQuote)) {\n            state.tokenize.pop();\n            return \"string\";\n        } else {\n            stream.next();\n            escaped = ch == \"\\\\\";\n        }\n    }\n    if (singleLine) state.tokenize.pop();\n    return \"string\";\n}\nfunction $2c2c43554f61a8e7$var$tokenComment(stream, state) {\n    var ch;\n    while(ch = stream.next()){\n        if (ch === \"/\" && stream.eat(\"*\")) state.tokenize.push($2c2c43554f61a8e7$var$tokenComment);\n        else if (ch === \"*\" && stream.eat(\"/\")) {\n            state.tokenize.pop();\n            break;\n        }\n    }\n    return \"comment\";\n}\nfunction $2c2c43554f61a8e7$var$Context(prev, align, indented) {\n    this.prev = prev;\n    this.align = align;\n    this.indented = indented;\n}\nfunction $2c2c43554f61a8e7$var$pushContext(state, stream) {\n    var align = stream.match(/^\\s*($|\\/[\\/\\*]|[)}\\]])/, false) ? null : stream.column() + 1;\n    state.context = new $2c2c43554f61a8e7$var$Context(state.context, align, state.indented);\n}\nfunction $2c2c43554f61a8e7$var$popContext(state) {\n    if (state.context) {\n        state.indented = state.context.indented;\n        state.context = state.context.prev;\n    }\n}\nconst $2c2c43554f61a8e7$export$8da7faf1a9578e7b = {\n    name: \"swift\",\n    startState: function() {\n        return {\n            prev: null,\n            context: null,\n            indented: 0,\n            tokenize: []\n        };\n    },\n    token: function(stream, state) {\n        var prev = state.prev;\n        state.prev = null;\n        var tokenize = state.tokenize[state.tokenize.length - 1] || $2c2c43554f61a8e7$var$tokenBase;\n        var style = tokenize(stream, state, prev);\n        if (!style || style == \"comment\") state.prev = prev;\n        else if (!state.prev) state.prev = style;\n        if (style == \"punctuation\") {\n            var bracket = /[\\(\\[\\{]|([\\]\\)\\}])/.exec(stream.current());\n            if (bracket) (bracket[1] ? $2c2c43554f61a8e7$var$popContext : $2c2c43554f61a8e7$var$pushContext)(state, stream);\n        }\n        return style;\n    },\n    indent: function(state, textAfter, iCx) {\n        var cx = state.context;\n        if (!cx) return 0;\n        var closing = /^[\\]\\}\\)]/.test(textAfter);\n        if (cx.align != null) return cx.align - (closing ? 1 : 0);\n        return cx.indented + (closing ? 0 : iCx.unit);\n    },\n    languageData: {\n        indentOnInput: /^\\s*[\\)\\}\\]]$/,\n        commentTokens: {\n            line: \"//\",\n            block: {\n                open: \"/*\",\n                close: \"*/\"\n            }\n        },\n        closeBrackets: {\n            brackets: [\n                \"(\",\n                \"[\",\n                \"{\",\n                \"'\",\n                '\"',\n                \"`\"\n            ]\n        }\n    }\n};\n\n});\n\n\n//# sourceMappingURL=swift.0e6dffa3.js.map\n","function wordSet(words) {\n  var set = {}\n  for (var i = 0; i < words.length; i++) set[words[i]] = true\n  return set\n}\n\nvar keywords = wordSet([\"_\",\"var\",\"let\",\"actor\",\"class\",\"enum\",\"extension\",\"import\",\"protocol\",\"struct\",\"func\",\"typealias\",\"associatedtype\",\n                        \"open\",\"public\",\"internal\",\"fileprivate\",\"private\",\"deinit\",\"init\",\"new\",\"override\",\"self\",\"subscript\",\"super\",\n                        \"convenience\",\"dynamic\",\"final\",\"indirect\",\"lazy\",\"required\",\"static\",\"unowned\",\"unowned(safe)\",\"unowned(unsafe)\",\"weak\",\"as\",\"is\",\n                        \"break\",\"case\",\"continue\",\"default\",\"else\",\"fallthrough\",\"for\",\"guard\",\"if\",\"in\",\"repeat\",\"switch\",\"where\",\"while\",\n                        \"defer\",\"return\",\"inout\",\"mutating\",\"nonmutating\",\"isolated\",\"nonisolated\",\"catch\",\"do\",\"rethrows\",\"throw\",\"throws\",\"async\",\"await\",\"try\",\"didSet\",\"get\",\"set\",\"willSet\",\n                        \"assignment\",\"associativity\",\"infix\",\"left\",\"none\",\"operator\",\"postfix\",\"precedence\",\"precedencegroup\",\"prefix\",\"right\",\n                        \"Any\",\"AnyObject\",\"Type\",\"dynamicType\",\"Self\",\"Protocol\",\"__COLUMN__\",\"__FILE__\",\"__FUNCTION__\",\"__LINE__\"])\nvar definingKeywords = wordSet([\"var\",\"let\",\"actor\",\"class\",\"enum\",\"extension\",\"import\",\"protocol\",\"struct\",\"func\",\"typealias\",\"associatedtype\",\"for\"])\nvar atoms = wordSet([\"true\",\"false\",\"nil\",\"self\",\"super\",\"_\"])\nvar types = wordSet([\"Array\",\"Bool\",\"Character\",\"Dictionary\",\"Double\",\"Float\",\"Int\",\"Int8\",\"Int16\",\"Int32\",\"Int64\",\"Never\",\"Optional\",\"Set\",\"String\",\n                     \"UInt8\",\"UInt16\",\"UInt32\",\"UInt64\",\"Void\"])\nvar operators = \"+-/*%=|&<>~^?!\"\nvar punc = \":;,.(){}[]\"\nvar binary = /^\\-?0b[01][01_]*/\nvar octal = /^\\-?0o[0-7][0-7_]*/\nvar hexadecimal = /^\\-?0x[\\dA-Fa-f][\\dA-Fa-f_]*(?:(?:\\.[\\dA-Fa-f][\\dA-Fa-f_]*)?[Pp]\\-?\\d[\\d_]*)?/\nvar decimal = /^\\-?\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[Ee]\\-?\\d[\\d_]*)?/\nvar identifier = /^\\$\\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\\1/\nvar property = /^\\.(?:\\$\\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\\1)/\nvar instruction = /^\\#[A-Za-z]+/\nvar attribute = /^@(?:\\$\\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\\1)/\n//var regexp = /^\\/(?!\\s)(?:\\/\\/)?(?:\\\\.|[^\\/])+\\//\n\nfunction tokenBase(stream, state, prev) {\n  if (stream.sol()) state.indented = stream.indentation()\n  if (stream.eatSpace()) return null\n\n  var ch = stream.peek()\n  if (ch == \"/\") {\n    if (stream.match(\"//\")) {\n      stream.skipToEnd()\n      return \"comment\"\n    }\n    if (stream.match(\"/*\")) {\n      state.tokenize.push(tokenComment)\n      return tokenComment(stream, state)\n    }\n  }\n  if (stream.match(instruction)) return \"builtin\"\n  if (stream.match(attribute)) return \"attribute\"\n  if (stream.match(binary)) return \"number\"\n  if (stream.match(octal)) return \"number\"\n  if (stream.match(hexadecimal)) return \"number\"\n  if (stream.match(decimal)) return \"number\"\n  if (stream.match(property)) return \"property\"\n  if (operators.indexOf(ch) > -1) {\n    stream.next()\n    return \"operator\"\n  }\n  if (punc.indexOf(ch) > -1) {\n    stream.next()\n    stream.match(\"..\")\n    return \"punctuation\"\n  }\n  var stringMatch\n  if (stringMatch = stream.match(/(\"\"\"|\"|')/)) {\n    var tokenize = tokenString.bind(null, stringMatch[0])\n    state.tokenize.push(tokenize)\n    return tokenize(stream, state)\n  }\n\n  if (stream.match(identifier)) {\n    var ident = stream.current()\n    if (types.hasOwnProperty(ident)) return \"type\"\n    if (atoms.hasOwnProperty(ident)) return \"atom\"\n    if (keywords.hasOwnProperty(ident)) {\n      if (definingKeywords.hasOwnProperty(ident))\n        state.prev = \"define\"\n      return \"keyword\"\n    }\n    if (prev == \"define\") return \"def\"\n    return \"variable\"\n  }\n\n  stream.next()\n  return null\n}\n\nfunction tokenUntilClosingParen() {\n  var depth = 0\n  return function(stream, state, prev) {\n    var inner = tokenBase(stream, state, prev)\n    if (inner == \"punctuation\") {\n      if (stream.current() == \"(\") ++depth\n      else if (stream.current() == \")\") {\n        if (depth == 0) {\n          stream.backUp(1)\n          state.tokenize.pop()\n          return state.tokenize[state.tokenize.length - 1](stream, state)\n        }\n        else --depth\n      }\n    }\n    return inner\n  }\n}\n\nfunction tokenString(openQuote, stream, state) {\n  var singleLine = openQuote.length == 1\n  var ch, escaped = false\n  while (ch = stream.peek()) {\n    if (escaped) {\n      stream.next()\n      if (ch == \"(\") {\n        state.tokenize.push(tokenUntilClosingParen())\n        return \"string\"\n      }\n      escaped = false\n    } else if (stream.match(openQuote)) {\n      state.tokenize.pop()\n      return \"string\"\n    } else {\n      stream.next()\n      escaped = ch == \"\\\\\"\n    }\n  }\n  if (singleLine) {\n    state.tokenize.pop()\n  }\n  return \"string\"\n}\n\nfunction tokenComment(stream, state) {\n  var ch\n  while (ch = stream.next()) {\n    if (ch === \"/\" && stream.eat(\"*\")) {\n      state.tokenize.push(tokenComment)\n    } else if (ch === \"*\" && stream.eat(\"/\")) {\n      state.tokenize.pop()\n      break\n    }\n  }\n  return \"comment\"\n}\n\nfunction Context(prev, align, indented) {\n  this.prev = prev\n  this.align = align\n  this.indented = indented\n}\n\nfunction pushContext(state, stream) {\n  var align = stream.match(/^\\s*($|\\/[\\/\\*]|[)}\\]])/, false) ? null : stream.column() + 1\n  state.context = new Context(state.context, align, state.indented)\n}\n\nfunction popContext(state) {\n  if (state.context) {\n    state.indented = state.context.indented\n    state.context = state.context.prev\n  }\n}\n\nexport const swift = {\n  name: \"swift\",\n  startState: function() {\n    return {\n      prev: null,\n      context: null,\n      indented: 0,\n      tokenize: []\n    }\n  },\n\n  token: function(stream, state) {\n    var prev = state.prev\n    state.prev = null\n    var tokenize = state.tokenize[state.tokenize.length - 1] || tokenBase\n    var style = tokenize(stream, state, prev)\n    if (!style || style == \"comment\") state.prev = prev\n    else if (!state.prev) state.prev = style\n\n    if (style == \"punctuation\") {\n      var bracket = /[\\(\\[\\{]|([\\]\\)\\}])/.exec(stream.current())\n      if (bracket) (bracket[1] ? popContext : pushContext)(state, stream)\n    }\n\n    return style\n  },\n\n  indent: function(state, textAfter, iCx) {\n    var cx = state.context\n    if (!cx) return 0\n    var closing = /^[\\]\\}\\)]/.test(textAfter)\n    if (cx.align != null) return cx.align - (closing ? 1 : 0)\n    return cx.indented + (closing ? 0 : iCx.unit)\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*[\\)\\}\\]]$/,\n    commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}},\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"`\"]}\n  }\n}\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","$2c2c43554f61a8e7$var$wordSet","words","set","i","length","Object","defineProperty","get","$2c2c43554f61a8e7$export$8da7faf1a9578e7b","s","enumerable","configurable","$2c2c43554f61a8e7$var$keywords","$2c2c43554f61a8e7$var$definingKeywords","$2c2c43554f61a8e7$var$atoms","$2c2c43554f61a8e7$var$types","$2c2c43554f61a8e7$var$binary","$2c2c43554f61a8e7$var$octal","$2c2c43554f61a8e7$var$hexadecimal","$2c2c43554f61a8e7$var$decimal","$2c2c43554f61a8e7$var$identifier","$2c2c43554f61a8e7$var$property","$2c2c43554f61a8e7$var$instruction","$2c2c43554f61a8e7$var$attribute","$2c2c43554f61a8e7$var$tokenBase","stream","state","prev","sol","indented","indentation","eatSpace","stringMatch","ch","peek","match","skipToEnd","tokenize","push","$2c2c43554f61a8e7$var$tokenComment","$2c2c43554f61a8e7$var$operators","indexOf","next","$2c2c43554f61a8e7$var$punc","$2c2c43554f61a8e7$var$tokenString","bind","ident","current","hasOwnProperty","openQuote","singleLine","escaped","$2c2c43554f61a8e7$var$tokenUntilClosingParen","depth","inner","backUp","pop","eat","$2c2c43554f61a8e7$var$Context","align","name","startState","context","token","style","bracket","exec","column","indent","textAfter","iCx","cx","closing","test","unit","languageData","indentOnInput","commentTokens","line","block","open","close","closeBrackets","brackets"],"version":3,"file":"swift.0e6dffa3.js.map"}