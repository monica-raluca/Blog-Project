{"mappings":"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","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/jinja2.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"l13Vl\", function(module, exports) {\n\n$parcel$export(module.exports, \"jinja2\", () => $f4ccbc3303846fb1$export$b4388fe1de243edc);\nvar $f4ccbc3303846fb1$var$keywords = [\n    \"and\",\n    \"as\",\n    \"block\",\n    \"endblock\",\n    \"by\",\n    \"cycle\",\n    \"debug\",\n    \"else\",\n    \"elif\",\n    \"extends\",\n    \"filter\",\n    \"endfilter\",\n    \"firstof\",\n    \"do\",\n    \"for\",\n    \"endfor\",\n    \"if\",\n    \"endif\",\n    \"ifchanged\",\n    \"endifchanged\",\n    \"ifequal\",\n    \"endifequal\",\n    \"ifnotequal\",\n    \"set\",\n    \"raw\",\n    \"endraw\",\n    \"endifnotequal\",\n    \"in\",\n    \"include\",\n    \"load\",\n    \"not\",\n    \"now\",\n    \"or\",\n    \"parsed\",\n    \"regroup\",\n    \"reversed\",\n    \"spaceless\",\n    \"call\",\n    \"endcall\",\n    \"macro\",\n    \"endmacro\",\n    \"endspaceless\",\n    \"ssi\",\n    \"templatetag\",\n    \"openblock\",\n    \"closeblock\",\n    \"openvariable\",\n    \"closevariable\",\n    \"without\",\n    \"context\",\n    \"openbrace\",\n    \"closebrace\",\n    \"opencomment\",\n    \"closecomment\",\n    \"widthratio\",\n    \"url\",\n    \"with\",\n    \"endwith\",\n    \"get_current_language\",\n    \"trans\",\n    \"endtrans\",\n    \"noop\",\n    \"blocktrans\",\n    \"endblocktrans\",\n    \"get_available_languages\",\n    \"get_current_language_bidi\",\n    \"pluralize\",\n    \"autoescape\",\n    \"endautoescape\"\n], $f4ccbc3303846fb1$var$operator = /^[+\\-*&%=<>!?|~^]/, $f4ccbc3303846fb1$var$sign = /^[:\\[\\(\\{]/, $f4ccbc3303846fb1$var$atom = [\n    \"true\",\n    \"false\"\n], $f4ccbc3303846fb1$var$number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n$f4ccbc3303846fb1$var$keywords = new RegExp(\"((\" + $f4ccbc3303846fb1$var$keywords.join(\")|(\") + \"))\\\\b\");\n$f4ccbc3303846fb1$var$atom = new RegExp(\"((\" + $f4ccbc3303846fb1$var$atom.join(\")|(\") + \"))\\\\b\");\nfunction $f4ccbc3303846fb1$var$tokenBase(stream, state) {\n    var ch = stream.peek();\n    //Comment\n    if (state.incomment) {\n        if (!stream.skipTo(\"#}\")) stream.skipToEnd();\n        else {\n            stream.eatWhile(/\\#|}/);\n            state.incomment = false;\n        }\n        return \"comment\";\n    //Tag\n    } else if (state.intag) {\n        //After operator\n        if (state.operator) {\n            state.operator = false;\n            if (stream.match($f4ccbc3303846fb1$var$atom)) return \"atom\";\n            if (stream.match($f4ccbc3303846fb1$var$number)) return \"number\";\n        }\n        //After sign\n        if (state.sign) {\n            state.sign = false;\n            if (stream.match($f4ccbc3303846fb1$var$atom)) return \"atom\";\n            if (stream.match($f4ccbc3303846fb1$var$number)) return \"number\";\n        }\n        if (state.instring) {\n            if (ch == state.instring) state.instring = false;\n            stream.next();\n            return \"string\";\n        } else if (ch == \"'\" || ch == '\"') {\n            state.instring = ch;\n            stream.next();\n            return \"string\";\n        } else if (state.inbraces > 0 && ch == \")\") {\n            stream.next();\n            state.inbraces--;\n        } else if (ch == \"(\") {\n            stream.next();\n            state.inbraces++;\n        } else if (state.inbrackets > 0 && ch == \"]\") {\n            stream.next();\n            state.inbrackets--;\n        } else if (ch == \"[\") {\n            stream.next();\n            state.inbrackets++;\n        } else if (!state.lineTag && (stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\"))) {\n            state.intag = false;\n            return \"tag\";\n        } else if (stream.match($f4ccbc3303846fb1$var$operator)) {\n            state.operator = true;\n            return \"operator\";\n        } else if (stream.match($f4ccbc3303846fb1$var$sign)) state.sign = true;\n        else {\n            if (stream.column() == 1 && state.lineTag && stream.match($f4ccbc3303846fb1$var$keywords)) //allow nospace after tag before the keyword\n            return \"keyword\";\n            if (stream.eat(\" \") || stream.sol()) {\n                if (stream.match($f4ccbc3303846fb1$var$keywords)) return \"keyword\";\n                if (stream.match($f4ccbc3303846fb1$var$atom)) return \"atom\";\n                if (stream.match($f4ccbc3303846fb1$var$number)) return \"number\";\n                if (stream.sol()) stream.next();\n            } else stream.next();\n        }\n        return \"variable\";\n    } else if (stream.eat(\"{\")) {\n        if (stream.eat(\"#\")) {\n            state.incomment = true;\n            if (!stream.skipTo(\"#}\")) stream.skipToEnd();\n            else {\n                stream.eatWhile(/\\#|}/);\n                state.incomment = false;\n            }\n            return \"comment\";\n        //Open tag\n        } else if (ch = stream.eat(/\\{|%/)) {\n            //Cache close tag\n            state.intag = ch;\n            state.inbraces = 0;\n            state.inbrackets = 0;\n            if (ch == \"{\") state.intag = \"}\";\n            stream.eat(\"-\");\n            return \"tag\";\n        }\n    //Line statements\n    } else if (stream.eat('#')) {\n        if (stream.peek() == '#') {\n            stream.skipToEnd();\n            return \"comment\";\n        } else if (!stream.eol()) {\n            state.intag = true;\n            state.lineTag = true;\n            state.inbraces = 0;\n            state.inbrackets = 0;\n            return \"tag\";\n        }\n    }\n    stream.next();\n}\nconst $f4ccbc3303846fb1$export$b4388fe1de243edc = {\n    name: \"jinja2\",\n    startState: function() {\n        return {\n            tokenize: $f4ccbc3303846fb1$var$tokenBase,\n            inbrackets: 0,\n            inbraces: 0\n        };\n    },\n    token: function(stream, state) {\n        var style = state.tokenize(stream, state);\n        if (stream.eol() && state.lineTag && !state.instring && state.inbraces == 0 && state.inbrackets == 0) {\n            //Close line statement at the EOL\n            state.intag = false;\n            state.lineTag = false;\n        }\n        return style;\n    },\n    languageData: {\n        commentTokens: {\n            block: {\n                open: \"{#\",\n                close: \"#}\",\n                line: \"##\"\n            }\n        }\n    }\n};\n\n});\n\n\n//# sourceMappingURL=jinja2.e107dbc6.js.map\n","var keywords = [\"and\", \"as\", \"block\", \"endblock\", \"by\", \"cycle\", \"debug\", \"else\", \"elif\",\n                \"extends\", \"filter\", \"endfilter\", \"firstof\", \"do\", \"for\",\n                \"endfor\", \"if\", \"endif\", \"ifchanged\", \"endifchanged\",\n                \"ifequal\", \"endifequal\", \"ifnotequal\", \"set\", \"raw\", \"endraw\",\n                \"endifnotequal\", \"in\", \"include\", \"load\", \"not\", \"now\", \"or\",\n                \"parsed\", \"regroup\", \"reversed\", \"spaceless\", \"call\", \"endcall\", \"macro\",\n                \"endmacro\", \"endspaceless\", \"ssi\", \"templatetag\", \"openblock\",\n                \"closeblock\", \"openvariable\", \"closevariable\", \"without\", \"context\",\n                \"openbrace\", \"closebrace\", \"opencomment\",\n                \"closecomment\", \"widthratio\", \"url\", \"with\", \"endwith\",\n                \"get_current_language\", \"trans\", \"endtrans\", \"noop\", \"blocktrans\",\n                \"endblocktrans\", \"get_available_languages\",\n                \"get_current_language_bidi\", \"pluralize\", \"autoescape\", \"endautoescape\"],\n    operator = /^[+\\-*&%=<>!?|~^]/,\n    sign = /^[:\\[\\(\\{]/,\n    atom = [\"true\", \"false\"],\n    number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n\nkeywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\natom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\nfunction tokenBase (stream, state) {\n  var ch = stream.peek();\n\n  //Comment\n  if (state.incomment) {\n    if(!stream.skipTo(\"#}\")) {\n      stream.skipToEnd();\n    } else {\n      stream.eatWhile(/\\#|}/);\n      state.incomment = false;\n    }\n    return \"comment\";\n    //Tag\n  } else if (state.intag) {\n    //After operator\n    if(state.operator) {\n      state.operator = false;\n      if(stream.match(atom)) {\n        return \"atom\";\n      }\n      if(stream.match(number)) {\n        return \"number\";\n      }\n    }\n    //After sign\n    if(state.sign) {\n      state.sign = false;\n      if(stream.match(atom)) {\n        return \"atom\";\n      }\n      if(stream.match(number)) {\n        return \"number\";\n      }\n    }\n\n    if(state.instring) {\n      if(ch == state.instring) {\n        state.instring = false;\n      }\n      stream.next();\n      return \"string\";\n    } else if(ch == \"'\" || ch == '\"') {\n      state.instring = ch;\n      stream.next();\n      return \"string\";\n    } else if (state.inbraces > 0 && ch ==\")\") {\n      stream.next()\n      state.inbraces--;\n    }\n    else if (ch == \"(\") {\n      stream.next()\n      state.inbraces++;\n    }\n    else if (state.inbrackets > 0 && ch ==\"]\") {\n      stream.next()\n      state.inbrackets--;\n    }\n    else if (ch == \"[\") {\n      stream.next()\n      state.inbrackets++;\n    } else if (!state.lineTag && (stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\"))) {\n      state.intag = false;\n      return \"tag\";\n    } else if(stream.match(operator)) {\n      state.operator = true;\n      return \"operator\";\n    } else if(stream.match(sign)) {\n      state.sign = true;\n    } else {\n      if (stream.column() == 1 && state.lineTag && stream.match(keywords)) {\n        //allow nospace after tag before the keyword\n        return \"keyword\";\n      }\n      if(stream.eat(\" \") || stream.sol()) {\n        if(stream.match(keywords)) {\n          return \"keyword\";\n        }\n        if(stream.match(atom)) {\n          return \"atom\";\n        }\n        if(stream.match(number)) {\n          return \"number\";\n        }\n        if(stream.sol()) {\n          stream.next();\n        }\n      } else {\n        stream.next();\n      }\n\n    }\n    return \"variable\";\n  } else if (stream.eat(\"{\")) {\n    if (stream.eat(\"#\")) {\n      state.incomment = true;\n      if(!stream.skipTo(\"#}\")) {\n        stream.skipToEnd();\n      } else {\n        stream.eatWhile(/\\#|}/);\n        state.incomment = false;\n      }\n      return \"comment\";\n      //Open tag\n    } else if (ch = stream.eat(/\\{|%/)) {\n      //Cache close tag\n      state.intag = ch;\n      state.inbraces = 0;\n      state.inbrackets = 0;\n      if(ch == \"{\") {\n        state.intag = \"}\";\n      }\n      stream.eat(\"-\");\n      return \"tag\";\n    }\n    //Line statements\n  } else if (stream.eat('#')) {\n    if (stream.peek() == '#') {\n      stream.skipToEnd();\n      return \"comment\"\n    }\n    else if (!stream.eol()) {\n      state.intag = true;\n      state.lineTag = true;\n      state.inbraces = 0;\n      state.inbrackets = 0;\n      return \"tag\";\n    }\n  }\n  stream.next();\n};\n\nexport const jinja2 = {\n  name: \"jinja2\",\n  startState: function () {\n    return {tokenize: tokenBase, inbrackets: 0, inbraces: 0};\n  },\n  token: function(stream, state) {\n    var style = state.tokenize(stream, state);\n    if (stream.eol() && state.lineTag && !state.instring && state.inbraces == 0 && state.inbrackets == 0) {\n      //Close line statement at the EOL\n      state.intag = false\n      state.lineTag = false\n    }\n    return style;\n  },\n  languageData: {\n    commentTokens: {block: {open: \"{#\", close: \"#}\", line: \"##\"}}\n  }\n};\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","Object","defineProperty","get","$f4ccbc3303846fb1$export$b4388fe1de243edc","set","s","enumerable","configurable","$f4ccbc3303846fb1$var$keywords","$f4ccbc3303846fb1$var$operator","$f4ccbc3303846fb1$var$sign","$f4ccbc3303846fb1$var$atom","$f4ccbc3303846fb1$var$number","$f4ccbc3303846fb1$var$tokenBase","stream","state","ch","peek","incomment","skipTo","eatWhile","skipToEnd","intag","operator","match","sign","instring","next","inbraces","inbrackets","lineTag","eat","column","sol","eol","RegExp","join","name","startState","tokenize","token","style","languageData","commentTokens","block","open","close","line"],"version":3,"file":"jinja2.e107dbc6.js.map"}