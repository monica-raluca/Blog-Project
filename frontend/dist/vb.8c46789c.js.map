{"mappings":"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","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/vb.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"brb25\", function(module, exports) {\n\n$parcel$export(module.exports, \"vb\", () => $853ac62f0cf14952$export$f79f130fe89588a8);\nvar $853ac62f0cf14952$var$ERRORCLASS = 'error';\nfunction $853ac62f0cf14952$var$wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n}\nvar $853ac62f0cf14952$var$singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/%&\\\\\\\\|\\\\^~<>!]\");\nvar $853ac62f0cf14952$var$singleDelimiters = new RegExp('^[\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}@,:`=;\\\\.]');\nvar $853ac62f0cf14952$var$doubleOperators = new RegExp(\"^((==)|(<>)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\\\*\\\\*))\");\nvar $853ac62f0cf14952$var$doubleDelimiters = new RegExp(\"^((\\\\+=)|(\\\\-=)|(\\\\*=)|(%=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\nvar $853ac62f0cf14952$var$tripleDelimiters = new RegExp(\"^((//=)|(>>=)|(<<=)|(\\\\*\\\\*=))\");\nvar $853ac62f0cf14952$var$identifiers = new RegExp(\"^[_A-Za-z][_A-Za-z0-9]*\");\nvar $853ac62f0cf14952$var$openingKeywords = [\n    'class',\n    'module',\n    'sub',\n    'enum',\n    'select',\n    'while',\n    'if',\n    'function',\n    'get',\n    'set',\n    'property',\n    'try',\n    'structure',\n    'synclock',\n    'using',\n    'with'\n];\nvar $853ac62f0cf14952$var$middleKeywords = [\n    'else',\n    'elseif',\n    'case',\n    'catch',\n    'finally'\n];\nvar $853ac62f0cf14952$var$endKeywords = [\n    'next',\n    'loop'\n];\nvar $853ac62f0cf14952$var$operatorKeywords = [\n    'and',\n    \"andalso\",\n    'or',\n    'orelse',\n    'xor',\n    'in',\n    'not',\n    'is',\n    'isnot',\n    'like'\n];\nvar $853ac62f0cf14952$var$wordOperators = $853ac62f0cf14952$var$wordRegexp($853ac62f0cf14952$var$operatorKeywords);\nvar $853ac62f0cf14952$var$commonKeywords = [\n    \"#const\",\n    \"#else\",\n    \"#elseif\",\n    \"#end\",\n    \"#if\",\n    \"#region\",\n    \"addhandler\",\n    \"addressof\",\n    \"alias\",\n    \"as\",\n    \"byref\",\n    \"byval\",\n    \"cbool\",\n    \"cbyte\",\n    \"cchar\",\n    \"cdate\",\n    \"cdbl\",\n    \"cdec\",\n    \"cint\",\n    \"clng\",\n    \"cobj\",\n    \"compare\",\n    \"const\",\n    \"continue\",\n    \"csbyte\",\n    \"cshort\",\n    \"csng\",\n    \"cstr\",\n    \"cuint\",\n    \"culng\",\n    \"cushort\",\n    \"declare\",\n    \"default\",\n    \"delegate\",\n    \"dim\",\n    \"directcast\",\n    \"each\",\n    \"erase\",\n    \"error\",\n    \"event\",\n    \"exit\",\n    \"explicit\",\n    \"false\",\n    \"for\",\n    \"friend\",\n    \"gettype\",\n    \"goto\",\n    \"handles\",\n    \"implements\",\n    \"imports\",\n    \"infer\",\n    \"inherits\",\n    \"interface\",\n    \"isfalse\",\n    \"istrue\",\n    \"lib\",\n    \"me\",\n    \"mod\",\n    \"mustinherit\",\n    \"mustoverride\",\n    \"my\",\n    \"mybase\",\n    \"myclass\",\n    \"namespace\",\n    \"narrowing\",\n    \"new\",\n    \"nothing\",\n    \"notinheritable\",\n    \"notoverridable\",\n    \"of\",\n    \"off\",\n    \"on\",\n    \"operator\",\n    \"option\",\n    \"optional\",\n    \"out\",\n    \"overloads\",\n    \"overridable\",\n    \"overrides\",\n    \"paramarray\",\n    \"partial\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"raiseevent\",\n    \"readonly\",\n    \"redim\",\n    \"removehandler\",\n    \"resume\",\n    \"return\",\n    \"shadows\",\n    \"shared\",\n    \"static\",\n    \"step\",\n    \"stop\",\n    \"strict\",\n    \"then\",\n    \"throw\",\n    \"to\",\n    \"true\",\n    \"trycast\",\n    \"typeof\",\n    \"until\",\n    \"until\",\n    \"when\",\n    \"widening\",\n    \"withevents\",\n    \"writeonly\"\n];\nvar $853ac62f0cf14952$var$commontypes = [\n    'object',\n    'boolean',\n    'char',\n    'string',\n    'byte',\n    'sbyte',\n    'short',\n    'ushort',\n    'int16',\n    'uint16',\n    'integer',\n    'uinteger',\n    'int32',\n    'uint32',\n    'long',\n    'ulong',\n    'int64',\n    'uint64',\n    'decimal',\n    'single',\n    'double',\n    'float',\n    'date',\n    'datetime',\n    'intptr',\n    'uintptr'\n];\nvar $853ac62f0cf14952$var$keywords = $853ac62f0cf14952$var$wordRegexp($853ac62f0cf14952$var$commonKeywords);\nvar $853ac62f0cf14952$var$types = $853ac62f0cf14952$var$wordRegexp($853ac62f0cf14952$var$commontypes);\nvar $853ac62f0cf14952$var$stringPrefixes = '\"';\nvar $853ac62f0cf14952$var$opening = $853ac62f0cf14952$var$wordRegexp($853ac62f0cf14952$var$openingKeywords);\nvar $853ac62f0cf14952$var$middle = $853ac62f0cf14952$var$wordRegexp($853ac62f0cf14952$var$middleKeywords);\nvar $853ac62f0cf14952$var$closing = $853ac62f0cf14952$var$wordRegexp($853ac62f0cf14952$var$endKeywords);\nvar $853ac62f0cf14952$var$doubleClosing = $853ac62f0cf14952$var$wordRegexp([\n    'end'\n]);\nvar $853ac62f0cf14952$var$doOpening = $853ac62f0cf14952$var$wordRegexp([\n    'do'\n]);\nvar $853ac62f0cf14952$var$indentInfo = null;\nfunction $853ac62f0cf14952$var$indent(_stream, state) {\n    state.currentIndent++;\n}\nfunction $853ac62f0cf14952$var$dedent(_stream, state) {\n    state.currentIndent--;\n}\n// tokenizers\nfunction $853ac62f0cf14952$var$tokenBase(stream, state) {\n    if (stream.eatSpace()) return null;\n    var ch = stream.peek();\n    // Handle Comments\n    if (ch === \"'\") {\n        stream.skipToEnd();\n        return 'comment';\n    }\n    // Handle Number Literals\n    if (stream.match(/^((&H)|(&O))?[0-9\\.a-f]/i, false)) {\n        var floatLiteral = false;\n        // Floats\n        if (stream.match(/^\\d*\\.\\d+F?/i)) floatLiteral = true;\n        else if (stream.match(/^\\d+\\.\\d*F?/)) floatLiteral = true;\n        else if (stream.match(/^\\.\\d+F?/)) floatLiteral = true;\n        if (floatLiteral) {\n            // Float literals may be \"imaginary\"\n            stream.eat(/J/i);\n            return 'number';\n        }\n        // Integers\n        var intLiteral = false;\n        // Hex\n        if (stream.match(/^&H[0-9a-f]+/i)) intLiteral = true;\n        else if (stream.match(/^&O[0-7]+/i)) intLiteral = true;\n        else if (stream.match(/^[1-9]\\d*F?/)) {\n            // Decimal literals may be \"imaginary\"\n            stream.eat(/J/i);\n            // TODO - Can you have imaginary longs?\n            intLiteral = true;\n        } else if (stream.match(/^0(?![\\dx])/i)) intLiteral = true;\n        if (intLiteral) {\n            // Integer literals may be \"long\"\n            stream.eat(/L/i);\n            return 'number';\n        }\n    }\n    // Handle Strings\n    if (stream.match($853ac62f0cf14952$var$stringPrefixes)) {\n        state.tokenize = $853ac62f0cf14952$var$tokenStringFactory(stream.current());\n        return state.tokenize(stream, state);\n    }\n    // Handle operators and Delimiters\n    if (stream.match($853ac62f0cf14952$var$tripleDelimiters) || stream.match($853ac62f0cf14952$var$doubleDelimiters)) return null;\n    if (stream.match($853ac62f0cf14952$var$doubleOperators) || stream.match($853ac62f0cf14952$var$singleOperators) || stream.match($853ac62f0cf14952$var$wordOperators)) return 'operator';\n    if (stream.match($853ac62f0cf14952$var$singleDelimiters)) return null;\n    if (stream.match($853ac62f0cf14952$var$doOpening)) {\n        $853ac62f0cf14952$var$indent(stream, state);\n        state.doInCurrentLine = true;\n        return 'keyword';\n    }\n    if (stream.match($853ac62f0cf14952$var$opening)) {\n        if (!state.doInCurrentLine) $853ac62f0cf14952$var$indent(stream, state);\n        else state.doInCurrentLine = false;\n        return 'keyword';\n    }\n    if (stream.match($853ac62f0cf14952$var$middle)) return 'keyword';\n    if (stream.match($853ac62f0cf14952$var$doubleClosing)) {\n        $853ac62f0cf14952$var$dedent(stream, state);\n        $853ac62f0cf14952$var$dedent(stream, state);\n        return 'keyword';\n    }\n    if (stream.match($853ac62f0cf14952$var$closing)) {\n        $853ac62f0cf14952$var$dedent(stream, state);\n        return 'keyword';\n    }\n    if (stream.match($853ac62f0cf14952$var$types)) return 'keyword';\n    if (stream.match($853ac62f0cf14952$var$keywords)) return 'keyword';\n    if (stream.match($853ac62f0cf14952$var$identifiers)) return 'variable';\n    // Handle non-detected items\n    stream.next();\n    return $853ac62f0cf14952$var$ERRORCLASS;\n}\nfunction $853ac62f0cf14952$var$tokenStringFactory(delimiter) {\n    var singleline = delimiter.length == 1;\n    var OUTCLASS = 'string';\n    return function(stream, state) {\n        while(!stream.eol()){\n            stream.eatWhile(/[^'\"]/);\n            if (stream.match(delimiter)) {\n                state.tokenize = $853ac62f0cf14952$var$tokenBase;\n                return OUTCLASS;\n            } else stream.eat(/['\"]/);\n        }\n        if (singleline) state.tokenize = $853ac62f0cf14952$var$tokenBase;\n        return OUTCLASS;\n    };\n}\nfunction $853ac62f0cf14952$var$tokenLexer(stream, state) {\n    var style = state.tokenize(stream, state);\n    var current = stream.current();\n    // Handle '.' connected identifiers\n    if (current === '.') {\n        style = state.tokenize(stream, state);\n        if (style === 'variable') return 'variable';\n        else return $853ac62f0cf14952$var$ERRORCLASS;\n    }\n    var delimiter_index = '[({'.indexOf(current);\n    if (delimiter_index !== -1) $853ac62f0cf14952$var$indent(stream, state);\n    if ($853ac62f0cf14952$var$indentInfo === 'dedent') {\n        if ($853ac62f0cf14952$var$dedent(stream, state)) return $853ac62f0cf14952$var$ERRORCLASS;\n    }\n    delimiter_index = '])}'.indexOf(current);\n    if (delimiter_index !== -1) {\n        if ($853ac62f0cf14952$var$dedent(stream, state)) return $853ac62f0cf14952$var$ERRORCLASS;\n    }\n    return style;\n}\nconst $853ac62f0cf14952$export$f79f130fe89588a8 = {\n    name: \"vb\",\n    startState: function() {\n        return {\n            tokenize: $853ac62f0cf14952$var$tokenBase,\n            lastToken: null,\n            currentIndent: 0,\n            nextLineIndent: 0,\n            doInCurrentLine: false\n        };\n    },\n    token: function(stream, state) {\n        if (stream.sol()) {\n            state.currentIndent += state.nextLineIndent;\n            state.nextLineIndent = 0;\n            state.doInCurrentLine = 0;\n        }\n        var style = $853ac62f0cf14952$var$tokenLexer(stream, state);\n        state.lastToken = {\n            style: style,\n            content: stream.current()\n        };\n        return style;\n    },\n    indent: function(state, textAfter, cx) {\n        var trueText = textAfter.replace(/^\\s+|\\s+$/g, '');\n        if (trueText.match($853ac62f0cf14952$var$closing) || trueText.match($853ac62f0cf14952$var$doubleClosing) || trueText.match($853ac62f0cf14952$var$middle)) return cx.unit * (state.currentIndent - 1);\n        if (state.currentIndent < 0) return 0;\n        return state.currentIndent * cx.unit;\n    },\n    languageData: {\n        closeBrackets: {\n            brackets: [\n                \"(\",\n                \"[\",\n                \"{\",\n                '\"'\n            ]\n        },\n        commentTokens: {\n            line: \"'\"\n        },\n        autocomplete: $853ac62f0cf14952$var$openingKeywords.concat($853ac62f0cf14952$var$middleKeywords).concat($853ac62f0cf14952$var$endKeywords).concat($853ac62f0cf14952$var$operatorKeywords).concat($853ac62f0cf14952$var$commonKeywords).concat($853ac62f0cf14952$var$commontypes)\n    }\n};\n\n});\n\n\n//# sourceMappingURL=vb.8c46789c.js.map\n","var ERRORCLASS = 'error';\n\nfunction wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n}\n\nvar singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/%&\\\\\\\\|\\\\^~<>!]\");\nvar singleDelimiters = new RegExp('^[\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}@,:`=;\\\\.]');\nvar doubleOperators = new RegExp(\"^((==)|(<>)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\\\*\\\\*))\");\nvar doubleDelimiters = new RegExp(\"^((\\\\+=)|(\\\\-=)|(\\\\*=)|(%=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\nvar tripleDelimiters = new RegExp(\"^((//=)|(>>=)|(<<=)|(\\\\*\\\\*=))\");\nvar identifiers = new RegExp(\"^[_A-Za-z][_A-Za-z0-9]*\");\n\nvar openingKeywords = ['class','module', 'sub','enum','select','while','if','function', 'get','set','property', 'try', 'structure', 'synclock', 'using', 'with'];\nvar middleKeywords = ['else','elseif','case', 'catch', 'finally'];\nvar endKeywords = ['next','loop'];\n\nvar operatorKeywords = ['and', \"andalso\", 'or', 'orelse', 'xor', 'in', 'not', 'is', 'isnot', 'like'];\nvar wordOperators = wordRegexp(operatorKeywords);\n\nvar commonKeywords = [\"#const\", \"#else\", \"#elseif\", \"#end\", \"#if\", \"#region\", \"addhandler\", \"addressof\", \"alias\", \"as\", \"byref\", \"byval\", \"cbool\", \"cbyte\", \"cchar\", \"cdate\", \"cdbl\", \"cdec\", \"cint\", \"clng\", \"cobj\", \"compare\", \"const\", \"continue\", \"csbyte\", \"cshort\", \"csng\", \"cstr\", \"cuint\", \"culng\", \"cushort\", \"declare\", \"default\", \"delegate\", \"dim\", \"directcast\", \"each\", \"erase\", \"error\", \"event\", \"exit\", \"explicit\", \"false\", \"for\", \"friend\", \"gettype\", \"goto\", \"handles\", \"implements\", \"imports\", \"infer\", \"inherits\", \"interface\", \"isfalse\", \"istrue\", \"lib\", \"me\", \"mod\", \"mustinherit\", \"mustoverride\", \"my\", \"mybase\", \"myclass\", \"namespace\", \"narrowing\", \"new\", \"nothing\", \"notinheritable\", \"notoverridable\", \"of\", \"off\", \"on\", \"operator\", \"option\", \"optional\", \"out\", \"overloads\", \"overridable\", \"overrides\", \"paramarray\", \"partial\", \"private\", \"protected\", \"public\", \"raiseevent\", \"readonly\", \"redim\", \"removehandler\", \"resume\", \"return\", \"shadows\", \"shared\", \"static\", \"step\", \"stop\", \"strict\", \"then\", \"throw\", \"to\", \"true\", \"trycast\", \"typeof\", \"until\", \"until\", \"when\", \"widening\", \"withevents\", \"writeonly\"];\n\nvar commontypes = ['object', 'boolean', 'char', 'string', 'byte', 'sbyte', 'short', 'ushort', 'int16', 'uint16', 'integer', 'uinteger', 'int32', 'uint32', 'long', 'ulong', 'int64', 'uint64', 'decimal', 'single', 'double', 'float', 'date', 'datetime', 'intptr', 'uintptr'];\n\nvar keywords = wordRegexp(commonKeywords);\nvar types = wordRegexp(commontypes);\nvar stringPrefixes = '\"';\n\nvar opening = wordRegexp(openingKeywords);\nvar middle = wordRegexp(middleKeywords);\nvar closing = wordRegexp(endKeywords);\nvar doubleClosing = wordRegexp(['end']);\nvar doOpening = wordRegexp(['do']);\n\nvar indentInfo = null;\n\nfunction indent(_stream, state) {\n  state.currentIndent++;\n}\n\nfunction dedent(_stream, state) {\n  state.currentIndent--;\n}\n// tokenizers\nfunction tokenBase(stream, state) {\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  var ch = stream.peek();\n\n  // Handle Comments\n  if (ch === \"'\") {\n    stream.skipToEnd();\n    return 'comment';\n  }\n\n\n  // Handle Number Literals\n  if (stream.match(/^((&H)|(&O))?[0-9\\.a-f]/i, false)) {\n    var floatLiteral = false;\n    // Floats\n    if (stream.match(/^\\d*\\.\\d+F?/i)) { floatLiteral = true; }\n    else if (stream.match(/^\\d+\\.\\d*F?/)) { floatLiteral = true; }\n    else if (stream.match(/^\\.\\d+F?/)) { floatLiteral = true; }\n\n    if (floatLiteral) {\n      // Float literals may be \"imaginary\"\n      stream.eat(/J/i);\n      return 'number';\n    }\n    // Integers\n    var intLiteral = false;\n    // Hex\n    if (stream.match(/^&H[0-9a-f]+/i)) { intLiteral = true; }\n    // Octal\n    else if (stream.match(/^&O[0-7]+/i)) { intLiteral = true; }\n    // Decimal\n    else if (stream.match(/^[1-9]\\d*F?/)) {\n      // Decimal literals may be \"imaginary\"\n      stream.eat(/J/i);\n      // TODO - Can you have imaginary longs?\n      intLiteral = true;\n    }\n    // Zero by itself with no other piece of number.\n    else if (stream.match(/^0(?![\\dx])/i)) { intLiteral = true; }\n    if (intLiteral) {\n      // Integer literals may be \"long\"\n      stream.eat(/L/i);\n      return 'number';\n    }\n  }\n\n  // Handle Strings\n  if (stream.match(stringPrefixes)) {\n    state.tokenize = tokenStringFactory(stream.current());\n    return state.tokenize(stream, state);\n  }\n\n  // Handle operators and Delimiters\n  if (stream.match(tripleDelimiters) || stream.match(doubleDelimiters)) {\n    return null;\n  }\n  if (stream.match(doubleOperators)\n      || stream.match(singleOperators)\n      || stream.match(wordOperators)) {\n    return 'operator';\n  }\n  if (stream.match(singleDelimiters)) {\n    return null;\n  }\n  if (stream.match(doOpening)) {\n    indent(stream,state);\n    state.doInCurrentLine = true;\n    return 'keyword';\n  }\n  if (stream.match(opening)) {\n    if (! state.doInCurrentLine)\n      indent(stream,state);\n    else\n      state.doInCurrentLine = false;\n    return 'keyword';\n  }\n  if (stream.match(middle)) {\n    return 'keyword';\n  }\n\n  if (stream.match(doubleClosing)) {\n    dedent(stream,state);\n    dedent(stream,state);\n    return 'keyword';\n  }\n  if (stream.match(closing)) {\n    dedent(stream,state);\n    return 'keyword';\n  }\n\n  if (stream.match(types)) {\n    return 'keyword';\n  }\n\n  if (stream.match(keywords)) {\n    return 'keyword';\n  }\n\n  if (stream.match(identifiers)) {\n    return 'variable';\n  }\n\n  // Handle non-detected items\n  stream.next();\n  return ERRORCLASS;\n}\n\nfunction tokenStringFactory(delimiter) {\n  var singleline = delimiter.length == 1;\n  var OUTCLASS = 'string';\n\n  return function(stream, state) {\n    while (!stream.eol()) {\n      stream.eatWhile(/[^'\"]/);\n      if (stream.match(delimiter)) {\n        state.tokenize = tokenBase;\n        return OUTCLASS;\n      } else {\n        stream.eat(/['\"]/);\n      }\n    }\n    if (singleline) {\n      state.tokenize = tokenBase;\n    }\n    return OUTCLASS;\n  };\n}\n\n\nfunction tokenLexer(stream, state) {\n  var style = state.tokenize(stream, state);\n  var current = stream.current();\n\n  // Handle '.' connected identifiers\n  if (current === '.') {\n    style = state.tokenize(stream, state);\n    if (style === 'variable') {\n      return 'variable';\n    } else {\n      return ERRORCLASS;\n    }\n  }\n\n\n  var delimiter_index = '[({'.indexOf(current);\n  if (delimiter_index !== -1) {\n    indent(stream, state );\n  }\n  if (indentInfo === 'dedent') {\n    if (dedent(stream, state)) {\n      return ERRORCLASS;\n    }\n  }\n  delimiter_index = '])}'.indexOf(current);\n  if (delimiter_index !== -1) {\n    if (dedent(stream, state)) {\n      return ERRORCLASS;\n    }\n  }\n\n  return style;\n}\n\nexport const vb = {\n  name: \"vb\",\n\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      lastToken: null,\n      currentIndent: 0,\n      nextLineIndent: 0,\n      doInCurrentLine: false\n\n\n    };\n  },\n\n  token: function(stream, state) {\n    if (stream.sol()) {\n      state.currentIndent += state.nextLineIndent;\n      state.nextLineIndent = 0;\n      state.doInCurrentLine = 0;\n    }\n    var style = tokenLexer(stream, state);\n\n    state.lastToken = {style:style, content: stream.current()};\n\n\n\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    var trueText = textAfter.replace(/^\\s+|\\s+$/g, '') ;\n    if (trueText.match(closing) || trueText.match(doubleClosing) || trueText.match(middle)) return cx.unit*(state.currentIndent-1);\n    if(state.currentIndent < 0) return 0;\n    return state.currentIndent * cx.unit;\n  },\n\n  languageData: {\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", '\"']},\n    commentTokens: {line: \"'\"},\n    autocomplete: openingKeywords.concat(middleKeywords).concat(endKeywords)\n      .concat(operatorKeywords).concat(commonKeywords).concat(commontypes)\n  }\n};\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","e","Object","defineProperty","get","$853ac62f0cf14952$export$f79f130fe89588a8","set","s","enumerable","configurable","$853ac62f0cf14952$var$ERRORCLASS","$853ac62f0cf14952$var$wordRegexp","words","RegExp","join","$853ac62f0cf14952$var$singleOperators","$853ac62f0cf14952$var$singleDelimiters","$853ac62f0cf14952$var$doubleOperators","$853ac62f0cf14952$var$doubleDelimiters","$853ac62f0cf14952$var$tripleDelimiters","$853ac62f0cf14952$var$identifiers","$853ac62f0cf14952$var$openingKeywords","$853ac62f0cf14952$var$middleKeywords","$853ac62f0cf14952$var$endKeywords","$853ac62f0cf14952$var$operatorKeywords","$853ac62f0cf14952$var$wordOperators","$853ac62f0cf14952$var$commonKeywords","$853ac62f0cf14952$var$commontypes","$853ac62f0cf14952$var$keywords","$853ac62f0cf14952$var$types","$853ac62f0cf14952$var$opening","$853ac62f0cf14952$var$middle","$853ac62f0cf14952$var$closing","$853ac62f0cf14952$var$doubleClosing","$853ac62f0cf14952$var$doOpening","$853ac62f0cf14952$var$indent","_stream","state","currentIndent","$853ac62f0cf14952$var$dedent","$853ac62f0cf14952$var$tokenBase","stream","eatSpace","ch","peek","skipToEnd","match","delimiter","singleline","OUTCLASS","floatLiteral","eat","intLiteral","current","length","tokenize","eol","eatWhile","doInCurrentLine","next","name","startState","lastToken","nextLineIndent","token","sol","style","$853ac62f0cf14952$var$tokenLexer","delimiter_index","indexOf","content","indent","textAfter","cx","trueText","replace","unit","languageData","closeBrackets","brackets","commentTokens","line","autocomplete","concat"],"version":3,"file":"vb.8c46789c.js.map"}