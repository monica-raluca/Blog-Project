{"mappings":"A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,ECAA,SAAS,EAAM,CAAG,EAEhB,IAAK,IADD,EAAM,CAAC,EAAG,EAAQ,EAAI,KAAK,CAAC,KACvB,EAAI,EAAG,EAAI,EAAM,MAAM,CAAE,EAAE,EAAG,CAAG,CAAC,CAAK,CAAC,EAAE,CAAC,CAAG,CAAA,EACvD,OAAO,CACT,C,E,E,O,C,O,c,C,E,M,C,I,I,E,I,K,E,W,C,E,a,C,C,GAGA,I,EAAI,EAAY,w3BAYZ,EAAY,mXAOZ,EAAS,mEAET,EAAW,EAAM,GAAY,EAAW,EAAM,GAAY,EAAQ,EAAM,GAExE,EAAiB,oBAErB,SAAS,EAAM,CAAM,CAAE,CAAK,CAAE,CAAC,EAE7B,OADA,EAAM,QAAQ,CAAG,EACV,EAAE,EAAQ,EACnB,CAEA,SAAS,EAAa,CAAM,CAAE,CAAK,EAGjC,IAFA,IACI,EADA,EAAQ,CAAA,EAEN,EAAK,EAAO,IAAI,IAAI,CACxB,GAAG,AAAM,KAAN,GAAa,EAAO,CACrB,EAAM,QAAQ,CAAG,EACjB,KACF,CACA,EAAS,AAAM,KAAN,CACX,CACA,MAAO,SACT,CAkBA,SAAS,EAAU,CAAM,CAAE,CAAK,EAC9B,IAAI,EAAK,EAAO,IAAI,GAGpB,GAAI,AAAM,KAAN,GAAa,AAAM,KAAN,EACf,OAAO,EAAM,EAAQ,EApBhB,SAAS,CAAM,CAAE,CAAK,EAE3B,IADA,IAAqB,EAAjB,EAAU,CAAA,EAAa,EAAM,CAAA,EAC1B,AAAyB,MAAzB,CAAA,EAAO,EAAO,IAAI,EAAA,GAAa,CACpC,GAAI,GAiBkC,GAjBjB,CAAC,EAAS,CAC7B,EAAM,CAAA,EAAM,KACd,CACA,EAAU,CAAC,GAAW,AAAQ,MAAR,CACxB,CAGA,MAFI,CAAA,GAAO,CAAC,CAAA,GACV,CAAA,EAAM,QAAQ,CAAG,CADnB,EAEO,OACT,GAWK,GAAG,mBAAmB,IAAI,CAAC,GAC9B,OAAO,KAEJ,GAAG,KAAK,IAAI,CAAC,GAEhB,OADA,EAAO,QAAQ,CAAC,UACT,SAGJ,GAAI,AAAM,KAAN,EACP,GAAI,EAAO,GAAG,CAAC,KACb,OAAO,EAAM,EAAQ,EAAO,QAI5B,OADA,EAAO,QAAQ,CAAC,GACT,WAIN,GAAI,AAAI,KAAJ,EACP,GAAG,EAAO,GAAG,CAAC,KAEZ,OADA,EAAO,SAAS,GACT,eAIP,OADA,EAAO,QAAQ,CAAC,GACT,gBAIN,GAAI,EAAe,IAAI,CAAC,GAE3B,OADA,EAAO,QAAQ,CAAC,GACT,sBAMP,CAFA,EAAO,QAAQ,CAAC,WAEZ,GAAY,EAAS,oBAAoB,CAAC,EAAO,OAAO,GAAG,WAAW,KAEpE,CAAC,EAAO,GAAG,CAAC,MAAQ,CAAC,EAAO,GAAG,CAAC,MAC3B,UAGP,GAAY,EAAS,oBAAoB,CAAC,EAAO,OAAO,GAAG,WAAW,IACjE,UAEL,GAAS,EAAM,oBAAoB,CAAC,EAAO,OAAO,GAAG,WAAW,IAC3D,OAEF,UAEX,CAGO,IAAM,EAAM,CACjB,KAAM,MAEN,WAAY,WACV,MAAO,CACL,SAAU,EACV,YAAa,CAAA,CACf,CACF,EAEA,MAAO,SAAS,CAAM,CAAE,CAAK,SAC3B,AAAG,EAAO,QAAQ,GAAW,KACjB,EAAM,QAAQ,CAAC,EAAQ,EAErC,EAEA,aAAc,CACZ,aAAe,AAAA,CAAA,EAAY,EAAS,CAAA,EAAW,KAAK,CAAC,IACvD,CACF,C","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/pig.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"4by71\", function(module, exports) {\n\n$parcel$export(module.exports, \"pig\", () => $30c2a67eb1361f18$export$49538f2c2aa78cac);\nfunction $30c2a67eb1361f18$var$words(str) {\n    var obj = {}, words = str.split(\" \");\n    for(var i = 0; i < words.length; ++i)obj[words[i]] = true;\n    return obj;\n}\n// builtin funcs taken from trunk revision 1303237\nvar $30c2a67eb1361f18$var$pBuiltins = \"ABS ACOS ARITY ASIN ATAN AVG BAGSIZE BINSTORAGE BLOOM BUILDBLOOM CBRT CEIL CONCAT COR COS COSH COUNT COUNT_STAR COV CONSTANTSIZE CUBEDIMENSIONS DIFF DISTINCT DOUBLEABS DOUBLEAVG DOUBLEBASE DOUBLEMAX DOUBLEMIN DOUBLEROUND DOUBLESUM EXP FLOOR FLOATABS FLOATAVG FLOATMAX FLOATMIN FLOATROUND FLOATSUM GENERICINVOKER INDEXOF INTABS INTAVG INTMAX INTMIN INTSUM INVOKEFORDOUBLE INVOKEFORFLOAT INVOKEFORINT INVOKEFORLONG INVOKEFORSTRING INVOKER ISEMPTY JSONLOADER JSONMETADATA JSONSTORAGE LAST_INDEX_OF LCFIRST LOG LOG10 LOWER LONGABS LONGAVG LONGMAX LONGMIN LONGSUM MAX MIN MAPSIZE MONITOREDUDF NONDETERMINISTIC OUTPUTSCHEMA  PIGSTORAGE PIGSTREAMING RANDOM REGEX_EXTRACT REGEX_EXTRACT_ALL REPLACE ROUND SIN SINH SIZE SQRT STRSPLIT SUBSTRING SUM STRINGCONCAT STRINGMAX STRINGMIN STRINGSIZE TAN TANH TOBAG TOKENIZE TOMAP TOP TOTUPLE TRIM TEXTLOADER TUPLESIZE UCFIRST UPPER UTF8STORAGECONVERTER \";\n// taken from QueryLexer.g\nvar $30c2a67eb1361f18$var$pKeywords = \"VOID IMPORT RETURNS DEFINE LOAD FILTER FOREACH ORDER CUBE DISTINCT COGROUP JOIN CROSS UNION SPLIT INTO IF OTHERWISE ALL AS BY USING INNER OUTER ONSCHEMA PARALLEL PARTITION GROUP AND OR NOT GENERATE FLATTEN ASC DESC IS STREAM THROUGH STORE MAPREDUCE SHIP CACHE INPUT OUTPUT STDERROR STDIN STDOUT LIMIT SAMPLE LEFT RIGHT FULL EQ GT LT GTE LTE NEQ MATCHES TRUE FALSE DUMP\";\n// data types\nvar $30c2a67eb1361f18$var$pTypes = \"BOOLEAN INT LONG FLOAT DOUBLE CHARARRAY BYTEARRAY BAG TUPLE MAP \";\nvar $30c2a67eb1361f18$var$builtins = $30c2a67eb1361f18$var$words($30c2a67eb1361f18$var$pBuiltins), $30c2a67eb1361f18$var$keywords = $30c2a67eb1361f18$var$words($30c2a67eb1361f18$var$pKeywords), $30c2a67eb1361f18$var$types = $30c2a67eb1361f18$var$words($30c2a67eb1361f18$var$pTypes);\nvar $30c2a67eb1361f18$var$isOperatorChar = /[*+\\-%<>=&?:\\/!|]/;\nfunction $30c2a67eb1361f18$var$chain(stream, state, f) {\n    state.tokenize = f;\n    return f(stream, state);\n}\nfunction $30c2a67eb1361f18$var$tokenComment(stream, state) {\n    var isEnd = false;\n    var ch;\n    while(ch = stream.next()){\n        if (ch == \"/\" && isEnd) {\n            state.tokenize = $30c2a67eb1361f18$var$tokenBase;\n            break;\n        }\n        isEnd = ch == \"*\";\n    }\n    return \"comment\";\n}\nfunction $30c2a67eb1361f18$var$tokenString(quote) {\n    return function(stream, state) {\n        var escaped = false, next, end = false;\n        while((next = stream.next()) != null){\n            if (next == quote && !escaped) {\n                end = true;\n                break;\n            }\n            escaped = !escaped && next == \"\\\\\";\n        }\n        if (end || !escaped) state.tokenize = $30c2a67eb1361f18$var$tokenBase;\n        return \"error\";\n    };\n}\nfunction $30c2a67eb1361f18$var$tokenBase(stream, state) {\n    var ch = stream.next();\n    // is a start of string?\n    if (ch == '\"' || ch == \"'\") return $30c2a67eb1361f18$var$chain(stream, state, $30c2a67eb1361f18$var$tokenString(ch));\n    else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) return null;\n    else if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n    } else if (ch == \"/\") {\n        if (stream.eat(\"*\")) return $30c2a67eb1361f18$var$chain(stream, state, $30c2a67eb1361f18$var$tokenComment);\n        else {\n            stream.eatWhile($30c2a67eb1361f18$var$isOperatorChar);\n            return \"operator\";\n        }\n    } else if (ch == \"-\") {\n        if (stream.eat(\"-\")) {\n            stream.skipToEnd();\n            return \"comment\";\n        } else {\n            stream.eatWhile($30c2a67eb1361f18$var$isOperatorChar);\n            return \"operator\";\n        }\n    } else if ($30c2a67eb1361f18$var$isOperatorChar.test(ch)) {\n        stream.eatWhile($30c2a67eb1361f18$var$isOperatorChar);\n        return \"operator\";\n    } else {\n        // get the while word\n        stream.eatWhile(/[\\w\\$_]/);\n        // is it one of the listed keywords?\n        if ($30c2a67eb1361f18$var$keywords && $30c2a67eb1361f18$var$keywords.propertyIsEnumerable(stream.current().toUpperCase())) {\n            //keywords can be used as variables like flatten(group), group.$0 etc..\n            if (!stream.eat(\")\") && !stream.eat(\".\")) return \"keyword\";\n        }\n        // is it one of the builtin functions?\n        if ($30c2a67eb1361f18$var$builtins && $30c2a67eb1361f18$var$builtins.propertyIsEnumerable(stream.current().toUpperCase())) return \"builtin\";\n        // is it one of the listed types?\n        if ($30c2a67eb1361f18$var$types && $30c2a67eb1361f18$var$types.propertyIsEnumerable(stream.current().toUpperCase())) return \"type\";\n        // default is a 'variable'\n        return \"variable\";\n    }\n}\nconst $30c2a67eb1361f18$export$49538f2c2aa78cac = {\n    name: \"pig\",\n    startState: function() {\n        return {\n            tokenize: $30c2a67eb1361f18$var$tokenBase,\n            startOfLine: true\n        };\n    },\n    token: function(stream, state) {\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        return style;\n    },\n    languageData: {\n        autocomplete: ($30c2a67eb1361f18$var$pBuiltins + $30c2a67eb1361f18$var$pTypes + $30c2a67eb1361f18$var$pKeywords).split(\" \")\n    }\n};\n\n});\n\n\n//# sourceMappingURL=pig.bc2a3e36.js.map\n","function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\n// builtin funcs taken from trunk revision 1303237\nvar pBuiltins = \"ABS ACOS ARITY ASIN ATAN AVG BAGSIZE BINSTORAGE BLOOM BUILDBLOOM CBRT CEIL \"\n    + \"CONCAT COR COS COSH COUNT COUNT_STAR COV CONSTANTSIZE CUBEDIMENSIONS DIFF DISTINCT DOUBLEABS \"\n    + \"DOUBLEAVG DOUBLEBASE DOUBLEMAX DOUBLEMIN DOUBLEROUND DOUBLESUM EXP FLOOR FLOATABS FLOATAVG \"\n    + \"FLOATMAX FLOATMIN FLOATROUND FLOATSUM GENERICINVOKER INDEXOF INTABS INTAVG INTMAX INTMIN \"\n    + \"INTSUM INVOKEFORDOUBLE INVOKEFORFLOAT INVOKEFORINT INVOKEFORLONG INVOKEFORSTRING INVOKER \"\n    + \"ISEMPTY JSONLOADER JSONMETADATA JSONSTORAGE LAST_INDEX_OF LCFIRST LOG LOG10 LOWER LONGABS \"\n    + \"LONGAVG LONGMAX LONGMIN LONGSUM MAX MIN MAPSIZE MONITOREDUDF NONDETERMINISTIC OUTPUTSCHEMA  \"\n    + \"PIGSTORAGE PIGSTREAMING RANDOM REGEX_EXTRACT REGEX_EXTRACT_ALL REPLACE ROUND SIN SINH SIZE \"\n    + \"SQRT STRSPLIT SUBSTRING SUM STRINGCONCAT STRINGMAX STRINGMIN STRINGSIZE TAN TANH TOBAG \"\n    + \"TOKENIZE TOMAP TOP TOTUPLE TRIM TEXTLOADER TUPLESIZE UCFIRST UPPER UTF8STORAGECONVERTER \";\n\n// taken from QueryLexer.g\nvar pKeywords = \"VOID IMPORT RETURNS DEFINE LOAD FILTER FOREACH ORDER CUBE DISTINCT COGROUP \"\n    + \"JOIN CROSS UNION SPLIT INTO IF OTHERWISE ALL AS BY USING INNER OUTER ONSCHEMA PARALLEL \"\n    + \"PARTITION GROUP AND OR NOT GENERATE FLATTEN ASC DESC IS STREAM THROUGH STORE MAPREDUCE \"\n    + \"SHIP CACHE INPUT OUTPUT STDERROR STDIN STDOUT LIMIT SAMPLE LEFT RIGHT FULL EQ GT LT GTE LTE \"\n    + \"NEQ MATCHES TRUE FALSE DUMP\";\n\n// data types\nvar pTypes = \"BOOLEAN INT LONG FLOAT DOUBLE CHARARRAY BYTEARRAY BAG TUPLE MAP \";\n\nvar builtins = words(pBuiltins), keywords = words(pKeywords), types = words(pTypes)\n\nvar isOperatorChar = /[*+\\-%<>=&?:\\/!|]/;\n\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\n\nfunction tokenComment(stream, state) {\n  var isEnd = false;\n  var ch;\n  while(ch = stream.next()) {\n    if(ch == \"/\" && isEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    isEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true; break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !escaped)\n      state.tokenize = tokenBase;\n    return \"error\";\n  };\n}\n\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n\n  // is a start of string?\n  if (ch == '\"' || ch == \"'\")\n    return chain(stream, state, tokenString(ch));\n  // is it one of the special chars\n  else if(/[\\[\\]{}\\(\\),;\\.]/.test(ch))\n    return null;\n  // is it a number?\n  else if(/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  // multi line comment or operator\n  else if (ch == \"/\") {\n    if (stream.eat(\"*\")) {\n      return chain(stream, state, tokenComment);\n    }\n    else {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n  }\n  // single line comment or operator\n  else if (ch==\"-\") {\n    if(stream.eat(\"-\")){\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    else {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n  }\n  // is it an operator\n  else if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  else {\n    // get the while word\n    stream.eatWhile(/[\\w\\$_]/);\n    // is it one of the listed keywords?\n    if (keywords && keywords.propertyIsEnumerable(stream.current().toUpperCase())) {\n      //keywords can be used as variables like flatten(group), group.$0 etc..\n      if (!stream.eat(\")\") && !stream.eat(\".\"))\n        return \"keyword\";\n    }\n    // is it one of the builtin functions?\n    if (builtins && builtins.propertyIsEnumerable(stream.current().toUpperCase()))\n      return \"builtin\";\n    // is it one of the listed types?\n    if (types && types.propertyIsEnumerable(stream.current().toUpperCase()))\n      return \"type\";\n    // default is a 'variable'\n    return \"variable\";\n  }\n}\n\n// Interface\nexport const pig = {\n  name: \"pig\",\n\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      startOfLine: true\n    };\n  },\n\n  token: function(stream, state) {\n    if(stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n    return style;\n  },\n\n  languageData: {\n    autocomplete: (pBuiltins + pTypes + pKeywords).split(\" \")\n  }\n};\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","$30c2a67eb1361f18$var$words","str","obj","words","split","i","length","e","Object","defineProperty","get","$30c2a67eb1361f18$export$49538f2c2aa78cac","set","s","enumerable","configurable","$30c2a67eb1361f18$var$pBuiltins","$30c2a67eb1361f18$var$pKeywords","$30c2a67eb1361f18$var$pTypes","$30c2a67eb1361f18$var$builtins","$30c2a67eb1361f18$var$keywords","$30c2a67eb1361f18$var$types","$30c2a67eb1361f18$var$isOperatorChar","$30c2a67eb1361f18$var$chain","stream","state","f","tokenize","$30c2a67eb1361f18$var$tokenComment","ch","isEnd","next","$30c2a67eb1361f18$var$tokenBase","escaped","end","test","eatWhile","eat","skipToEnd","propertyIsEnumerable","current","toUpperCase","name","startState","startOfLine","token","eatSpace","languageData","autocomplete"],"version":3,"file":"pig.bc2a3e36.js.map"}