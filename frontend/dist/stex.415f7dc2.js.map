{"mappings":"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","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/stex.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"N2p4d\", function(module, exports) {\n\n$parcel$export(module.exports, \"stex\", () => $093670f6f54c1894$export$e3fbceba7d482c39);\nfunction $093670f6f54c1894$var$mkStex(mathMode) {\n    function pushCommand(state, command) {\n        state.cmdState.push(command);\n    }\n    function peekCommand(state) {\n        if (state.cmdState.length > 0) return state.cmdState[state.cmdState.length - 1];\n        else return null;\n    }\n    function popCommand(state) {\n        var plug = state.cmdState.pop();\n        if (plug) plug.closeBracket();\n    }\n    // returns the non-default plugin closest to the end of the list\n    function getMostPowerful(state) {\n        var context = state.cmdState;\n        for(var i = context.length - 1; i >= 0; i--){\n            var plug = context[i];\n            if (plug.name == \"DEFAULT\") continue;\n            return plug;\n        }\n        return {\n            styleIdentifier: function() {\n                return null;\n            }\n        };\n    }\n    function addPluginPattern(pluginName, cmdStyle, styles) {\n        return function() {\n            this.name = pluginName;\n            this.bracketNo = 0;\n            this.style = cmdStyle;\n            this.styles = styles;\n            this.argument = null; // \\begin and \\end have arguments that follow. These are stored in the plugin\n            this.styleIdentifier = function() {\n                return this.styles[this.bracketNo - 1] || null;\n            };\n            this.openBracket = function() {\n                this.bracketNo++;\n                return \"bracket\";\n            };\n            this.closeBracket = function() {};\n        };\n    }\n    var plugins = {};\n    plugins[\"importmodule\"] = addPluginPattern(\"importmodule\", \"tag\", [\n        \"string\",\n        \"builtin\"\n    ]);\n    plugins[\"documentclass\"] = addPluginPattern(\"documentclass\", \"tag\", [\n        \"\",\n        \"atom\"\n    ]);\n    plugins[\"usepackage\"] = addPluginPattern(\"usepackage\", \"tag\", [\n        \"atom\"\n    ]);\n    plugins[\"begin\"] = addPluginPattern(\"begin\", \"tag\", [\n        \"atom\"\n    ]);\n    plugins[\"end\"] = addPluginPattern(\"end\", \"tag\", [\n        \"atom\"\n    ]);\n    plugins[\"label\"] = addPluginPattern(\"label\", \"tag\", [\n        \"atom\"\n    ]);\n    plugins[\"ref\"] = addPluginPattern(\"ref\", \"tag\", [\n        \"atom\"\n    ]);\n    plugins[\"eqref\"] = addPluginPattern(\"eqref\", \"tag\", [\n        \"atom\"\n    ]);\n    plugins[\"cite\"] = addPluginPattern(\"cite\", \"tag\", [\n        \"atom\"\n    ]);\n    plugins[\"bibitem\"] = addPluginPattern(\"bibitem\", \"tag\", [\n        \"atom\"\n    ]);\n    plugins[\"Bibitem\"] = addPluginPattern(\"Bibitem\", \"tag\", [\n        \"atom\"\n    ]);\n    plugins[\"RBibitem\"] = addPluginPattern(\"RBibitem\", \"tag\", [\n        \"atom\"\n    ]);\n    plugins[\"DEFAULT\"] = function() {\n        this.name = \"DEFAULT\";\n        this.style = \"tag\";\n        this.styleIdentifier = this.openBracket = this.closeBracket = function() {};\n    };\n    function setState(state, f) {\n        state.f = f;\n    }\n    // called when in a normal (no environment) context\n    function normal(source, state) {\n        var plug;\n        // Do we look like '\\command' ?  If so, attempt to apply the plugin 'command'\n        if (source.match(/^\\\\[a-zA-Z@\\xc0-\\u1fff\\u2060-\\uffff]+/)) {\n            var cmdName = source.current().slice(1);\n            plug = plugins.hasOwnProperty(cmdName) ? plugins[cmdName] : plugins[\"DEFAULT\"];\n            plug = new plug();\n            pushCommand(state, plug);\n            setState(state, beginParams);\n            return plug.style;\n        }\n        // escape characters\n        if (source.match(/^\\\\[$&%#{}_]/)) return \"tag\";\n        // white space control characters\n        if (source.match(/^\\\\[,;!\\/\\\\]/)) return \"tag\";\n        // find if we're starting various math modes\n        if (source.match(\"\\\\[\")) {\n            setState(state, function(source, state) {\n                return inMathMode(source, state, \"\\\\]\");\n            });\n            return \"keyword\";\n        }\n        if (source.match(\"\\\\(\")) {\n            setState(state, function(source, state) {\n                return inMathMode(source, state, \"\\\\)\");\n            });\n            return \"keyword\";\n        }\n        if (source.match(\"$$\")) {\n            setState(state, function(source, state) {\n                return inMathMode(source, state, \"$$\");\n            });\n            return \"keyword\";\n        }\n        if (source.match(\"$\")) {\n            setState(state, function(source, state) {\n                return inMathMode(source, state, \"$\");\n            });\n            return \"keyword\";\n        }\n        var ch = source.next();\n        if (ch == \"%\") {\n            source.skipToEnd();\n            return \"comment\";\n        } else if (ch == '}' || ch == ']') {\n            plug = peekCommand(state);\n            if (plug) {\n                plug.closeBracket(ch);\n                setState(state, beginParams);\n            } else return \"error\";\n            return \"bracket\";\n        } else if (ch == '{' || ch == '[') {\n            plug = plugins[\"DEFAULT\"];\n            plug = new plug();\n            pushCommand(state, plug);\n            return \"bracket\";\n        } else if (/\\d/.test(ch)) {\n            source.eatWhile(/[\\w.%]/);\n            return \"atom\";\n        } else {\n            source.eatWhile(/[\\w\\-_]/);\n            plug = getMostPowerful(state);\n            if (plug.name == 'begin') plug.argument = source.current();\n            return plug.styleIdentifier();\n        }\n    }\n    function inMathMode(source, state, endModeSeq) {\n        if (source.eatSpace()) return null;\n        if (endModeSeq && source.match(endModeSeq)) {\n            setState(state, normal);\n            return \"keyword\";\n        }\n        if (source.match(/^\\\\[a-zA-Z@]+/)) return \"tag\";\n        if (source.match(/^[a-zA-Z]+/)) return \"variableName.special\";\n        // escape characters\n        if (source.match(/^\\\\[$&%#{}_]/)) return \"tag\";\n        // white space control characters\n        if (source.match(/^\\\\[,;!\\/]/)) return \"tag\";\n        // special math-mode characters\n        if (source.match(/^[\\^_&]/)) return \"tag\";\n        // non-special characters\n        if (source.match(/^[+\\-<>|=,\\/@!*:;'\"`~#?]/)) return null;\n        if (source.match(/^(\\d+\\.\\d*|\\d*\\.\\d+|\\d+)/)) return \"number\";\n        var ch = source.next();\n        if (ch == \"{\" || ch == \"}\" || ch == \"[\" || ch == \"]\" || ch == \"(\" || ch == \")\") return \"bracket\";\n        if (ch == \"%\") {\n            source.skipToEnd();\n            return \"comment\";\n        }\n        return \"error\";\n    }\n    function beginParams(source, state) {\n        var ch = source.peek(), lastPlug;\n        if (ch == '{' || ch == '[') {\n            lastPlug = peekCommand(state);\n            lastPlug.openBracket(ch);\n            source.eat(ch);\n            setState(state, normal);\n            return \"bracket\";\n        }\n        if (/[ \\t\\r]/.test(ch)) {\n            source.eat(ch);\n            return null;\n        }\n        setState(state, normal);\n        popCommand(state);\n        return normal(source, state);\n    }\n    return {\n        name: \"stex\",\n        startState: function() {\n            var f = mathMode ? function(source, state) {\n                return inMathMode(source, state);\n            } : normal;\n            return {\n                cmdState: [],\n                f: f\n            };\n        },\n        copyState: function(s) {\n            return {\n                cmdState: s.cmdState.slice(),\n                f: s.f\n            };\n        },\n        token: function(stream, state) {\n            return state.f(stream, state);\n        },\n        blankLine: function(state) {\n            state.f = normal;\n            state.cmdState.length = 0;\n        },\n        languageData: {\n            commentTokens: {\n                line: \"%\"\n            }\n        }\n    };\n}\nconst $093670f6f54c1894$export$e3fbceba7d482c39 = $093670f6f54c1894$var$mkStex(false);\nconst $093670f6f54c1894$export$82a1eaa2717987b9 = $093670f6f54c1894$var$mkStex(true);\n\n});\n\n\n//# sourceMappingURL=stex.415f7dc2.js.map\n","function mkStex(mathMode) {\n  function pushCommand(state, command) {\n    state.cmdState.push(command);\n  }\n\n  function peekCommand(state) {\n    if (state.cmdState.length > 0) {\n      return state.cmdState[state.cmdState.length - 1];\n    } else {\n      return null;\n    }\n  }\n\n  function popCommand(state) {\n    var plug = state.cmdState.pop();\n    if (plug) {\n      plug.closeBracket();\n    }\n  }\n\n  // returns the non-default plugin closest to the end of the list\n  function getMostPowerful(state) {\n    var context = state.cmdState;\n    for (var i = context.length - 1; i >= 0; i--) {\n      var plug = context[i];\n      if (plug.name == \"DEFAULT\") {\n        continue;\n      }\n      return plug;\n    }\n    return { styleIdentifier: function() { return null; } };\n  }\n\n  function addPluginPattern(pluginName, cmdStyle, styles) {\n    return function () {\n      this.name = pluginName;\n      this.bracketNo = 0;\n      this.style = cmdStyle;\n      this.styles = styles;\n      this.argument = null;   // \\begin and \\end have arguments that follow. These are stored in the plugin\n\n      this.styleIdentifier = function() {\n        return this.styles[this.bracketNo - 1] || null;\n      };\n      this.openBracket = function() {\n        this.bracketNo++;\n        return \"bracket\";\n      };\n      this.closeBracket = function() {};\n    };\n  }\n\n  var plugins = {};\n\n  plugins[\"importmodule\"] = addPluginPattern(\"importmodule\", \"tag\", [\"string\", \"builtin\"]);\n  plugins[\"documentclass\"] = addPluginPattern(\"documentclass\", \"tag\", [\"\", \"atom\"]);\n  plugins[\"usepackage\"] = addPluginPattern(\"usepackage\", \"tag\", [\"atom\"]);\n  plugins[\"begin\"] = addPluginPattern(\"begin\", \"tag\", [\"atom\"]);\n  plugins[\"end\"] = addPluginPattern(\"end\", \"tag\", [\"atom\"]);\n\n  plugins[\"label\"    ] = addPluginPattern(\"label\"    , \"tag\", [\"atom\"]);\n  plugins[\"ref\"      ] = addPluginPattern(\"ref\"      , \"tag\", [\"atom\"]);\n  plugins[\"eqref\"    ] = addPluginPattern(\"eqref\"    , \"tag\", [\"atom\"]);\n  plugins[\"cite\"     ] = addPluginPattern(\"cite\"     , \"tag\", [\"atom\"]);\n  plugins[\"bibitem\"  ] = addPluginPattern(\"bibitem\"  , \"tag\", [\"atom\"]);\n  plugins[\"Bibitem\"  ] = addPluginPattern(\"Bibitem\"  , \"tag\", [\"atom\"]);\n  plugins[\"RBibitem\" ] = addPluginPattern(\"RBibitem\" , \"tag\", [\"atom\"]);\n\n  plugins[\"DEFAULT\"] = function () {\n    this.name = \"DEFAULT\";\n    this.style = \"tag\";\n\n    this.styleIdentifier = this.openBracket = this.closeBracket = function() {};\n  };\n\n  function setState(state, f) {\n    state.f = f;\n  }\n\n  // called when in a normal (no environment) context\n  function normal(source, state) {\n    var plug;\n    // Do we look like '\\command' ?  If so, attempt to apply the plugin 'command'\n    if (source.match(/^\\\\[a-zA-Z@\\xc0-\\u1fff\\u2060-\\uffff]+/)) {\n      var cmdName = source.current().slice(1);\n      plug = plugins.hasOwnProperty(cmdName) ? plugins[cmdName] : plugins[\"DEFAULT\"];\n      plug = new plug();\n      pushCommand(state, plug);\n      setState(state, beginParams);\n      return plug.style;\n    }\n\n    // escape characters\n    if (source.match(/^\\\\[$&%#{}_]/)) {\n      return \"tag\";\n    }\n\n    // white space control characters\n    if (source.match(/^\\\\[,;!\\/\\\\]/)) {\n      return \"tag\";\n    }\n\n    // find if we're starting various math modes\n    if (source.match(\"\\\\[\")) {\n      setState(state, function(source, state){ return inMathMode(source, state, \"\\\\]\"); });\n      return \"keyword\";\n    }\n    if (source.match(\"\\\\(\")) {\n      setState(state, function(source, state){ return inMathMode(source, state, \"\\\\)\"); });\n      return \"keyword\";\n    }\n    if (source.match(\"$$\")) {\n      setState(state, function(source, state){ return inMathMode(source, state, \"$$\"); });\n      return \"keyword\";\n    }\n    if (source.match(\"$\")) {\n      setState(state, function(source, state){ return inMathMode(source, state, \"$\"); });\n      return \"keyword\";\n    }\n\n    var ch = source.next();\n    if (ch == \"%\") {\n      source.skipToEnd();\n      return \"comment\";\n    } else if (ch == '}' || ch == ']') {\n      plug = peekCommand(state);\n      if (plug) {\n        plug.closeBracket(ch);\n        setState(state, beginParams);\n      } else {\n        return \"error\";\n      }\n      return \"bracket\";\n    } else if (ch == '{' || ch == '[') {\n      plug = plugins[\"DEFAULT\"];\n      plug = new plug();\n      pushCommand(state, plug);\n      return \"bracket\";\n    } else if (/\\d/.test(ch)) {\n      source.eatWhile(/[\\w.%]/);\n      return \"atom\";\n    } else {\n      source.eatWhile(/[\\w\\-_]/);\n      plug = getMostPowerful(state);\n      if (plug.name == 'begin') {\n        plug.argument = source.current();\n      }\n      return plug.styleIdentifier();\n    }\n  }\n\n  function inMathMode(source, state, endModeSeq) {\n    if (source.eatSpace()) {\n      return null;\n    }\n    if (endModeSeq && source.match(endModeSeq)) {\n      setState(state, normal);\n      return \"keyword\";\n    }\n    if (source.match(/^\\\\[a-zA-Z@]+/)) {\n      return \"tag\";\n    }\n    if (source.match(/^[a-zA-Z]+/)) {\n      return \"variableName.special\";\n    }\n    // escape characters\n    if (source.match(/^\\\\[$&%#{}_]/)) {\n      return \"tag\";\n    }\n    // white space control characters\n    if (source.match(/^\\\\[,;!\\/]/)) {\n      return \"tag\";\n    }\n    // special math-mode characters\n    if (source.match(/^[\\^_&]/)) {\n      return \"tag\";\n    }\n    // non-special characters\n    if (source.match(/^[+\\-<>|=,\\/@!*:;'\"`~#?]/)) {\n      return null;\n    }\n    if (source.match(/^(\\d+\\.\\d*|\\d*\\.\\d+|\\d+)/)) {\n      return \"number\";\n    }\n    var ch = source.next();\n    if (ch == \"{\" || ch == \"}\" || ch == \"[\" || ch == \"]\" || ch == \"(\" || ch == \")\") {\n      return \"bracket\";\n    }\n\n    if (ch == \"%\") {\n      source.skipToEnd();\n      return \"comment\";\n    }\n    return \"error\";\n  }\n\n  function beginParams(source, state) {\n    var ch = source.peek(), lastPlug;\n    if (ch == '{' || ch == '[') {\n      lastPlug = peekCommand(state);\n      lastPlug.openBracket(ch);\n      source.eat(ch);\n      setState(state, normal);\n      return \"bracket\";\n    }\n    if (/[ \\t\\r]/.test(ch)) {\n      source.eat(ch);\n      return null;\n    }\n    setState(state, normal);\n    popCommand(state);\n\n    return normal(source, state);\n  }\n\n  return {\n    name: \"stex\",\n    startState: function() {\n      var f = mathMode ? function(source, state){ return inMathMode(source, state); } : normal;\n      return {\n        cmdState: [],\n        f: f\n      };\n    },\n    copyState: function(s) {\n      return {\n        cmdState: s.cmdState.slice(),\n        f: s.f\n      };\n    },\n    token: function(stream, state) {\n      return state.f(stream, state);\n    },\n    blankLine: function(state) {\n      state.f = normal;\n      state.cmdState.length = 0;\n    },\n    languageData: {\n      commentTokens: {line: \"%\"}\n    }\n  };\n};\n\nexport const stex = mkStex(false)\nexport const stexMath = mkStex(true)\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","$093670f6f54c1894$var$mkStex","mathMode","pushCommand","state","command","cmdState","push","peekCommand","length","addPluginPattern","pluginName","cmdStyle","styles","name","bracketNo","style","argument","styleIdentifier","openBracket","closeBracket","plugins","normal","source","match","plug","cmdName","current","slice","hasOwnProperty","f","beginParams","inMathMode","ch","next","skipToEnd","test","eatWhile","getMostPowerful","context","i","endModeSeq","eatSpace","peek","lastPlug","eat","pop","startState","copyState","s","token","stream","blankLine","languageData","commentTokens","line","Object","defineProperty","get","$093670f6f54c1894$export$e3fbceba7d482c39","set","enumerable","configurable"],"version":3,"file":"stex.415f7dc2.js.map"}