{"mappings":"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","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/sparql.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"8kNxk\", function(module, exports) {\n\n$parcel$export(module.exports, \"sparql\", () => $61169de8494c3ec3$export$e57b8791c1ee70bf);\nvar $61169de8494c3ec3$var$curPunc;\nfunction $61169de8494c3ec3$var$wordRegexp(words) {\n    return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n}\nvar $61169de8494c3ec3$var$ops = $61169de8494c3ec3$var$wordRegexp([\n    \"str\",\n    \"lang\",\n    \"langmatches\",\n    \"datatype\",\n    \"bound\",\n    \"sameterm\",\n    \"isiri\",\n    \"isuri\",\n    \"iri\",\n    \"uri\",\n    \"bnode\",\n    \"count\",\n    \"sum\",\n    \"min\",\n    \"max\",\n    \"avg\",\n    \"sample\",\n    \"group_concat\",\n    \"rand\",\n    \"abs\",\n    \"ceil\",\n    \"floor\",\n    \"round\",\n    \"concat\",\n    \"substr\",\n    \"strlen\",\n    \"replace\",\n    \"ucase\",\n    \"lcase\",\n    \"encode_for_uri\",\n    \"contains\",\n    \"strstarts\",\n    \"strends\",\n    \"strbefore\",\n    \"strafter\",\n    \"year\",\n    \"month\",\n    \"day\",\n    \"hours\",\n    \"minutes\",\n    \"seconds\",\n    \"timezone\",\n    \"tz\",\n    \"now\",\n    \"uuid\",\n    \"struuid\",\n    \"md5\",\n    \"sha1\",\n    \"sha256\",\n    \"sha384\",\n    \"sha512\",\n    \"coalesce\",\n    \"if\",\n    \"strlang\",\n    \"strdt\",\n    \"isnumeric\",\n    \"regex\",\n    \"exists\",\n    \"isblank\",\n    \"isliteral\",\n    \"a\",\n    \"bind\"\n]);\nvar $61169de8494c3ec3$var$keywords = $61169de8494c3ec3$var$wordRegexp([\n    \"base\",\n    \"prefix\",\n    \"select\",\n    \"distinct\",\n    \"reduced\",\n    \"construct\",\n    \"describe\",\n    \"ask\",\n    \"from\",\n    \"named\",\n    \"where\",\n    \"order\",\n    \"limit\",\n    \"offset\",\n    \"filter\",\n    \"optional\",\n    \"graph\",\n    \"by\",\n    \"asc\",\n    \"desc\",\n    \"as\",\n    \"having\",\n    \"undef\",\n    \"values\",\n    \"group\",\n    \"minus\",\n    \"in\",\n    \"not\",\n    \"service\",\n    \"silent\",\n    \"using\",\n    \"insert\",\n    \"delete\",\n    \"union\",\n    \"true\",\n    \"false\",\n    \"with\",\n    \"data\",\n    \"copy\",\n    \"to\",\n    \"move\",\n    \"add\",\n    \"create\",\n    \"drop\",\n    \"clear\",\n    \"load\",\n    \"into\"\n]);\nvar $61169de8494c3ec3$var$operatorChars = /[*+\\-<>=&|\\^\\/!\\?]/;\nvar $61169de8494c3ec3$var$PN_CHARS = \"[A-Za-z_\\\\-0-9]\";\nvar $61169de8494c3ec3$var$PREFIX_START = new RegExp(\"[A-Za-z]\");\nvar $61169de8494c3ec3$var$PREFIX_REMAINDER = new RegExp(\"((\" + $61169de8494c3ec3$var$PN_CHARS + \"|\\\\.)*(\" + $61169de8494c3ec3$var$PN_CHARS + \"))?:\");\nfunction $61169de8494c3ec3$var$tokenBase(stream, state) {\n    var ch = stream.next();\n    $61169de8494c3ec3$var$curPunc = null;\n    if (ch == \"$\" || ch == \"?\") {\n        if (ch == \"?\" && stream.match(/\\s/, false)) return \"operator\";\n        stream.match(/^[A-Za-z0-9_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][A-Za-z0-9_\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]*/);\n        return \"variableName.local\";\n    } else if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n        stream.match(/^[^\\s\\u00a0>]*>?/);\n        return \"atom\";\n    } else if (ch == \"\\\"\" || ch == \"'\") {\n        state.tokenize = $61169de8494c3ec3$var$tokenLiteral(ch);\n        return state.tokenize(stream, state);\n    } else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n        $61169de8494c3ec3$var$curPunc = ch;\n        return \"bracket\";\n    } else if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n    } else if ($61169de8494c3ec3$var$operatorChars.test(ch)) return \"operator\";\n    else if (ch == \":\") {\n        $61169de8494c3ec3$var$eatPnLocal(stream);\n        return \"atom\";\n    } else if (ch == \"@\") {\n        stream.eatWhile(/[a-z\\d\\-]/i);\n        return \"meta\";\n    } else if ($61169de8494c3ec3$var$PREFIX_START.test(ch) && stream.match($61169de8494c3ec3$var$PREFIX_REMAINDER)) {\n        $61169de8494c3ec3$var$eatPnLocal(stream);\n        return \"atom\";\n    }\n    stream.eatWhile(/[_\\w\\d]/);\n    var word = stream.current();\n    if ($61169de8494c3ec3$var$ops.test(word)) return \"builtin\";\n    else if ($61169de8494c3ec3$var$keywords.test(word)) return \"keyword\";\n    else return \"variable\";\n}\nfunction $61169de8494c3ec3$var$eatPnLocal(stream) {\n    stream.match(/(\\.(?=[\\w_\\-\\\\%])|[:\\w_-]|\\\\[-\\\\_~.!$&'()*+,;=/?#@%]|%[a-f\\d][a-f\\d])+/i);\n}\nfunction $61169de8494c3ec3$var$tokenLiteral(quote) {\n    return function(stream, state) {\n        var escaped = false, ch;\n        while((ch = stream.next()) != null){\n            if (ch == quote && !escaped) {\n                state.tokenize = $61169de8494c3ec3$var$tokenBase;\n                break;\n            }\n            escaped = !escaped && ch == \"\\\\\";\n        }\n        return \"string\";\n    };\n}\nfunction $61169de8494c3ec3$var$pushContext(state, type, col) {\n    state.context = {\n        prev: state.context,\n        indent: state.indent,\n        col: col,\n        type: type\n    };\n}\nfunction $61169de8494c3ec3$var$popContext(state) {\n    state.indent = state.context.indent;\n    state.context = state.context.prev;\n}\nconst $61169de8494c3ec3$export$e57b8791c1ee70bf = {\n    name: \"sparql\",\n    startState: function() {\n        return {\n            tokenize: $61169de8494c3ec3$var$tokenBase,\n            context: null,\n            indent: 0,\n            col: 0\n        };\n    },\n    token: function(stream, state) {\n        if (stream.sol()) {\n            if (state.context && state.context.align == null) state.context.align = false;\n            state.indent = stream.indentation();\n        }\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") state.context.align = true;\n        if ($61169de8494c3ec3$var$curPunc == \"(\") $61169de8494c3ec3$var$pushContext(state, \")\", stream.column());\n        else if ($61169de8494c3ec3$var$curPunc == \"[\") $61169de8494c3ec3$var$pushContext(state, \"]\", stream.column());\n        else if ($61169de8494c3ec3$var$curPunc == \"{\") $61169de8494c3ec3$var$pushContext(state, \"}\", stream.column());\n        else if (/[\\]\\}\\)]/.test($61169de8494c3ec3$var$curPunc)) {\n            while(state.context && state.context.type == \"pattern\")$61169de8494c3ec3$var$popContext(state);\n            if (state.context && $61169de8494c3ec3$var$curPunc == state.context.type) {\n                $61169de8494c3ec3$var$popContext(state);\n                if ($61169de8494c3ec3$var$curPunc == \"}\" && state.context && state.context.type == \"pattern\") $61169de8494c3ec3$var$popContext(state);\n            }\n        } else if ($61169de8494c3ec3$var$curPunc == \".\" && state.context && state.context.type == \"pattern\") $61169de8494c3ec3$var$popContext(state);\n        else if (/atom|string|variable/.test(style) && state.context) {\n            if (/[\\}\\]]/.test(state.context.type)) $61169de8494c3ec3$var$pushContext(state, \"pattern\", stream.column());\n            else if (state.context.type == \"pattern\" && !state.context.align) {\n                state.context.align = true;\n                state.context.col = stream.column();\n            }\n        }\n        return style;\n    },\n    indent: function(state, textAfter, cx) {\n        var firstChar = textAfter && textAfter.charAt(0);\n        var context = state.context;\n        if (/[\\]\\}]/.test(firstChar)) while(context && context.type == \"pattern\")context = context.prev;\n        var closing = context && firstChar == context.type;\n        if (!context) return 0;\n        else if (context.type == \"pattern\") return context.col;\n        else if (context.align) return context.col + (closing ? 0 : 1);\n        else return context.indent + (closing ? 0 : cx.unit);\n    },\n    languageData: {\n        commentTokens: {\n            line: \"#\"\n        }\n    }\n};\n\n});\n\n\n//# sourceMappingURL=sparql.bb61d2b0.js.map\n","var curPunc;\n\nfunction wordRegexp(words) {\n  return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n}\nvar ops = wordRegexp([\"str\", \"lang\", \"langmatches\", \"datatype\", \"bound\", \"sameterm\", \"isiri\", \"isuri\",\n                      \"iri\", \"uri\", \"bnode\", \"count\", \"sum\", \"min\", \"max\", \"avg\", \"sample\",\n                      \"group_concat\", \"rand\", \"abs\", \"ceil\", \"floor\", \"round\", \"concat\", \"substr\", \"strlen\",\n                      \"replace\", \"ucase\", \"lcase\", \"encode_for_uri\", \"contains\", \"strstarts\", \"strends\",\n                      \"strbefore\", \"strafter\", \"year\", \"month\", \"day\", \"hours\", \"minutes\", \"seconds\",\n                      \"timezone\", \"tz\", \"now\", \"uuid\", \"struuid\", \"md5\", \"sha1\", \"sha256\", \"sha384\",\n                      \"sha512\", \"coalesce\", \"if\", \"strlang\", \"strdt\", \"isnumeric\", \"regex\", \"exists\",\n                      \"isblank\", \"isliteral\", \"a\", \"bind\"]);\nvar keywords = wordRegexp([\"base\", \"prefix\", \"select\", \"distinct\", \"reduced\", \"construct\", \"describe\",\n                           \"ask\", \"from\", \"named\", \"where\", \"order\", \"limit\", \"offset\", \"filter\", \"optional\",\n                           \"graph\", \"by\", \"asc\", \"desc\", \"as\", \"having\", \"undef\", \"values\", \"group\",\n                           \"minus\", \"in\", \"not\", \"service\", \"silent\", \"using\", \"insert\", \"delete\", \"union\",\n                           \"true\", \"false\", \"with\",\n                           \"data\", \"copy\", \"to\", \"move\", \"add\", \"create\", \"drop\", \"clear\", \"load\", \"into\"]);\nvar operatorChars = /[*+\\-<>=&|\\^\\/!\\?]/;\nvar PN_CHARS = \"[A-Za-z_\\\\-0-9]\";\nvar PREFIX_START = new RegExp(\"[A-Za-z]\");\nvar PREFIX_REMAINDER = new RegExp(\"((\" + PN_CHARS + \"|\\\\.)*(\" + PN_CHARS + \"))?:\");\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  curPunc = null;\n  if (ch == \"$\" || ch == \"?\") {\n    if(ch == \"?\" && stream.match(/\\s/, false)){\n      return \"operator\";\n    }\n    stream.match(/^[A-Za-z0-9_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][A-Za-z0-9_\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]*/);\n    return \"variableName.local\";\n  }\n  else if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n    stream.match(/^[^\\s\\u00a0>]*>?/);\n    return \"atom\";\n  }\n  else if (ch == \"\\\"\" || ch == \"'\") {\n    state.tokenize = tokenLiteral(ch);\n    return state.tokenize(stream, state);\n  }\n  else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n    curPunc = ch;\n    return \"bracket\";\n  }\n  else if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  else if (operatorChars.test(ch)) {\n    return \"operator\";\n  }\n  else if (ch == \":\") {\n    eatPnLocal(stream);\n    return \"atom\";\n  }\n  else if (ch == \"@\") {\n    stream.eatWhile(/[a-z\\d\\-]/i);\n    return \"meta\";\n  }\n  else if (PREFIX_START.test(ch) && stream.match(PREFIX_REMAINDER)) {\n    eatPnLocal(stream);\n    return \"atom\";\n  }\n  stream.eatWhile(/[_\\w\\d]/);\n  var word = stream.current();\n  if (ops.test(word))\n    return \"builtin\";\n  else if (keywords.test(word))\n    return \"keyword\";\n  else\n    return \"variable\";\n}\n\nfunction eatPnLocal(stream) {\n  stream.match(/(\\.(?=[\\w_\\-\\\\%])|[:\\w_-]|\\\\[-\\\\_~.!$&'()*+,;=/?#@%]|%[a-f\\d][a-f\\d])+/i);\n}\n\nfunction tokenLiteral(quote) {\n  return function(stream, state) {\n    var escaped = false, ch;\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    return \"string\";\n  };\n}\n\nfunction pushContext(state, type, col) {\n  state.context = {prev: state.context, indent: state.indent, col: col, type: type};\n}\nfunction popContext(state) {\n  state.indent = state.context.indent;\n  state.context = state.context.prev;\n}\n\nexport const sparql = {\n  name: \"sparql\",\n\n  startState: function() {\n    return {tokenize: tokenBase,\n            context: null,\n            indent: 0,\n            col: 0};\n  },\n\n  token: function(stream, state) {\n    if (stream.sol()) {\n      if (state.context && state.context.align == null) state.context.align = false;\n      state.indent = stream.indentation();\n    }\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n\n    if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n      state.context.align = true;\n    }\n\n    if (curPunc == \"(\") pushContext(state, \")\", stream.column());\n    else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());\n    else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());\n    else if (/[\\]\\}\\)]/.test(curPunc)) {\n      while (state.context && state.context.type == \"pattern\") popContext(state);\n      if (state.context && curPunc == state.context.type) {\n        popContext(state);\n        if (curPunc == \"}\" && state.context && state.context.type == \"pattern\")\n          popContext(state);\n      }\n    }\n    else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);\n    else if (/atom|string|variable/.test(style) && state.context) {\n      if (/[\\}\\]]/.test(state.context.type))\n        pushContext(state, \"pattern\", stream.column());\n      else if (state.context.type == \"pattern\" && !state.context.align) {\n        state.context.align = true;\n        state.context.col = stream.column();\n      }\n    }\n\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    var firstChar = textAfter && textAfter.charAt(0);\n    var context = state.context;\n    if (/[\\]\\}]/.test(firstChar))\n      while (context && context.type == \"pattern\") context = context.prev;\n\n    var closing = context && firstChar == context.type;\n    if (!context)\n      return 0;\n    else if (context.type == \"pattern\")\n      return context.col;\n    else if (context.align)\n      return context.col + (closing ? 0 : 1);\n    else\n      return context.indent + (closing ? 0 : cx.unit);\n  },\n\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n};\n\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","$61169de8494c3ec3$var$wordRegexp","words","RegExp","join","Object","defineProperty","get","$61169de8494c3ec3$export$e57b8791c1ee70bf","set","s","enumerable","configurable","$61169de8494c3ec3$var$curPunc","$61169de8494c3ec3$var$ops","$61169de8494c3ec3$var$keywords","$61169de8494c3ec3$var$operatorChars","$61169de8494c3ec3$var$PN_CHARS","$61169de8494c3ec3$var$PREFIX_START","$61169de8494c3ec3$var$PREFIX_REMAINDER","$61169de8494c3ec3$var$tokenBase","stream","state","quote","ch","next","match","tokenize","escaped","test","skipToEnd","$61169de8494c3ec3$var$eatPnLocal","eatWhile","word","current","$61169de8494c3ec3$var$pushContext","type","col","context","prev","indent","$61169de8494c3ec3$var$popContext","name","startState","token","sol","align","indentation","eatSpace","style","column","textAfter","cx","firstChar","charAt","closing","unit","languageData","commentTokens","line"],"version":3,"file":"sparql.bb61d2b0.js.map"}