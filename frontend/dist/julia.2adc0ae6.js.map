{"mappings":"A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,ECAA,SAAS,EAAW,CAAK,CAAE,CAAG,CAAE,CAAG,EAGjC,OAFI,AAAe,KAAA,IAAR,GAAqB,CAAA,EAAM,EAAtC,EACI,AAAe,KAAA,IAAR,GAAuB,CAAA,EAAM,KAAxC,EACO,AAAI,OAAO,IAAM,EAAM,KAAO,EAAM,IAAI,CAAC,OAAS,KAAO,EAClE,C,O,c,C,E,O,C,Q,C,I,I,E,I,K,E,W,C,E,a,C,C,GAOA,IAAI,EAAqB,CACvB,QAAS,SAAU,OAAQ,SAAU,KAAM,OAAQ,WAAY,SAC/D,WAAY,6BAA8B,MAAO,MAAO,IAAK,IAC9D,CACG,EAAY,EAAW,CACzB,QAAS,SAAU,SAAU,OAAQ,SAAU,MAAO,OAAQ,WAAY,SAC1E,wCAAyC,MAAO,MAAO,IAAK,IAC5D,UAAW,UAAW,UAAW,UAAW,UAAW,UACvD,UAAW,UAAW,UAAW,UAAW,UAAW,UACvD,UAAW,UAAW,UAAW,UAAW,UAC5C,0BACD,CAAE,IACC,EAAa,eACb,EAAc,wEAEd,EAAQ,EAAW,CApBT,iBACA,wBACF,2BACA,kEAiB2C,CAAE,KAQrD,EAAe,CAAC,KAAM,OAAQ,SAAU,QAAS,MAAO,QAAS,MACjD,MAAO,KAAM,MAAO,QAAS,UAAW,SAAU,QAAS,WAC3D,SAAU,QAAS,QAAS,SAAU,SAAU,YAAa,QAC7D,WAAY,QAAS,QAAS,SAAU,aAAc,SAAU,OAChE,UAAW,YAAa,QAAS,YAAa,WAAY,YAC1D,WAAW,CAE3B,EAAe,CAAC,OAAQ,QAAS,UAAW,MAAO,MAAM,CAEzD,EAAU,EAfI,CAAC,QAAS,WAAY,OAAQ,SAAU,YAAa,MACpD,QAAS,MAAO,QAAS,QAAS,KAAM,OAAQ,SAAU,MAC1D,UAAW,QAAS,KAAK,EAcxC,EAAU,EAZI,CAAC,MAAO,OAAQ,SAAU,QAAS,UAAU,EAa3D,EAAW,EAAW,GACtB,EAAW,EAAW,GAEtB,EAAQ,+CACR,EAAS,+CACT,EAAiB,uCAEjB,EAAiB,EAAW,EAAoB,GAAI,KACpD,EAAkB,EAAW,EAAoB,GAAI,KAEzD,SAAS,EAAQ,CAAK,EACpB,OAAQ,EAAM,YAAY,CAAG,CAC/B,CAMA,SAAS,EAAa,CAAK,CAAE,CAAC,QAE5B,CADI,AAAc,KAAA,IAAP,GAAsB,CAAA,EAAI,CAAA,EACjC,EAAM,MAAM,CAAC,MAAM,EAAI,GAClB,KAEF,EAAM,MAAM,CAAC,EAAM,MAAM,CAAC,MAAM,CAAI,CAAA,EAAI,CAAA,EAAG,AACpD,CAGA,SAAS,EAAU,CAAM,CAAE,CAAK,EAE9B,GAAI,EAAO,KAAK,CAAC,KAAM,CAAA,GAErB,OADA,EAAM,QAAQ,CAAG,EACV,EAAM,QAAQ,CAAC,EAAQ,GAIhC,IA4N0B,EA7JtB,EA/DA,EAAc,EAAM,WAAW,CAMnC,GALI,EAAO,GAAG,IACZ,CAAA,EAAc,CAAA,CADhB,EAGA,EAAM,WAAW,CAAG,CAAA,EAEhB,GACE,EAAO,KAAK,CAAC,OACf,MAAO,WAIX,GAAI,EAAO,KAAK,CAAC,UACf,MAAO,QACF,GAAI,EAAO,KAAK,CAAC,WACtB,MAAO,WAGT,GAAI,EAAO,QAAQ,GACjB,OAAO,KAGT,IAAI,EAAK,EAAO,IAAI,GAGpB,GAAI,AAAO,MAAP,EAEF,OADA,EAAO,SAAS,GACT,UAaT,GAVW,MAAP,IACF,EAAM,MAAM,CAAC,IAAI,CAAC,KAClB,EAAM,YAAY,IAGT,MAAP,IACF,EAAM,MAAM,CAAC,IAAI,CAAC,KAClB,EAAM,gBAAgB,IAGpB,EAAQ,IAAU,AAAO,MAAP,EAAY,CAChC,KAAO,EAAM,MAAM,CAAC,MAAM,EAAI,AAAwB,MAAxB,EAAa,IAAkB,EAAM,MAAM,CAAC,GAAG,GAC7E,EAAM,MAAM,CAAC,GAAG,GAChB,EAAM,YAAY,GAClB,EAAM,WAAW,CAAG,CAAA,CACtB,CAEA,GAAI,AAnEI,AAmEQ,EAnEF,gBAAgB,CAAG,GAmEP,AAAO,MAAP,EAAY,CACpC,KAAO,EAAM,MAAM,CAAC,MAAM,EAAI,AAAwB,MAAxB,EAAa,IAAkB,EAAM,MAAM,CAAC,GAAG,GAC7E,EAAM,MAAM,CAAC,GAAG,GAChB,EAAM,gBAAgB,GACtB,EAAM,WAAW,CAAG,CAAA,CACtB,CAEA,GAAI,EAAQ,GAAQ,CAClB,GAAI,AAAmB,OAAnB,EAAM,SAAS,EAAa,EAAO,KAAK,CAAC,KAC3C,MAAO,WAET,GAAI,EAAO,KAAK,CAAC,OACf,MAAO,QAEX,CAYA,GATI,CAAA,EAAQ,EAAO,KAAK,CAAC,EAAS,CAAA,EAAA,GAChC,EAAM,MAAM,CAAC,IAAI,CAAC,CAAK,CAAC,EAAE,EAGxB,EAAO,KAAK,CAAC,EAAS,CAAA,IACxB,EAAM,MAAM,CAAC,GAAG,GAId,EAAO,KAAK,CAAC,gBAEf,OADA,EAAM,QAAQ,CAAG,EACV,EAAM,QAAQ,CAAC,EAAQ,GAIhC,GAAI,CAAC,GAAgB,CAAA,EAAO,KAAK,CAAC,IAAW,EAAO,KAAK,CAAC,EAAA,EACxD,MAAO,UAST,GAAI,EAAO,KAAK,CAAC,GACf,MAAO,WAIT,GAAI,EAAO,KAAK,CAAC,SAAU,CAAA,GAAQ,CACjC,IAAI,EAAY,OAAO,SACnB,EAAgB,CAAA,EASpB,GARI,EAAO,KAAK,CAAC,mCAAqC,CAAA,EAAgB,CAAA,CAAtE,EAEI,EAAO,KAAK,CAAC,mBAAqB,CAAA,EAAgB,CAAA,CAAtD,EACI,EAAO,KAAK,CAAC,eAAiB,CAAA,EAAgB,CAAA,CAAlD,EACI,EAAO,KAAK,CAAC,gBAAkB,CAAA,EAAgB,CAAA,CAAnD,EAEI,EAAO,KAAK,CAAC,gGAAkG,CAAA,EAAgB,CAAA,CAAnI,EACI,EAAO,KAAK,CAAC,6BAA+B,CAAA,EAAgB,CAAA,CAAhE,EACI,EAIF,OAFA,EAAO,KAAK,CAAC,GACb,EAAM,WAAW,CAAG,CAAA,EACb,QAEX,CAGA,GAAI,EAAO,KAAK,CAAC,KAEf,OADA,EAAM,QAAQ,CAAG,EACV,EAAM,QAAQ,CAAC,EAAQ,GAIhC,GAAI,EAAO,KAAK,CAAC,GAEf,CAAA,MAmGE,AAAyB,QAAzB,CADsB,EAnGY,EAAO,OAAO,IAoGtC,MAAM,CAAC,IACnB,EAAY,MACH,AAAyB,MAAzB,EAAU,MAAM,CAAC,KAC1B,CAAA,EAAY,GADP,EAtGL,EAAM,QAAQ,CAyGhB,SAAqB,CAAM,CAAE,CAAK,EAChC,GAAI,EAAO,GAAG,CAAC,MACb,EAAO,IAAI,QACN,GAAI,EAAO,KAAK,CAAC,GAGtB,OAFA,EAAM,QAAQ,CAAG,EACjB,EAAM,WAAW,CAAG,CAAA,EACb,SAEP,EAAO,GAAG,CAAC,QAGb,OADA,EAAO,QAAQ,CAAC,WACT,QACT,EApHS,EAAM,QAAQ,CAAC,EAAQ,EAA9B,CAGF,GAAI,EAAO,KAAK,CAAC,IAAU,EAAO,KAAK,CAAC,GACtC,MAAO,OAGT,GAAI,EAAO,KAAK,CAAC,GACf,OAAO,KAGT,GAAI,EAAO,KAAK,CAAC,GACf,MAAO,UAGT,GAAI,EAAO,KAAK,CAAC,GACf,MAAO,UAGT,IAAI,EAAe,EAAM,YAAY,EAAI,AAAmB,YAAnB,EAAM,SAAS,EACpD,AAAmB,SAAnB,EAAM,SAAS,EAAe,AAAmB,QAAnB,EAAM,SAAS,EAC7C,AAAmB,UAAnB,EAAM,SAAS,EAAgB,AAAmB,aAAnB,EAAM,SAAS,CAElD,GAAI,EAAO,KAAK,CAAC,UACf,AAAI,EACF,AAAI,AAAkB,MAAlB,EAAO,IAAI,IACb,EAAM,YAAY,CAAG,CAAA,EACd,aAET,EAAM,YAAY,CAAG,CAAA,EACd,QAET,EAAM,WAAW,CAAG,CAAA,EACb,YAKT,OADA,EAAO,IAAI,GACJ,OACT,CAEA,SAAS,EAAgB,CAAM,CAAE,CAAK,EAYpC,OAXA,EAAO,KAAK,CAAC,wBACT,EAAO,KAAK,CAAC,KACf,EAAM,gBAAgB,GACb,EAAO,KAAK,CAAC,MAAQ,EAAM,gBAAgB,CAAG,GACvD,EAAM,gBAAgB,GAEpB,EAAM,gBAAgB,CAAG,EAC3B,EAAO,KAAK,CAAC,eAAiB,EAAO,IAAI,GAChC,AAA0B,GAA1B,EAAM,gBAAgB,EAC/B,CAAA,EAAM,QAAQ,CAAG,CADZ,EAGA,SACT,CAEA,SAAS,EAAa,CAAM,CAAE,CAAK,EAYjC,OAXI,EAAO,KAAK,CAAC,OACf,EAAM,cAAc,GAElB,AAAC,EAAO,KAAK,CAAC,mBAChB,EAAO,SAAS,GAEd,EAAO,KAAK,CAAC,QACf,EAAM,cAAc,GAChB,AAAwB,GAAxB,EAAM,cAAc,EACtB,CAAA,EAAM,QAAQ,CAAG,CADnB,GAGK,SACT,CAEA,SAAS,EAAU,CAAM,CAAE,CAAK,EAC9B,IAAoB,EAAhB,EAAS,CAAA,EACb,GAAI,EAAO,KAAK,CAAC,GACf,EAAS,CAAA,OACJ,GAAI,EAAQ,EAAO,KAAK,CAAC,4BAA6B,CAC3D,IAAI,EAAQ,SAAS,CAAK,CAAC,EAAE,CAAE,IAC3B,CAAA,GAAS,OAAS,GAAS,KAAA,IAC7B,EAAS,CAAA,EACT,EAAO,IAAI,GAEf,MAAO,GAAI,EAAQ,EAAO,KAAK,CAAC,8BAA+B,CAC7D,IAAI,EAAQ,SAAS,CAAK,CAAC,EAAE,CAAE,IAC3B,GAAS,UACX,EAAS,CAAA,EACT,EAAO,IAAI,GAEf,QACA,AAAI,GACF,EAAM,WAAW,CAAG,CAAA,EACpB,EAAM,QAAQ,CAAG,EACV,WAEL,AAAC,EAAO,KAAK,CAAC,gBAAkB,EAAO,SAAS,GAChD,EAAO,KAAK,CAAC,MAAQ,CAAA,EAAM,QAAQ,CAAG,CAA1C,EACO,QACT,CAwBO,IAAM,EAAQ,CACnB,KAAM,QACN,WAAY,WACV,MAAO,CACL,SAAU,EACV,OAAQ,EAAE,CACV,UAAW,KACX,YAAa,CAAA,EACb,aAAc,CAAA,EACd,aAAc,EACd,eAAgB,EAChB,iBAAkB,EAClB,iBAAkB,EAClB,cAAe,EACjB,CACF,EAEA,MAAO,SAAS,CAAM,CAAE,CAAK,EAC3B,IAAI,EAAQ,EAAM,QAAQ,CAAC,EAAQ,GAC/B,EAAU,EAAO,OAAO,GAM5B,OAJI,GAAW,GACb,CAAA,EAAM,SAAS,CAAG,CADpB,EAIO,CACT,EAEA,OAAQ,SAAS,CAAK,CAAE,CAAS,CAAE,CAAE,EACnC,IAAI,EAAQ,EAMZ,MALK,CAAA,AAAc,MAAd,GAAqB,AAAc,MAAd,GAAqB,SAAS,IAAI,CAAC,IACxD,QAAQ,IAAI,CAAC,IAAc,WAAW,IAAI,CAAC,IAAc,YAAY,IAAI,CAAC,IAC1E,WAAW,IAAI,CAAC,EAAA,GACnB,CAAA,EAAQ,EAHV,EAKO,AAAC,CAAA,EAAM,MAAM,CAAC,MAAM,CAAG,CAAA,EAAS,EAAG,IAAI,AAChD,EAEA,aAAc,CACZ,cAAe,kCACf,cAAe,CAAC,KAAM,IAAK,MAAO,CAAC,KAAM,KAAM,MAAO,IAAI,CAAC,EAC3D,cAAe,CAAC,SAAU,CAAC,IAAK,IAAK,IAAK,IAAI,AAAA,EAC9C,aAAc,EAAa,MAAM,CAAC,EACpC,CACF,C","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/julia.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"ccfW1\", function(module, exports) {\n\n$parcel$export(module.exports, \"julia\", () => $8e12f7559dd02885$export$c77d038c2afbb452);\nfunction $8e12f7559dd02885$var$wordRegexp(words, end, pre) {\n    if (typeof pre === \"undefined\") pre = \"\";\n    if (typeof end === \"undefined\") end = \"\\\\b\";\n    return new RegExp(\"^\" + pre + \"((\" + words.join(\")|(\") + \"))\" + end);\n}\nvar $8e12f7559dd02885$var$octChar = \"\\\\\\\\[0-7]{1,3}\";\nvar $8e12f7559dd02885$var$hexChar = \"\\\\\\\\x[A-Fa-f0-9]{1,2}\";\nvar $8e12f7559dd02885$var$sChar = \"\\\\\\\\[abefnrtv0%?'\\\"\\\\\\\\]\";\nvar $8e12f7559dd02885$var$uChar = \"([^\\\\u0027\\\\u005C\\\\uD800-\\\\uDFFF]|[\\\\uD800-\\\\uDFFF][\\\\uDC00-\\\\uDFFF])\";\nvar $8e12f7559dd02885$var$asciiOperatorsList = [\n    \"[<>]:\",\n    \"[<>=]=\",\n    \"<<=?\",\n    \">>>?=?\",\n    \"=>\",\n    \"--?>\",\n    \"<--[->]?\",\n    \"\\\\/\\\\/\",\n    \"\\\\.{2,3}\",\n    \"[\\\\.\\\\\\\\%*+\\\\-<>!\\\\/^|&]=?\",\n    \"\\\\?\",\n    \"\\\\$\",\n    \"~\",\n    \":\"\n];\nvar $8e12f7559dd02885$var$operators = $8e12f7559dd02885$var$wordRegexp([\n    \"[<>]:\",\n    \"[<>=]=\",\n    \"[!=]==\",\n    \"<<=?\",\n    \">>>?=?\",\n    \"=>?\",\n    \"--?>\",\n    \"<--[->]?\",\n    \"\\\\/\\\\/\",\n    \"[\\\\\\\\%*+\\\\-<>!\\\\/^|&\\\\u00F7\\\\u22BB]=?\",\n    \"\\\\?\",\n    \"\\\\$\",\n    \"~\",\n    \":\",\n    \"\\\\u00D7\",\n    \"\\\\u2208\",\n    \"\\\\u2209\",\n    \"\\\\u220B\",\n    \"\\\\u220C\",\n    \"\\\\u2218\",\n    \"\\\\u221A\",\n    \"\\\\u221B\",\n    \"\\\\u2229\",\n    \"\\\\u222A\",\n    \"\\\\u2260\",\n    \"\\\\u2264\",\n    \"\\\\u2265\",\n    \"\\\\u2286\",\n    \"\\\\u2288\",\n    \"\\\\u228A\",\n    \"\\\\u22C5\",\n    \"\\\\b(in|isa)\\\\b(?!\\.?\\\\()\"\n], \"\");\nvar $8e12f7559dd02885$var$delimiters = /^[;,()[\\]{}]/;\nvar $8e12f7559dd02885$var$identifiers = /^[_A-Za-z\\u00A1-\\u2217\\u2219-\\uFFFF][\\w\\u00A1-\\u2217\\u2219-\\uFFFF]*!*/;\nvar $8e12f7559dd02885$var$chars = $8e12f7559dd02885$var$wordRegexp([\n    $8e12f7559dd02885$var$octChar,\n    $8e12f7559dd02885$var$hexChar,\n    $8e12f7559dd02885$var$sChar,\n    $8e12f7559dd02885$var$uChar\n], \"'\");\nvar $8e12f7559dd02885$var$openersList = [\n    \"begin\",\n    \"function\",\n    \"type\",\n    \"struct\",\n    \"immutable\",\n    \"let\",\n    \"macro\",\n    \"for\",\n    \"while\",\n    \"quote\",\n    \"if\",\n    \"else\",\n    \"elseif\",\n    \"try\",\n    \"finally\",\n    \"catch\",\n    \"do\"\n];\nvar $8e12f7559dd02885$var$closersList = [\n    \"end\",\n    \"else\",\n    \"elseif\",\n    \"catch\",\n    \"finally\"\n];\nvar $8e12f7559dd02885$var$keywordsList = [\n    \"if\",\n    \"else\",\n    \"elseif\",\n    \"while\",\n    \"for\",\n    \"begin\",\n    \"let\",\n    \"end\",\n    \"do\",\n    \"try\",\n    \"catch\",\n    \"finally\",\n    \"return\",\n    \"break\",\n    \"continue\",\n    \"global\",\n    \"local\",\n    \"const\",\n    \"export\",\n    \"import\",\n    \"importall\",\n    \"using\",\n    \"function\",\n    \"where\",\n    \"macro\",\n    \"module\",\n    \"baremodule\",\n    \"struct\",\n    \"type\",\n    \"mutable\",\n    \"immutable\",\n    \"quote\",\n    \"typealias\",\n    \"abstract\",\n    \"primitive\",\n    \"bitstype\"\n];\nvar $8e12f7559dd02885$var$builtinsList = [\n    \"true\",\n    \"false\",\n    \"nothing\",\n    \"NaN\",\n    \"Inf\"\n];\nvar $8e12f7559dd02885$var$openers = $8e12f7559dd02885$var$wordRegexp($8e12f7559dd02885$var$openersList);\nvar $8e12f7559dd02885$var$closers = $8e12f7559dd02885$var$wordRegexp($8e12f7559dd02885$var$closersList);\nvar $8e12f7559dd02885$var$keywords = $8e12f7559dd02885$var$wordRegexp($8e12f7559dd02885$var$keywordsList);\nvar $8e12f7559dd02885$var$builtins = $8e12f7559dd02885$var$wordRegexp($8e12f7559dd02885$var$builtinsList);\nvar $8e12f7559dd02885$var$macro = /^@[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\nvar $8e12f7559dd02885$var$symbol = /^:[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\nvar $8e12f7559dd02885$var$stringPrefixes = /^(`|([_A-Za-z\\u00A1-\\uFFFF]*\"(\"\")?))/;\nvar $8e12f7559dd02885$var$macroOperators = $8e12f7559dd02885$var$wordRegexp($8e12f7559dd02885$var$asciiOperatorsList, \"\", \"@\");\nvar $8e12f7559dd02885$var$symbolOperators = $8e12f7559dd02885$var$wordRegexp($8e12f7559dd02885$var$asciiOperatorsList, \"\", \":\");\nfunction $8e12f7559dd02885$var$inArray(state) {\n    return state.nestedArrays > 0;\n}\nfunction $8e12f7559dd02885$var$inGenerator(state) {\n    return state.nestedGenerators > 0;\n}\nfunction $8e12f7559dd02885$var$currentScope(state, n) {\n    if (typeof n === \"undefined\") n = 0;\n    if (state.scopes.length <= n) return null;\n    return state.scopes[state.scopes.length - (n + 1)];\n}\n// tokenizers\nfunction $8e12f7559dd02885$var$tokenBase(stream, state) {\n    // Handle multiline comments\n    if (stream.match('#=', false)) {\n        state.tokenize = $8e12f7559dd02885$var$tokenComment;\n        return state.tokenize(stream, state);\n    }\n    // Handle scope changes\n    var leavingExpr = state.leavingExpr;\n    if (stream.sol()) leavingExpr = false;\n    state.leavingExpr = false;\n    if (leavingExpr) {\n        if (stream.match(/^'+/)) return \"operator\";\n    }\n    if (stream.match(/\\.{4,}/)) return \"error\";\n    else if (stream.match(/\\.{1,3}/)) return \"operator\";\n    if (stream.eatSpace()) return null;\n    var ch = stream.peek();\n    // Handle single line comments\n    if (ch === '#') {\n        stream.skipToEnd();\n        return \"comment\";\n    }\n    if (ch === '[') {\n        state.scopes.push('[');\n        state.nestedArrays++;\n    }\n    if (ch === '(') {\n        state.scopes.push('(');\n        state.nestedGenerators++;\n    }\n    if ($8e12f7559dd02885$var$inArray(state) && ch === ']') {\n        while(state.scopes.length && $8e12f7559dd02885$var$currentScope(state) !== \"[\")state.scopes.pop();\n        state.scopes.pop();\n        state.nestedArrays--;\n        state.leavingExpr = true;\n    }\n    if ($8e12f7559dd02885$var$inGenerator(state) && ch === ')') {\n        while(state.scopes.length && $8e12f7559dd02885$var$currentScope(state) !== \"(\")state.scopes.pop();\n        state.scopes.pop();\n        state.nestedGenerators--;\n        state.leavingExpr = true;\n    }\n    if ($8e12f7559dd02885$var$inArray(state)) {\n        if (state.lastToken == \"end\" && stream.match(':')) return \"operator\";\n        if (stream.match('end')) return \"number\";\n    }\n    var match;\n    if (match = stream.match($8e12f7559dd02885$var$openers, false)) state.scopes.push(match[0]);\n    if (stream.match($8e12f7559dd02885$var$closers, false)) state.scopes.pop();\n    // Handle type annotations\n    if (stream.match(/^::(?![:\\$])/)) {\n        state.tokenize = $8e12f7559dd02885$var$tokenAnnotation;\n        return state.tokenize(stream, state);\n    }\n    // Handle symbols\n    if (!leavingExpr && (stream.match($8e12f7559dd02885$var$symbol) || stream.match($8e12f7559dd02885$var$symbolOperators))) return \"builtin\";\n    // Handle parametric types\n    //if (stream.match(/^{[^}]*}(?=\\()/)) {\n    //  return \"builtin\";\n    //}\n    // Handle operators and Delimiters\n    if (stream.match($8e12f7559dd02885$var$operators)) return \"operator\";\n    // Handle Number Literals\n    if (stream.match(/^\\.?\\d/, false)) {\n        var imMatcher = RegExp(/^im\\b/);\n        var numberLiteral = false;\n        if (stream.match(/^0x\\.[0-9a-f_]+p[\\+\\-]?[_\\d]+/i)) numberLiteral = true;\n        // Integers\n        if (stream.match(/^0x[0-9a-f_]+/i)) numberLiteral = true;\n         // Hex\n        if (stream.match(/^0b[01_]+/i)) numberLiteral = true;\n         // Binary\n        if (stream.match(/^0o[0-7_]+/i)) numberLiteral = true;\n         // Octal\n        // Floats\n        if (stream.match(/^(?:(?:\\d[_\\d]*)?\\.(?!\\.)(?:\\d[_\\d]*)?|\\d[_\\d]*\\.(?!\\.)(?:\\d[_\\d]*))?([Eef][\\+\\-]?[_\\d]+)?/i)) numberLiteral = true;\n        if (stream.match(/^\\d[_\\d]*(e[\\+\\-]?\\d+)?/i)) numberLiteral = true;\n         // Decimal\n        if (numberLiteral) {\n            // Integer literals may be \"long\"\n            stream.match(imMatcher);\n            state.leavingExpr = true;\n            return \"number\";\n        }\n    }\n    // Handle Chars\n    if (stream.match(\"'\")) {\n        state.tokenize = $8e12f7559dd02885$var$tokenChar;\n        return state.tokenize(stream, state);\n    }\n    // Handle Strings\n    if (stream.match($8e12f7559dd02885$var$stringPrefixes)) {\n        state.tokenize = $8e12f7559dd02885$var$tokenStringFactory(stream.current());\n        return state.tokenize(stream, state);\n    }\n    if (stream.match($8e12f7559dd02885$var$macro) || stream.match($8e12f7559dd02885$var$macroOperators)) return \"meta\";\n    if (stream.match($8e12f7559dd02885$var$delimiters)) return null;\n    if (stream.match($8e12f7559dd02885$var$keywords)) return \"keyword\";\n    if (stream.match($8e12f7559dd02885$var$builtins)) return \"builtin\";\n    var isDefinition = state.isDefinition || state.lastToken == \"function\" || state.lastToken == \"macro\" || state.lastToken == \"type\" || state.lastToken == \"struct\" || state.lastToken == \"immutable\";\n    if (stream.match($8e12f7559dd02885$var$identifiers)) {\n        if (isDefinition) {\n            if (stream.peek() === '.') {\n                state.isDefinition = true;\n                return \"variable\";\n            }\n            state.isDefinition = false;\n            return \"def\";\n        }\n        state.leavingExpr = true;\n        return \"variable\";\n    }\n    // Handle non-detected items\n    stream.next();\n    return \"error\";\n}\nfunction $8e12f7559dd02885$var$tokenAnnotation(stream, state) {\n    stream.match(/.*?(?=[,;{}()=\\s]|$)/);\n    if (stream.match('{')) state.nestedParameters++;\n    else if (stream.match('}') && state.nestedParameters > 0) state.nestedParameters--;\n    if (state.nestedParameters > 0) stream.match(/.*?(?={|})/) || stream.next();\n    else if (state.nestedParameters == 0) state.tokenize = $8e12f7559dd02885$var$tokenBase;\n    return \"builtin\";\n}\nfunction $8e12f7559dd02885$var$tokenComment(stream, state) {\n    if (stream.match('#=')) state.nestedComments++;\n    if (!stream.match(/.*?(?=(#=|=#))/)) stream.skipToEnd();\n    if (stream.match('=#')) {\n        state.nestedComments--;\n        if (state.nestedComments == 0) state.tokenize = $8e12f7559dd02885$var$tokenBase;\n    }\n    return \"comment\";\n}\nfunction $8e12f7559dd02885$var$tokenChar(stream, state) {\n    var isChar = false, match;\n    if (stream.match($8e12f7559dd02885$var$chars)) isChar = true;\n    else if (match = stream.match(/\\\\u([a-f0-9]{1,4})(?=')/i)) {\n        var value = parseInt(match[1], 16);\n        if (value <= 55295 || value >= 57344) {\n            isChar = true;\n            stream.next();\n        }\n    } else if (match = stream.match(/\\\\U([A-Fa-f0-9]{5,8})(?=')/)) {\n        var value = parseInt(match[1], 16);\n        if (value <= 1114111) {\n            isChar = true;\n            stream.next();\n        }\n    }\n    if (isChar) {\n        state.leavingExpr = true;\n        state.tokenize = $8e12f7559dd02885$var$tokenBase;\n        return \"string\";\n    }\n    if (!stream.match(/^[^']+(?=')/)) stream.skipToEnd();\n    if (stream.match(\"'\")) state.tokenize = $8e12f7559dd02885$var$tokenBase;\n    return \"error\";\n}\nfunction $8e12f7559dd02885$var$tokenStringFactory(delimiter) {\n    if (delimiter.substr(-3) === '\"\"\"') delimiter = '\"\"\"';\n    else if (delimiter.substr(-1) === '\"') delimiter = '\"';\n    function tokenString(stream, state) {\n        if (stream.eat('\\\\')) stream.next();\n        else if (stream.match(delimiter)) {\n            state.tokenize = $8e12f7559dd02885$var$tokenBase;\n            state.leavingExpr = true;\n            return \"string\";\n        } else stream.eat(/[`\"]/);\n        stream.eatWhile(/[^\\\\`\"]/);\n        return \"string\";\n    }\n    return tokenString;\n}\nconst $8e12f7559dd02885$export$c77d038c2afbb452 = {\n    name: \"julia\",\n    startState: function() {\n        return {\n            tokenize: $8e12f7559dd02885$var$tokenBase,\n            scopes: [],\n            lastToken: null,\n            leavingExpr: false,\n            isDefinition: false,\n            nestedArrays: 0,\n            nestedComments: 0,\n            nestedGenerators: 0,\n            nestedParameters: 0,\n            firstParenPos: -1\n        };\n    },\n    token: function(stream, state) {\n        var style = state.tokenize(stream, state);\n        var current = stream.current();\n        if (current && style) state.lastToken = current;\n        return style;\n    },\n    indent: function(state, textAfter, cx) {\n        var delta = 0;\n        if (textAfter === ']' || textAfter === ')' || /^end\\b/.test(textAfter) || /^else/.test(textAfter) || /^catch\\b/.test(textAfter) || /^elseif\\b/.test(textAfter) || /^finally/.test(textAfter)) delta = -1;\n        return (state.scopes.length + delta) * cx.unit;\n    },\n    languageData: {\n        indentOnInput: /^\\s*(end|else|catch|finally)\\b$/,\n        commentTokens: {\n            line: \"#\",\n            block: {\n                open: \"#=\",\n                close: \"=#\"\n            }\n        },\n        closeBrackets: {\n            brackets: [\n                \"(\",\n                \"[\",\n                \"{\",\n                '\"'\n            ]\n        },\n        autocomplete: $8e12f7559dd02885$var$keywordsList.concat($8e12f7559dd02885$var$builtinsList)\n    }\n};\n\n});\n\n\n//# sourceMappingURL=julia.2adc0ae6.js.map\n","function wordRegexp(words, end, pre) {\n  if (typeof pre === \"undefined\") pre = \"\";\n  if (typeof end === \"undefined\") { end = \"\\\\b\"; }\n  return new RegExp(\"^\" + pre + \"((\" + words.join(\")|(\") + \"))\" + end);\n}\n\nvar octChar = \"\\\\\\\\[0-7]{1,3}\";\nvar hexChar = \"\\\\\\\\x[A-Fa-f0-9]{1,2}\";\nvar sChar = \"\\\\\\\\[abefnrtv0%?'\\\"\\\\\\\\]\";\nvar uChar = \"([^\\\\u0027\\\\u005C\\\\uD800-\\\\uDFFF]|[\\\\uD800-\\\\uDFFF][\\\\uDC00-\\\\uDFFF])\";\n\nvar asciiOperatorsList = [\n  \"[<>]:\", \"[<>=]=\", \"<<=?\", \">>>?=?\", \"=>\", \"--?>\", \"<--[->]?\", \"\\\\/\\\\/\",\n  \"\\\\.{2,3}\", \"[\\\\.\\\\\\\\%*+\\\\-<>!\\\\/^|&]=?\", \"\\\\?\", \"\\\\$\", \"~\", \":\"\n];\nvar operators = wordRegexp([\n  \"[<>]:\", \"[<>=]=\", \"[!=]==\", \"<<=?\", \">>>?=?\", \"=>?\", \"--?>\", \"<--[->]?\", \"\\\\/\\\\/\",\n  \"[\\\\\\\\%*+\\\\-<>!\\\\/^|&\\\\u00F7\\\\u22BB]=?\", \"\\\\?\", \"\\\\$\", \"~\", \":\",\n  \"\\\\u00D7\", \"\\\\u2208\", \"\\\\u2209\", \"\\\\u220B\", \"\\\\u220C\", \"\\\\u2218\",\n  \"\\\\u221A\", \"\\\\u221B\", \"\\\\u2229\", \"\\\\u222A\", \"\\\\u2260\", \"\\\\u2264\",\n  \"\\\\u2265\", \"\\\\u2286\", \"\\\\u2288\", \"\\\\u228A\", \"\\\\u22C5\",\n  \"\\\\b(in|isa)\\\\b(?!\\.?\\\\()\"\n], \"\");\nvar delimiters = /^[;,()[\\]{}]/;\nvar identifiers = /^[_A-Za-z\\u00A1-\\u2217\\u2219-\\uFFFF][\\w\\u00A1-\\u2217\\u2219-\\uFFFF]*!*/;\n\nvar chars = wordRegexp([octChar, hexChar, sChar, uChar], \"'\");\n\nvar openersList = [\"begin\", \"function\", \"type\", \"struct\", \"immutable\", \"let\",\n                   \"macro\", \"for\", \"while\", \"quote\", \"if\", \"else\", \"elseif\", \"try\",\n                   \"finally\", \"catch\", \"do\"];\n\nvar closersList = [\"end\", \"else\", \"elseif\", \"catch\", \"finally\"];\n\nvar keywordsList = [\"if\", \"else\", \"elseif\", \"while\", \"for\", \"begin\", \"let\",\n                    \"end\", \"do\", \"try\", \"catch\", \"finally\", \"return\", \"break\", \"continue\",\n                    \"global\", \"local\", \"const\", \"export\", \"import\", \"importall\", \"using\",\n                    \"function\", \"where\", \"macro\", \"module\", \"baremodule\", \"struct\", \"type\",\n                    \"mutable\", \"immutable\", \"quote\", \"typealias\", \"abstract\", \"primitive\",\n                    \"bitstype\"];\n\nvar builtinsList = [\"true\", \"false\", \"nothing\", \"NaN\", \"Inf\"];\n\nvar openers = wordRegexp(openersList);\nvar closers = wordRegexp(closersList);\nvar keywords = wordRegexp(keywordsList);\nvar builtins = wordRegexp(builtinsList);\n\nvar macro = /^@[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\nvar symbol = /^:[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\nvar stringPrefixes = /^(`|([_A-Za-z\\u00A1-\\uFFFF]*\"(\"\")?))/;\n\nvar macroOperators = wordRegexp(asciiOperatorsList, \"\", \"@\");\nvar symbolOperators = wordRegexp(asciiOperatorsList, \"\", \":\");\n\nfunction inArray(state) {\n  return (state.nestedArrays > 0);\n}\n\nfunction inGenerator(state) {\n  return (state.nestedGenerators > 0);\n}\n\nfunction currentScope(state, n) {\n  if (typeof(n) === \"undefined\") { n = 0; }\n  if (state.scopes.length <= n) {\n    return null;\n  }\n  return state.scopes[state.scopes.length - (n + 1)];\n}\n\n// tokenizers\nfunction tokenBase(stream, state) {\n  // Handle multiline comments\n  if (stream.match('#=', false)) {\n    state.tokenize = tokenComment;\n    return state.tokenize(stream, state);\n  }\n\n  // Handle scope changes\n  var leavingExpr = state.leavingExpr;\n  if (stream.sol()) {\n    leavingExpr = false;\n  }\n  state.leavingExpr = false;\n\n  if (leavingExpr) {\n    if (stream.match(/^'+/)) {\n      return \"operator\";\n    }\n  }\n\n  if (stream.match(/\\.{4,}/)) {\n    return \"error\";\n  } else if (stream.match(/\\.{1,3}/)) {\n    return \"operator\";\n  }\n\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  var ch = stream.peek();\n\n  // Handle single line comments\n  if (ch === '#') {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  if (ch === '[') {\n    state.scopes.push('[');\n    state.nestedArrays++;\n  }\n\n  if (ch === '(') {\n    state.scopes.push('(');\n    state.nestedGenerators++;\n  }\n\n  if (inArray(state) && ch === ']') {\n    while (state.scopes.length && currentScope(state) !== \"[\") { state.scopes.pop(); }\n    state.scopes.pop();\n    state.nestedArrays--;\n    state.leavingExpr = true;\n  }\n\n  if (inGenerator(state) && ch === ')') {\n    while (state.scopes.length && currentScope(state) !== \"(\") { state.scopes.pop(); }\n    state.scopes.pop();\n    state.nestedGenerators--;\n    state.leavingExpr = true;\n  }\n\n  if (inArray(state)) {\n    if (state.lastToken == \"end\" && stream.match(':')) {\n      return \"operator\";\n    }\n    if (stream.match('end')) {\n      return \"number\";\n    }\n  }\n\n  var match;\n  if (match = stream.match(openers, false)) {\n    state.scopes.push(match[0]);\n  }\n\n  if (stream.match(closers, false)) {\n    state.scopes.pop();\n  }\n\n  // Handle type annotations\n  if (stream.match(/^::(?![:\\$])/)) {\n    state.tokenize = tokenAnnotation;\n    return state.tokenize(stream, state);\n  }\n\n  // Handle symbols\n  if (!leavingExpr && (stream.match(symbol) || stream.match(symbolOperators))) {\n    return \"builtin\";\n  }\n\n  // Handle parametric types\n  //if (stream.match(/^{[^}]*}(?=\\()/)) {\n  //  return \"builtin\";\n  //}\n\n  // Handle operators and Delimiters\n  if (stream.match(operators)) {\n    return \"operator\";\n  }\n\n  // Handle Number Literals\n  if (stream.match(/^\\.?\\d/, false)) {\n    var imMatcher = RegExp(/^im\\b/);\n    var numberLiteral = false;\n    if (stream.match(/^0x\\.[0-9a-f_]+p[\\+\\-]?[_\\d]+/i)) { numberLiteral = true; }\n    // Integers\n    if (stream.match(/^0x[0-9a-f_]+/i)) { numberLiteral = true; } // Hex\n    if (stream.match(/^0b[01_]+/i)) { numberLiteral = true; } // Binary\n    if (stream.match(/^0o[0-7_]+/i)) { numberLiteral = true; } // Octal\n    // Floats\n    if (stream.match(/^(?:(?:\\d[_\\d]*)?\\.(?!\\.)(?:\\d[_\\d]*)?|\\d[_\\d]*\\.(?!\\.)(?:\\d[_\\d]*))?([Eef][\\+\\-]?[_\\d]+)?/i)) { numberLiteral = true; }\n    if (stream.match(/^\\d[_\\d]*(e[\\+\\-]?\\d+)?/i)) { numberLiteral = true; } // Decimal\n    if (numberLiteral) {\n      // Integer literals may be \"long\"\n      stream.match(imMatcher);\n      state.leavingExpr = true;\n      return \"number\";\n    }\n  }\n\n  // Handle Chars\n  if (stream.match(\"'\")) {\n    state.tokenize = tokenChar;\n    return state.tokenize(stream, state);\n  }\n\n  // Handle Strings\n  if (stream.match(stringPrefixes)) {\n    state.tokenize = tokenStringFactory(stream.current());\n    return state.tokenize(stream, state);\n  }\n\n  if (stream.match(macro) || stream.match(macroOperators)) {\n    return \"meta\";\n  }\n\n  if (stream.match(delimiters)) {\n    return null;\n  }\n\n  if (stream.match(keywords)) {\n    return \"keyword\";\n  }\n\n  if (stream.match(builtins)) {\n    return \"builtin\";\n  }\n\n  var isDefinition = state.isDefinition || state.lastToken == \"function\" ||\n      state.lastToken == \"macro\" || state.lastToken == \"type\" ||\n      state.lastToken == \"struct\" || state.lastToken == \"immutable\";\n\n  if (stream.match(identifiers)) {\n    if (isDefinition) {\n      if (stream.peek() === '.') {\n        state.isDefinition = true;\n        return \"variable\";\n      }\n      state.isDefinition = false;\n      return \"def\";\n    }\n    state.leavingExpr = true;\n    return \"variable\";\n  }\n\n  // Handle non-detected items\n  stream.next();\n  return \"error\";\n}\n\nfunction tokenAnnotation(stream, state) {\n  stream.match(/.*?(?=[,;{}()=\\s]|$)/);\n  if (stream.match('{')) {\n    state.nestedParameters++;\n  } else if (stream.match('}') && state.nestedParameters > 0) {\n    state.nestedParameters--;\n  }\n  if (state.nestedParameters > 0) {\n    stream.match(/.*?(?={|})/) || stream.next();\n  } else if (state.nestedParameters == 0) {\n    state.tokenize = tokenBase;\n  }\n  return \"builtin\";\n}\n\nfunction tokenComment(stream, state) {\n  if (stream.match('#=')) {\n    state.nestedComments++;\n  }\n  if (!stream.match(/.*?(?=(#=|=#))/)) {\n    stream.skipToEnd();\n  }\n  if (stream.match('=#')) {\n    state.nestedComments--;\n    if (state.nestedComments == 0)\n      state.tokenize = tokenBase;\n  }\n  return \"comment\";\n}\n\nfunction tokenChar(stream, state) {\n  var isChar = false, match;\n  if (stream.match(chars)) {\n    isChar = true;\n  } else if (match = stream.match(/\\\\u([a-f0-9]{1,4})(?=')/i)) {\n    var value = parseInt(match[1], 16);\n    if (value <= 55295 || value >= 57344) { // (U+0,U+D7FF), (U+E000,U+FFFF)\n      isChar = true;\n      stream.next();\n    }\n  } else if (match = stream.match(/\\\\U([A-Fa-f0-9]{5,8})(?=')/)) {\n    var value = parseInt(match[1], 16);\n    if (value <= 1114111) { // U+10FFFF\n      isChar = true;\n      stream.next();\n    }\n  }\n  if (isChar) {\n    state.leavingExpr = true;\n    state.tokenize = tokenBase;\n    return \"string\";\n  }\n  if (!stream.match(/^[^']+(?=')/)) { stream.skipToEnd(); }\n  if (stream.match(\"'\")) { state.tokenize = tokenBase; }\n  return \"error\";\n}\n\nfunction tokenStringFactory(delimiter) {\n  if (delimiter.substr(-3) === '\"\"\"') {\n    delimiter = '\"\"\"';\n  } else if (delimiter.substr(-1) === '\"') {\n    delimiter = '\"';\n  }\n  function tokenString(stream, state) {\n    if (stream.eat('\\\\')) {\n      stream.next();\n    } else if (stream.match(delimiter)) {\n      state.tokenize = tokenBase;\n      state.leavingExpr = true;\n      return \"string\";\n    } else {\n      stream.eat(/[`\"]/);\n    }\n    stream.eatWhile(/[^\\\\`\"]/);\n    return \"string\";\n  }\n  return tokenString;\n}\n\nexport const julia = {\n  name: \"julia\",\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      scopes: [],\n      lastToken: null,\n      leavingExpr: false,\n      isDefinition: false,\n      nestedArrays: 0,\n      nestedComments: 0,\n      nestedGenerators: 0,\n      nestedParameters: 0,\n      firstParenPos: -1\n    };\n  },\n\n  token: function(stream, state) {\n    var style = state.tokenize(stream, state);\n    var current = stream.current();\n\n    if (current && style) {\n      state.lastToken = current;\n    }\n\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    var delta = 0;\n    if ( textAfter === ']' || textAfter === ')' || /^end\\b/.test(textAfter) ||\n         /^else/.test(textAfter) || /^catch\\b/.test(textAfter) || /^elseif\\b/.test(textAfter) ||\n         /^finally/.test(textAfter) ) {\n      delta = -1;\n    }\n    return (state.scopes.length + delta) * cx.unit;\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*(end|else|catch|finally)\\b$/,\n    commentTokens: {line: \"#\", block: {open: \"#=\", close: \"=#\"}},\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", '\"']},\n    autocomplete: keywordsList.concat(builtinsList)\n  }\n};\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","$8e12f7559dd02885$var$wordRegexp","words","end","pre","RegExp","join","Object","defineProperty","get","$8e12f7559dd02885$export$c77d038c2afbb452","set","s","enumerable","configurable","$8e12f7559dd02885$var$asciiOperatorsList","$8e12f7559dd02885$var$operators","$8e12f7559dd02885$var$delimiters","$8e12f7559dd02885$var$identifiers","$8e12f7559dd02885$var$chars","$8e12f7559dd02885$var$keywordsList","$8e12f7559dd02885$var$builtinsList","$8e12f7559dd02885$var$openers","$8e12f7559dd02885$var$closers","$8e12f7559dd02885$var$keywords","$8e12f7559dd02885$var$builtins","$8e12f7559dd02885$var$macro","$8e12f7559dd02885$var$symbol","$8e12f7559dd02885$var$stringPrefixes","$8e12f7559dd02885$var$macroOperators","$8e12f7559dd02885$var$symbolOperators","$8e12f7559dd02885$var$inArray","state","nestedArrays","$8e12f7559dd02885$var$currentScope","n","scopes","length","$8e12f7559dd02885$var$tokenBase","stream","match","tokenize","$8e12f7559dd02885$var$tokenComment","delimiter","leavingExpr","sol","eatSpace","ch","peek","skipToEnd","push","nestedGenerators","pop","$8e12f7559dd02885$var$inGenerator","lastToken","$8e12f7559dd02885$var$tokenAnnotation","imMatcher","numberLiteral","$8e12f7559dd02885$var$tokenChar","current","substr","eat","next","eatWhile","isDefinition","nestedParameters","nestedComments","isChar","value","parseInt","name","startState","firstParenPos","token","style","indent","textAfter","cx","delta","test","unit","languageData","indentOnInput","commentTokens","line","block","open","close","closeBrackets","brackets","autocomplete","concat"],"version":3,"file":"julia.2adc0ae6.js.map"}