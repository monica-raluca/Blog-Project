{"mappings":"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","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/octave.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"cPOFn\", function(module, exports) {\n\n$parcel$export(module.exports, \"octave\", () => $95818cc1d4fd592d$export$b50136c97e7d5ebf);\nfunction $95818cc1d4fd592d$var$wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n}\nvar $95818cc1d4fd592d$var$singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&|\\\\^~<>!@'\\\\\\\\]\");\nvar $95818cc1d4fd592d$var$singleDelimiters = new RegExp('^[\\\\(\\\\[\\\\{\\\\},:=;\\\\.]');\nvar $95818cc1d4fd592d$var$doubleOperators = new RegExp(\"^((==)|(~=)|(<=)|(>=)|(<<)|(>>)|(\\\\.[\\\\+\\\\-\\\\*/\\\\^\\\\\\\\]))\");\nvar $95818cc1d4fd592d$var$doubleDelimiters = new RegExp(\"^((!=)|(\\\\+=)|(\\\\-=)|(\\\\*=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\nvar $95818cc1d4fd592d$var$tripleDelimiters = new RegExp(\"^((>>=)|(<<=))\");\nvar $95818cc1d4fd592d$var$expressionEnd = new RegExp(\"^[\\\\]\\\\)]\");\nvar $95818cc1d4fd592d$var$identifiers = new RegExp(\"^[_A-Za-z\\xa1-\\uffff][_A-Za-z0-9\\xa1-\\uffff]*\");\nvar $95818cc1d4fd592d$var$builtins = $95818cc1d4fd592d$var$wordRegexp([\n    'error',\n    'eval',\n    'function',\n    'abs',\n    'acos',\n    'atan',\n    'asin',\n    'cos',\n    'cosh',\n    'exp',\n    'log',\n    'prod',\n    'sum',\n    'log10',\n    'max',\n    'min',\n    'sign',\n    'sin',\n    'sinh',\n    'sqrt',\n    'tan',\n    'reshape',\n    'break',\n    'zeros',\n    'default',\n    'margin',\n    'round',\n    'ones',\n    'rand',\n    'syn',\n    'ceil',\n    'floor',\n    'size',\n    'clear',\n    'zeros',\n    'eye',\n    'mean',\n    'std',\n    'cov',\n    'det',\n    'eig',\n    'inv',\n    'norm',\n    'rank',\n    'trace',\n    'expm',\n    'logm',\n    'sqrtm',\n    'linspace',\n    'plot',\n    'title',\n    'xlabel',\n    'ylabel',\n    'legend',\n    'text',\n    'grid',\n    'meshgrid',\n    'mesh',\n    'num2str',\n    'fft',\n    'ifft',\n    'arrayfun',\n    'cellfun',\n    'input',\n    'fliplr',\n    'flipud',\n    'ismember'\n]);\nvar $95818cc1d4fd592d$var$keywords = $95818cc1d4fd592d$var$wordRegexp([\n    'return',\n    'case',\n    'switch',\n    'else',\n    'elseif',\n    'end',\n    'endif',\n    'endfunction',\n    'if',\n    'otherwise',\n    'do',\n    'for',\n    'while',\n    'try',\n    'catch',\n    'classdef',\n    'properties',\n    'events',\n    'methods',\n    'global',\n    'persistent',\n    'endfor',\n    'endwhile',\n    'printf',\n    'sprintf',\n    'disp',\n    'until',\n    'continue',\n    'pkg'\n]);\n// tokenizers\nfunction $95818cc1d4fd592d$var$tokenTranspose(stream, state) {\n    if (!stream.sol() && stream.peek() === '\\'') {\n        stream.next();\n        state.tokenize = $95818cc1d4fd592d$var$tokenBase;\n        return 'operator';\n    }\n    state.tokenize = $95818cc1d4fd592d$var$tokenBase;\n    return $95818cc1d4fd592d$var$tokenBase(stream, state);\n}\nfunction $95818cc1d4fd592d$var$tokenComment(stream, state) {\n    if (stream.match(/^.*%}/)) {\n        state.tokenize = $95818cc1d4fd592d$var$tokenBase;\n        return 'comment';\n    }\n    stream.skipToEnd();\n    return 'comment';\n}\nfunction $95818cc1d4fd592d$var$tokenBase(stream, state) {\n    // whitespaces\n    if (stream.eatSpace()) return null;\n    // Handle one line Comments\n    if (stream.match('%{')) {\n        state.tokenize = $95818cc1d4fd592d$var$tokenComment;\n        stream.skipToEnd();\n        return 'comment';\n    }\n    if (stream.match(/^[%#]/)) {\n        stream.skipToEnd();\n        return 'comment';\n    }\n    // Handle Number Literals\n    if (stream.match(/^[0-9\\.+-]/, false)) {\n        if (stream.match(/^[+-]?0x[0-9a-fA-F]+[ij]?/)) {\n            stream.tokenize = $95818cc1d4fd592d$var$tokenBase;\n            return 'number';\n        }\n        if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?[ij]?/)) return 'number';\n        if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?[ij]?/)) return 'number';\n    }\n    if (stream.match($95818cc1d4fd592d$var$wordRegexp([\n        'nan',\n        'NaN',\n        'inf',\n        'Inf'\n    ]))) return 'number';\n    // Handle Strings\n    var m = stream.match(/^\"(?:[^\"]|\"\")*(\"|$)/) || stream.match(/^'(?:[^']|'')*('|$)/);\n    if (m) return m[1] ? 'string' : \"error\";\n    // Handle words\n    if (stream.match($95818cc1d4fd592d$var$keywords)) return 'keyword';\n    if (stream.match($95818cc1d4fd592d$var$builtins)) return 'builtin';\n    if (stream.match($95818cc1d4fd592d$var$identifiers)) return 'variable';\n    if (stream.match($95818cc1d4fd592d$var$singleOperators) || stream.match($95818cc1d4fd592d$var$doubleOperators)) return 'operator';\n    if (stream.match($95818cc1d4fd592d$var$singleDelimiters) || stream.match($95818cc1d4fd592d$var$doubleDelimiters) || stream.match($95818cc1d4fd592d$var$tripleDelimiters)) return null;\n    if (stream.match($95818cc1d4fd592d$var$expressionEnd)) {\n        state.tokenize = $95818cc1d4fd592d$var$tokenTranspose;\n        return null;\n    }\n    // Handle non-detected items\n    stream.next();\n    return 'error';\n}\nconst $95818cc1d4fd592d$export$b50136c97e7d5ebf = {\n    name: \"octave\",\n    startState: function() {\n        return {\n            tokenize: $95818cc1d4fd592d$var$tokenBase\n        };\n    },\n    token: function(stream, state) {\n        var style = state.tokenize(stream, state);\n        if (style === 'number' || style === 'variable') state.tokenize = $95818cc1d4fd592d$var$tokenTranspose;\n        return style;\n    },\n    languageData: {\n        commentTokens: {\n            line: \"%\"\n        }\n    }\n};\n\n});\n\n\n//# sourceMappingURL=octave.3a476451.js.map\n","function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n}\n\nvar singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&|\\\\^~<>!@'\\\\\\\\]\");\nvar singleDelimiters = new RegExp('^[\\\\(\\\\[\\\\{\\\\},:=;\\\\.]');\nvar doubleOperators = new RegExp(\"^((==)|(~=)|(<=)|(>=)|(<<)|(>>)|(\\\\.[\\\\+\\\\-\\\\*/\\\\^\\\\\\\\]))\");\nvar doubleDelimiters = new RegExp(\"^((!=)|(\\\\+=)|(\\\\-=)|(\\\\*=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\nvar tripleDelimiters = new RegExp(\"^((>>=)|(<<=))\");\nvar expressionEnd = new RegExp(\"^[\\\\]\\\\)]\");\nvar identifiers = new RegExp(\"^[_A-Za-z\\xa1-\\uffff][_A-Za-z0-9\\xa1-\\uffff]*\");\n\nvar builtins = wordRegexp([\n  'error', 'eval', 'function', 'abs', 'acos', 'atan', 'asin', 'cos',\n  'cosh', 'exp', 'log', 'prod', 'sum', 'log10', 'max', 'min', 'sign', 'sin', 'sinh',\n  'sqrt', 'tan', 'reshape', 'break', 'zeros', 'default', 'margin', 'round', 'ones',\n  'rand', 'syn', 'ceil', 'floor', 'size', 'clear', 'zeros', 'eye', 'mean', 'std', 'cov',\n  'det', 'eig', 'inv', 'norm', 'rank', 'trace', 'expm', 'logm', 'sqrtm', 'linspace', 'plot',\n  'title', 'xlabel', 'ylabel', 'legend', 'text', 'grid', 'meshgrid', 'mesh', 'num2str',\n  'fft', 'ifft', 'arrayfun', 'cellfun', 'input', 'fliplr', 'flipud', 'ismember'\n]);\n\nvar keywords = wordRegexp([\n  'return', 'case', 'switch', 'else', 'elseif', 'end', 'endif', 'endfunction',\n  'if', 'otherwise', 'do', 'for', 'while', 'try', 'catch', 'classdef', 'properties', 'events',\n  'methods', 'global', 'persistent', 'endfor', 'endwhile', 'printf', 'sprintf', 'disp', 'until',\n  'continue', 'pkg'\n]);\n\n\n// tokenizers\nfunction tokenTranspose(stream, state) {\n  if (!stream.sol() && stream.peek() === '\\'') {\n    stream.next();\n    state.tokenize = tokenBase;\n    return 'operator';\n  }\n  state.tokenize = tokenBase;\n  return tokenBase(stream, state);\n}\n\n\nfunction tokenComment(stream, state) {\n  if (stream.match(/^.*%}/)) {\n    state.tokenize = tokenBase;\n    return 'comment';\n  };\n  stream.skipToEnd();\n  return 'comment';\n}\n\nfunction tokenBase(stream, state) {\n  // whitespaces\n  if (stream.eatSpace()) return null;\n\n  // Handle one line Comments\n  if (stream.match('%{')){\n    state.tokenize = tokenComment;\n    stream.skipToEnd();\n    return 'comment';\n  }\n\n  if (stream.match(/^[%#]/)){\n    stream.skipToEnd();\n    return 'comment';\n  }\n\n  // Handle Number Literals\n  if (stream.match(/^[0-9\\.+-]/, false)) {\n    if (stream.match(/^[+-]?0x[0-9a-fA-F]+[ij]?/)) {\n      stream.tokenize = tokenBase;\n      return 'number'; };\n    if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?[ij]?/)) { return 'number'; };\n    if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?[ij]?/)) { return 'number'; };\n  }\n  if (stream.match(wordRegexp(['nan','NaN','inf','Inf']))) { return 'number'; };\n\n  // Handle Strings\n  var m = stream.match(/^\"(?:[^\"]|\"\")*(\"|$)/) || stream.match(/^'(?:[^']|'')*('|$)/)\n  if (m) { return m[1] ? 'string' : \"error\"; }\n\n  // Handle words\n  if (stream.match(keywords)) { return 'keyword'; } ;\n  if (stream.match(builtins)) { return 'builtin'; } ;\n  if (stream.match(identifiers)) { return 'variable'; } ;\n\n  if (stream.match(singleOperators) || stream.match(doubleOperators)) { return 'operator'; };\n  if (stream.match(singleDelimiters) || stream.match(doubleDelimiters) || stream.match(tripleDelimiters)) { return null; };\n\n  if (stream.match(expressionEnd)) {\n    state.tokenize = tokenTranspose;\n    return null;\n  };\n\n\n  // Handle non-detected items\n  stream.next();\n  return 'error';\n};\n\n\nexport const octave = {\n  name: \"octave\",\n\n  startState: function() {\n    return {\n      tokenize: tokenBase\n    };\n  },\n\n  token: function(stream, state) {\n    var style = state.tokenize(stream, state);\n    if (style === 'number' || style === 'variable'){\n      state.tokenize = tokenTranspose;\n    }\n    return style;\n  },\n\n  languageData: {\n    commentTokens: {line: \"%\"}\n  }\n};\n\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","$95818cc1d4fd592d$var$wordRegexp","words","RegExp","join","Object","defineProperty","get","$95818cc1d4fd592d$export$b50136c97e7d5ebf","set","s","enumerable","configurable","$95818cc1d4fd592d$var$singleOperators","$95818cc1d4fd592d$var$singleDelimiters","$95818cc1d4fd592d$var$doubleOperators","$95818cc1d4fd592d$var$doubleDelimiters","$95818cc1d4fd592d$var$tripleDelimiters","$95818cc1d4fd592d$var$expressionEnd","$95818cc1d4fd592d$var$identifiers","$95818cc1d4fd592d$var$builtins","$95818cc1d4fd592d$var$keywords","$95818cc1d4fd592d$var$tokenTranspose","stream","state","sol","peek","tokenize","$95818cc1d4fd592d$var$tokenBase","next","$95818cc1d4fd592d$var$tokenComment","match","skipToEnd","eatSpace","m","name","startState","token","style","languageData","commentTokens","line"],"version":3,"file":"octave.3a476451.js.map"}