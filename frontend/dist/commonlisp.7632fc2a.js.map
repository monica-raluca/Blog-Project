{"mappings":"A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,a,C,I,I,E,I,K,E,W,C,E,a,C,C,GCAA,IAII,EAJA,EAAc,8NACd,EAAa,wDACb,EAAa,yHACb,EAAS,oBAGb,SAAS,EAAQ,CAAM,EAErB,IADA,IAAI,EACG,EAAK,EAAO,IAAI,IACrB,GAAI,AAAM,MAAN,EAAY,EAAO,IAAI,QACtB,GAAI,CAAC,EAAO,IAAI,CAAC,GAAK,CAAE,EAAO,MAAM,CAAC,GAAI,KAAO,CAExD,OAAO,EAAO,OAAO,EACvB,CAEA,SAAS,EAAK,CAAM,CAAE,CAAK,EACzB,GAAI,EAAO,QAAQ,GAAkB,OAAb,EAAO,KAAa,KAC5C,GAAI,EAAO,KAAK,CAAC,GAAa,MAAO,SACrC,IAAI,EAAK,EAAO,IAAI,GAGpB,GAFI,AAAM,MAAN,GAAY,CAAA,EAAK,EAAO,IAAI,EAAhC,EAEI,AAAM,KAAN,EAAW,MAAQ,AAAA,CAAA,EAAM,QAAQ,CAAG,CAAA,EAAU,EAAQ,GACrD,GAAI,AAAM,KAAN,EAA4B,OAAf,EAAO,OAAe,UACvC,GAAI,AAAM,KAAN,EAA6B,OAAhB,EAAO,QAAgB,UACxC,GAAI,AAAM,KAAN,EAA8C,OAAjC,EAAO,SAAS,GAAI,EAAO,KAAa,UACzD,GAAI,SAAS,IAAI,CAAC,GAAK,OAAO,UAC9B,GAAI,AAAM,KAAN,EACP,GAAI,EAAO,MAAM,CAAC,KAAuB,OAAf,EAAO,IAAI,GAAW,oBACrB,OAApB,EAAO,SAAS,GAAW,aAC7B,GAAI,AAAM,KAAN,EAAW,CACpB,IAAI,EAAK,EAAO,IAAI,GACpB,GAAI,AAAM,KAAN,EAA4B,OAAf,EAAO,OAAe,UAClC,GAAI,YAAY,IAAI,CAAC,GAAK,OAAO,KACjC,GAAI,KAAK,IAAI,CAAC,IAAO,EAAO,KAAK,CAAC,SAAU,OAAO,UACnD,GAAI,AAAM,KAAN,EAAW,MAAQ,AAAA,CAAA,EAAM,QAAQ,CAAG,CAAA,EAAW,EAAQ,QAC3D,GAAI,AAAM,KAAN,EAA8B,OAAjB,EAAQ,GAAgB,YACzC,GAAI,AAAM,MAAN,EAA8C,OAAhC,EAAO,IAAI,GAAI,EAAQ,GAAgB,sBACzD,MAAO,OACd,KAAO,CACL,IAAI,EAAO,EAAQ,SACnB,AAAI,AAAQ,KAAR,EAAoB,MACxB,EAAO,SACH,AAAQ,OAAR,GAAiB,AAAQ,KAAR,GAAe,AAAkB,KAAlB,EAAK,MAAM,CAAC,IAAkB,OAC9D,AAAkB,QAAlB,EAAM,QAAQ,EAAe,CAAA,EAAY,IAAI,CAAC,IAAS,EAAW,IAAI,CAAC,EAAA,EAAe,UACtF,AAAkB,KAAlB,EAAK,MAAM,CAAC,GAAkB,uBAC3B,cACT,CACF,CAEA,SAAS,EAAS,CAAM,CAAE,CAAK,EAE7B,IADA,IAAqB,EAAjB,EAAU,CAAA,EACP,EAAO,EAAO,IAAI,IAAI,CAC3B,GAAI,AAAQ,KAAR,GAAe,CAAC,EAAS,CAAE,EAAM,QAAQ,CAAG,EAAM,KAAO,CAC7D,EAAU,CAAC,GAAW,AAAQ,MAAR,CACxB,CACA,MAAO,QACT,CAEA,SAAS,EAAU,CAAM,CAAE,CAAK,EAE9B,IADA,IAAI,EAAM,EACH,EAAO,EAAO,IAAI,IAAI,CAC3B,GAAI,AAAQ,KAAR,GAAe,AAAQ,KAAR,EAAa,CAAE,EAAM,QAAQ,CAAG,EAAM,KAAO,CAChE,EAAO,CACT,CAEA,OADA,EAAO,KACA,SACT,CAEO,IAAM,EAAa,CACxB,KAAM,aACN,WAAY,WACV,MAAO,CAAC,IAAK,CAAC,KAAM,KAAM,MAAO,EAAG,SAAU,CAAC,EAAG,SAAU,KAAM,SAAU,CAAI,CAClF,EAEA,MAAO,SAAU,CAAM,CAAE,CAAK,EACxB,EAAO,GAAG,IAAM,AAA6B,UAA7B,OAAO,EAAM,GAAG,CAAC,QAAQ,EAC3C,CAAA,EAAM,GAAG,CAAC,QAAQ,CAAG,EAAM,GAAG,CAAC,KAAK,CAAG,CAAA,EAEzC,EAAO,KACP,IAAI,EAAQ,EAAM,QAAQ,CAAC,EAAQ,GAcnC,MAbY,MAAR,IACE,AAAsB,MAAtB,EAAM,GAAG,CAAC,QAAQ,CAChB,AAAQ,UAAR,GAAoB,EAAW,IAAI,CAAC,EAAO,OAAO,IACpD,EAAM,GAAG,CAAC,QAAQ,CAAG,EAAM,GAAG,CAAC,KAAK,CAAG,EAAO,UAAU,CAExD,EAAM,GAAG,CAAC,QAAQ,CAAG,OACd,AAAsB,QAAtB,EAAM,GAAG,CAAC,QAAQ,EAC3B,CAAA,EAAM,GAAG,CAAC,QAAQ,CAAG,EAAO,MAAM,EAD7B,EAGP,EAAM,QAAQ,CAAG,GAEf,AAAQ,QAAR,EAAgB,EAAM,GAAG,CAAG,CAAC,KAAM,EAAM,GAAG,CAAE,MAAO,EAAO,MAAM,GAAI,SAAU,IAAI,EAC/E,AAAQ,SAAR,GAAiB,CAAA,EAAM,GAAG,CAAG,EAAM,GAAG,CAAC,IAAI,EAAI,EAAM,GAAG,AAAH,EACvD,CACT,EAEA,OAAQ,SAAU,CAAK,EACrB,IAAI,EAAI,EAAM,GAAG,CAAC,QAAQ,CAC1B,MAAO,AAAY,UAAZ,OAAO,EAAgB,EAAI,EAAM,GAAG,CAAC,KAAK,CAAG,CACtD,EAEA,aAAc,CACZ,cAAe,CAAC,KAAM,KAAM,MAAO,CAAC,KAAM,KAAM,MAAO,IAAI,CAAC,EAC5D,cAAe,CAAC,SAAU,CAAC,IAAK,IAAK,IAAK,IAAI,AAAA,CAChD,CACF,C","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/commonlisp.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"8otIa\", function(module, exports) {\n\n$parcel$export(module.exports, \"commonLisp\", () => $61c79ca976f9847c$export$a4fce218a4e8311d);\nvar $61c79ca976f9847c$var$specialForm = /^(block|let*|return-from|catch|load-time-value|setq|eval-when|locally|symbol-macrolet|flet|macrolet|tagbody|function|multiple-value-call|the|go|multiple-value-prog1|throw|if|progn|unwind-protect|labels|progv|let|quote)$/;\nvar $61c79ca976f9847c$var$assumeBody = /^with|^def|^do|^prog|case$|^cond$|bind$|when$|unless$/;\nvar $61c79ca976f9847c$var$numLiteral = /^(?:[+\\-]?(?:\\d+|\\d*\\.\\d+)(?:[efd][+\\-]?\\d+)?|[+\\-]?\\d+(?:\\/[+\\-]?\\d+)?|#b[+\\-]?[01]+|#o[+\\-]?[0-7]+|#x[+\\-]?[\\da-f]+)/;\nvar $61c79ca976f9847c$var$symbol = /[^\\s'`,@()\\[\\]\";]/;\nvar $61c79ca976f9847c$var$type;\nfunction $61c79ca976f9847c$var$readSym(stream) {\n    var ch;\n    while(ch = stream.next()){\n        if (ch == \"\\\\\") stream.next();\n        else if (!$61c79ca976f9847c$var$symbol.test(ch)) {\n            stream.backUp(1);\n            break;\n        }\n    }\n    return stream.current();\n}\nfunction $61c79ca976f9847c$var$base(stream, state) {\n    if (stream.eatSpace()) {\n        $61c79ca976f9847c$var$type = \"ws\";\n        return null;\n    }\n    if (stream.match($61c79ca976f9847c$var$numLiteral)) return \"number\";\n    var ch = stream.next();\n    if (ch == \"\\\\\") ch = stream.next();\n    if (ch == '\"') return (state.tokenize = $61c79ca976f9847c$var$inString)(stream, state);\n    else if (ch == \"(\") {\n        $61c79ca976f9847c$var$type = \"open\";\n        return \"bracket\";\n    } else if (ch == \")\") {\n        $61c79ca976f9847c$var$type = \"close\";\n        return \"bracket\";\n    } else if (ch == \";\") {\n        stream.skipToEnd();\n        $61c79ca976f9847c$var$type = \"ws\";\n        return \"comment\";\n    } else if (/['`,@]/.test(ch)) return null;\n    else if (ch == \"|\") {\n        if (stream.skipTo(\"|\")) {\n            stream.next();\n            return \"variableName\";\n        } else {\n            stream.skipToEnd();\n            return \"error\";\n        }\n    } else if (ch == \"#\") {\n        var ch = stream.next();\n        if (ch == \"(\") {\n            $61c79ca976f9847c$var$type = \"open\";\n            return \"bracket\";\n        } else if (/[+\\-=\\.']/.test(ch)) return null;\n        else if (/\\d/.test(ch) && stream.match(/^\\d*#/)) return null;\n        else if (ch == \"|\") return (state.tokenize = $61c79ca976f9847c$var$inComment)(stream, state);\n        else if (ch == \":\") {\n            $61c79ca976f9847c$var$readSym(stream);\n            return \"meta\";\n        } else if (ch == \"\\\\\") {\n            stream.next();\n            $61c79ca976f9847c$var$readSym(stream);\n            return \"string.special\";\n        } else return \"error\";\n    } else {\n        var name = $61c79ca976f9847c$var$readSym(stream);\n        if (name == \".\") return null;\n        $61c79ca976f9847c$var$type = \"symbol\";\n        if (name == \"nil\" || name == \"t\" || name.charAt(0) == \":\") return \"atom\";\n        if (state.lastType == \"open\" && ($61c79ca976f9847c$var$specialForm.test(name) || $61c79ca976f9847c$var$assumeBody.test(name))) return \"keyword\";\n        if (name.charAt(0) == \"&\") return \"variableName.special\";\n        return \"variableName\";\n    }\n}\nfunction $61c79ca976f9847c$var$inString(stream, state) {\n    var escaped = false, next;\n    while(next = stream.next()){\n        if (next == '\"' && !escaped) {\n            state.tokenize = $61c79ca976f9847c$var$base;\n            break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n    }\n    return \"string\";\n}\nfunction $61c79ca976f9847c$var$inComment(stream, state) {\n    var next, last;\n    while(next = stream.next()){\n        if (next == \"#\" && last == \"|\") {\n            state.tokenize = $61c79ca976f9847c$var$base;\n            break;\n        }\n        last = next;\n    }\n    $61c79ca976f9847c$var$type = \"ws\";\n    return \"comment\";\n}\nconst $61c79ca976f9847c$export$a4fce218a4e8311d = {\n    name: \"commonlisp\",\n    startState: function() {\n        return {\n            ctx: {\n                prev: null,\n                start: 0,\n                indentTo: 0\n            },\n            lastType: null,\n            tokenize: $61c79ca976f9847c$var$base\n        };\n    },\n    token: function(stream, state) {\n        if (stream.sol() && typeof state.ctx.indentTo != \"number\") state.ctx.indentTo = state.ctx.start + 1;\n        $61c79ca976f9847c$var$type = null;\n        var style = state.tokenize(stream, state);\n        if ($61c79ca976f9847c$var$type != \"ws\") {\n            if (state.ctx.indentTo == null) {\n                if ($61c79ca976f9847c$var$type == \"symbol\" && $61c79ca976f9847c$var$assumeBody.test(stream.current())) state.ctx.indentTo = state.ctx.start + stream.indentUnit;\n                else state.ctx.indentTo = \"next\";\n            } else if (state.ctx.indentTo == \"next\") state.ctx.indentTo = stream.column();\n            state.lastType = $61c79ca976f9847c$var$type;\n        }\n        if ($61c79ca976f9847c$var$type == \"open\") state.ctx = {\n            prev: state.ctx,\n            start: stream.column(),\n            indentTo: null\n        };\n        else if ($61c79ca976f9847c$var$type == \"close\") state.ctx = state.ctx.prev || state.ctx;\n        return style;\n    },\n    indent: function(state) {\n        var i = state.ctx.indentTo;\n        return typeof i == \"number\" ? i : state.ctx.start + 1;\n    },\n    languageData: {\n        commentTokens: {\n            line: \";;\",\n            block: {\n                open: \"#|\",\n                close: \"|#\"\n            }\n        },\n        closeBrackets: {\n            brackets: [\n                \"(\",\n                \"[\",\n                \"{\",\n                '\"'\n            ]\n        }\n    }\n};\n\n});\n\n\n//# sourceMappingURL=commonlisp.7632fc2a.js.map\n","var specialForm = /^(block|let*|return-from|catch|load-time-value|setq|eval-when|locally|symbol-macrolet|flet|macrolet|tagbody|function|multiple-value-call|the|go|multiple-value-prog1|throw|if|progn|unwind-protect|labels|progv|let|quote)$/;\nvar assumeBody = /^with|^def|^do|^prog|case$|^cond$|bind$|when$|unless$/;\nvar numLiteral = /^(?:[+\\-]?(?:\\d+|\\d*\\.\\d+)(?:[efd][+\\-]?\\d+)?|[+\\-]?\\d+(?:\\/[+\\-]?\\d+)?|#b[+\\-]?[01]+|#o[+\\-]?[0-7]+|#x[+\\-]?[\\da-f]+)/;\nvar symbol = /[^\\s'`,@()\\[\\]\";]/;\nvar type;\n\nfunction readSym(stream) {\n  var ch;\n  while (ch = stream.next()) {\n    if (ch == \"\\\\\") stream.next();\n    else if (!symbol.test(ch)) { stream.backUp(1); break; }\n  }\n  return stream.current();\n}\n\nfunction base(stream, state) {\n  if (stream.eatSpace()) {type = \"ws\"; return null;}\n  if (stream.match(numLiteral)) return \"number\";\n  var ch = stream.next();\n  if (ch == \"\\\\\") ch = stream.next();\n\n  if (ch == '\"') return (state.tokenize = inString)(stream, state);\n  else if (ch == \"(\") { type = \"open\"; return \"bracket\"; }\n  else if (ch == \")\") { type = \"close\"; return \"bracket\"; }\n  else if (ch == \";\") { stream.skipToEnd(); type = \"ws\"; return \"comment\"; }\n  else if (/['`,@]/.test(ch)) return null;\n  else if (ch == \"|\") {\n    if (stream.skipTo(\"|\")) { stream.next(); return \"variableName\"; }\n    else { stream.skipToEnd(); return \"error\"; }\n  } else if (ch == \"#\") {\n    var ch = stream.next();\n    if (ch == \"(\") { type = \"open\"; return \"bracket\"; }\n    else if (/[+\\-=\\.']/.test(ch)) return null;\n    else if (/\\d/.test(ch) && stream.match(/^\\d*#/)) return null;\n    else if (ch == \"|\") return (state.tokenize = inComment)(stream, state);\n    else if (ch == \":\") { readSym(stream); return \"meta\"; }\n    else if (ch == \"\\\\\") { stream.next(); readSym(stream); return \"string.special\" }\n    else return \"error\";\n  } else {\n    var name = readSym(stream);\n    if (name == \".\") return null;\n    type = \"symbol\";\n    if (name == \"nil\" || name == \"t\" || name.charAt(0) == \":\") return \"atom\";\n    if (state.lastType == \"open\" && (specialForm.test(name) || assumeBody.test(name))) return \"keyword\";\n    if (name.charAt(0) == \"&\") return \"variableName.special\";\n    return \"variableName\";\n  }\n}\n\nfunction inString(stream, state) {\n  var escaped = false, next;\n  while (next = stream.next()) {\n    if (next == '\"' && !escaped) { state.tokenize = base; break; }\n    escaped = !escaped && next == \"\\\\\";\n  }\n  return \"string\";\n}\n\nfunction inComment(stream, state) {\n  var next, last;\n  while (next = stream.next()) {\n    if (next == \"#\" && last == \"|\") { state.tokenize = base; break; }\n    last = next;\n  }\n  type = \"ws\";\n  return \"comment\";\n}\n\nexport const commonLisp = {\n  name: \"commonlisp\",\n  startState: function () {\n    return {ctx: {prev: null, start: 0, indentTo: 0}, lastType: null, tokenize: base};\n  },\n\n  token: function (stream, state) {\n    if (stream.sol() && typeof state.ctx.indentTo != \"number\")\n      state.ctx.indentTo = state.ctx.start + 1;\n\n    type = null;\n    var style = state.tokenize(stream, state);\n    if (type != \"ws\") {\n      if (state.ctx.indentTo == null) {\n        if (type == \"symbol\" && assumeBody.test(stream.current()))\n          state.ctx.indentTo = state.ctx.start + stream.indentUnit;\n        else\n          state.ctx.indentTo = \"next\";\n      } else if (state.ctx.indentTo == \"next\") {\n        state.ctx.indentTo = stream.column();\n      }\n      state.lastType = type;\n    }\n    if (type == \"open\") state.ctx = {prev: state.ctx, start: stream.column(), indentTo: null};\n    else if (type == \"close\") state.ctx = state.ctx.prev || state.ctx;\n    return style;\n  },\n\n  indent: function (state) {\n    var i = state.ctx.indentTo;\n    return typeof i == \"number\" ? i : state.ctx.start + 1;\n  },\n\n  languageData: {\n    commentTokens: {line: \";;\", block: {open: \"#|\", close: \"|#\"}},\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", '\"']}\n  }\n};\n\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","Object","defineProperty","get","$61c79ca976f9847c$export$a4fce218a4e8311d","set","s","enumerable","configurable","$61c79ca976f9847c$var$type","$61c79ca976f9847c$var$specialForm","$61c79ca976f9847c$var$assumeBody","$61c79ca976f9847c$var$numLiteral","$61c79ca976f9847c$var$symbol","$61c79ca976f9847c$var$readSym","stream","ch","next","test","backUp","current","$61c79ca976f9847c$var$base","state","eatSpace","match","tokenize","$61c79ca976f9847c$var$inString","skipToEnd","skipTo","$61c79ca976f9847c$var$inComment","name","charAt","lastType","escaped","last","startState","ctx","prev","start","indentTo","token","sol","style","indentUnit","column","indent","i","languageData","commentTokens","line","block","open","close","closeBrackets","brackets"],"version":3,"file":"commonlisp.7632fc2a.js.map"}