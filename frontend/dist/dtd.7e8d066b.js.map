{"mappings":"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","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/dtd.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"imbNN\", function(module, exports) {\n\n$parcel$export(module.exports, \"dtd\", () => $d5d36fbbb227ba68$export$e896c2a8c5b351f4);\nvar $d5d36fbbb227ba68$var$type;\nfunction $d5d36fbbb227ba68$var$ret(style, tp) {\n    $d5d36fbbb227ba68$var$type = tp;\n    return style;\n}\nfunction $d5d36fbbb227ba68$var$tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == \"<\" && stream.eat(\"!\")) {\n        if (stream.eatWhile(/[\\-]/)) {\n            state.tokenize = $d5d36fbbb227ba68$var$tokenSGMLComment;\n            return $d5d36fbbb227ba68$var$tokenSGMLComment(stream, state);\n        } else if (stream.eatWhile(/[\\w]/)) return $d5d36fbbb227ba68$var$ret(\"keyword\", \"doindent\");\n    } else if (ch == \"<\" && stream.eat(\"?\")) {\n        state.tokenize = $d5d36fbbb227ba68$var$inBlock(\"meta\", \"?>\");\n        return $d5d36fbbb227ba68$var$ret(\"meta\", ch);\n    } else if (ch == \"#\" && stream.eatWhile(/[\\w]/)) return $d5d36fbbb227ba68$var$ret(\"atom\", \"tag\");\n    else if (ch == \"|\") return $d5d36fbbb227ba68$var$ret(\"keyword\", \"separator\");\n    else if (ch.match(/[\\(\\)\\[\\]\\-\\.,\\+\\?>]/)) return $d5d36fbbb227ba68$var$ret(null, ch); //if(ch === \">\") return ret(null, \"endtag\"); else\n    else if (ch.match(/[\\[\\]]/)) return $d5d36fbbb227ba68$var$ret(\"rule\", ch);\n    else if (ch == \"\\\"\" || ch == \"'\") {\n        state.tokenize = $d5d36fbbb227ba68$var$tokenString(ch);\n        return state.tokenize(stream, state);\n    } else if (stream.eatWhile(/[a-zA-Z\\?\\+\\d]/)) {\n        var sc = stream.current();\n        if (sc.substr(sc.length - 1, sc.length).match(/\\?|\\+/) !== null) stream.backUp(1);\n        return $d5d36fbbb227ba68$var$ret(\"tag\", \"tag\");\n    } else if (ch == \"%\" || ch == \"*\") return $d5d36fbbb227ba68$var$ret(\"number\", \"number\");\n    else {\n        stream.eatWhile(/[\\w\\\\\\-_%.{,]/);\n        return $d5d36fbbb227ba68$var$ret(null, null);\n    }\n}\nfunction $d5d36fbbb227ba68$var$tokenSGMLComment(stream, state) {\n    var dashes = 0, ch;\n    while((ch = stream.next()) != null){\n        if (dashes >= 2 && ch == \">\") {\n            state.tokenize = $d5d36fbbb227ba68$var$tokenBase;\n            break;\n        }\n        dashes = ch == \"-\" ? dashes + 1 : 0;\n    }\n    return $d5d36fbbb227ba68$var$ret(\"comment\", \"comment\");\n}\nfunction $d5d36fbbb227ba68$var$tokenString(quote) {\n    return function(stream, state) {\n        var escaped = false, ch;\n        while((ch = stream.next()) != null){\n            if (ch == quote && !escaped) {\n                state.tokenize = $d5d36fbbb227ba68$var$tokenBase;\n                break;\n            }\n            escaped = !escaped && ch == \"\\\\\";\n        }\n        return $d5d36fbbb227ba68$var$ret(\"string\", \"tag\");\n    };\n}\nfunction $d5d36fbbb227ba68$var$inBlock(style, terminator) {\n    return function(stream, state) {\n        while(!stream.eol()){\n            if (stream.match(terminator)) {\n                state.tokenize = $d5d36fbbb227ba68$var$tokenBase;\n                break;\n            }\n            stream.next();\n        }\n        return style;\n    };\n}\nconst $d5d36fbbb227ba68$export$e896c2a8c5b351f4 = {\n    name: \"dtd\",\n    startState: function() {\n        return {\n            tokenize: $d5d36fbbb227ba68$var$tokenBase,\n            baseIndent: 0,\n            stack: []\n        };\n    },\n    token: function(stream, state) {\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        var context = state.stack[state.stack.length - 1];\n        if (stream.current() == \"[\" || $d5d36fbbb227ba68$var$type === \"doindent\" || $d5d36fbbb227ba68$var$type == \"[\") state.stack.push(\"rule\");\n        else if ($d5d36fbbb227ba68$var$type === \"endtag\") state.stack[state.stack.length - 1] = \"endtag\";\n        else if (stream.current() == \"]\" || $d5d36fbbb227ba68$var$type == \"]\" || $d5d36fbbb227ba68$var$type == \">\" && context == \"rule\") state.stack.pop();\n        else if ($d5d36fbbb227ba68$var$type == \"[\") state.stack.push(\"[\");\n        return style;\n    },\n    indent: function(state, textAfter, cx) {\n        var n = state.stack.length;\n        if (textAfter.charAt(0) === ']') n--;\n        else if (textAfter.substr(textAfter.length - 1, textAfter.length) === \">\") {\n            if (textAfter.substr(0, 1) === \"<\") ;\n            else if ($d5d36fbbb227ba68$var$type == \"doindent\" && textAfter.length > 1) ;\n            else if ($d5d36fbbb227ba68$var$type == \"doindent\") n--;\n            else if ($d5d36fbbb227ba68$var$type == \">\" && textAfter.length > 1) ;\n            else if ($d5d36fbbb227ba68$var$type == \"tag\" && textAfter !== \">\") ;\n            else if ($d5d36fbbb227ba68$var$type == \"tag\" && state.stack[state.stack.length - 1] == \"rule\") n--;\n            else if ($d5d36fbbb227ba68$var$type == \"tag\") n++;\n            else if (textAfter === \">\" && state.stack[state.stack.length - 1] == \"rule\" && $d5d36fbbb227ba68$var$type === \">\") n--;\n            else if (textAfter === \">\" && state.stack[state.stack.length - 1] == \"rule\") ;\n            else if (textAfter.substr(0, 1) !== \"<\" && textAfter.substr(0, 1) === \">\") n = n - 1;\n            else if (textAfter === \">\") ;\n            else n = n - 1;\n            //over rule them all\n            if ($d5d36fbbb227ba68$var$type == null || $d5d36fbbb227ba68$var$type == \"]\") n--;\n        }\n        return state.baseIndent + n * cx.unit;\n    },\n    languageData: {\n        indentOnInput: /^\\s*[\\]>]$/\n    }\n};\n\n});\n\n\n//# sourceMappingURL=dtd.7e8d066b.js.map\n","var type;\nfunction ret(style, tp) {type = tp; return style;}\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n\n  if (ch == \"<\" && stream.eat(\"!\") ) {\n    if (stream.eatWhile(/[\\-]/)) {\n      state.tokenize = tokenSGMLComment;\n      return tokenSGMLComment(stream, state);\n    } else if (stream.eatWhile(/[\\w]/)) return ret(\"keyword\", \"doindent\");\n  } else if (ch == \"<\" && stream.eat(\"?\")) { //xml declaration\n    state.tokenize = inBlock(\"meta\", \"?>\");\n    return ret(\"meta\", ch);\n  } else if (ch == \"#\" && stream.eatWhile(/[\\w]/)) return ret(\"atom\", \"tag\");\n  else if (ch == \"|\") return ret(\"keyword\", \"separator\");\n  else if (ch.match(/[\\(\\)\\[\\]\\-\\.,\\+\\?>]/)) return ret(null, ch);//if(ch === \">\") return ret(null, \"endtag\"); else\n  else if (ch.match(/[\\[\\]]/)) return ret(\"rule\", ch);\n  else if (ch == \"\\\"\" || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  } else if (stream.eatWhile(/[a-zA-Z\\?\\+\\d]/)) {\n    var sc = stream.current();\n    if( sc.substr(sc.length-1,sc.length).match(/\\?|\\+/) !== null )stream.backUp(1);\n    return ret(\"tag\", \"tag\");\n  } else if (ch == \"%\" || ch == \"*\" ) return ret(\"number\", \"number\");\n  else {\n    stream.eatWhile(/[\\w\\\\\\-_%.{,]/);\n    return ret(null, null);\n  }\n}\n\nfunction tokenSGMLComment(stream, state) {\n  var dashes = 0, ch;\n  while ((ch = stream.next()) != null) {\n    if (dashes >= 2 && ch == \">\") {\n      state.tokenize = tokenBase;\n      break;\n    }\n    dashes = (ch == \"-\") ? dashes + 1 : 0;\n  }\n  return ret(\"comment\", \"comment\");\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, ch;\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    return ret(\"string\", \"tag\");\n  };\n}\n\nfunction inBlock(style, terminator) {\n  return function(stream, state) {\n    while (!stream.eol()) {\n      if (stream.match(terminator)) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      stream.next();\n    }\n    return style;\n  };\n}\n\nexport const dtd = {\n  name: \"dtd\",\n  startState: function() {\n    return {tokenize: tokenBase,\n            baseIndent: 0,\n            stack: []};\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n\n    var context = state.stack[state.stack.length-1];\n    if (stream.current() == \"[\" || type === \"doindent\" || type == \"[\") state.stack.push(\"rule\");\n    else if (type === \"endtag\") state.stack[state.stack.length-1] = \"endtag\";\n    else if (stream.current() == \"]\" || type == \"]\" || (type == \">\" && context == \"rule\")) state.stack.pop();\n    else if (type == \"[\") state.stack.push(\"[\");\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    var n = state.stack.length;\n\n    if( textAfter.charAt(0) === ']' )n--;\n    else if(textAfter.substr(textAfter.length-1, textAfter.length) === \">\"){\n      if(textAfter.substr(0,1) === \"<\") {}\n      else if( type == \"doindent\" && textAfter.length > 1 ) {}\n      else if( type == \"doindent\")n--;\n      else if( type == \">\" && textAfter.length > 1) {}\n      else if( type == \"tag\" && textAfter !== \">\") {}\n      else if( type == \"tag\" && state.stack[state.stack.length-1] == \"rule\")n--;\n      else if( type == \"tag\")n++;\n      else if( textAfter === \">\" && state.stack[state.stack.length-1] == \"rule\" && type === \">\")n--;\n      else if( textAfter === \">\" && state.stack[state.stack.length-1] == \"rule\") {}\n      else if( textAfter.substr(0,1) !== \"<\" && textAfter.substr(0,1) === \">\" )n=n-1;\n      else if( textAfter === \">\") {}\n      else n=n-1;\n      //over rule them all\n      if(type == null || type == \"]\")n--;\n    }\n\n    return state.baseIndent + n * cx.unit;\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*[\\]>]$/\n  }\n};\n\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","$d5d36fbbb227ba68$var$type","e","$d5d36fbbb227ba68$var$tokenBase","stream","state","quote","ch","next","eat","eatWhile","tokenize","$d5d36fbbb227ba68$var$tokenSGMLComment","eol","match","escaped","sc","current","substr","length","backUp","dashes","Object","defineProperty","get","$d5d36fbbb227ba68$export$e896c2a8c5b351f4","set","s","enumerable","configurable","name","startState","baseIndent","stack","token","eatSpace","style","context","push","pop","indent","textAfter","cx","n","charAt","unit","languageData","indentOnInput"],"version":3,"file":"dtd.7e8d066b.js.map"}