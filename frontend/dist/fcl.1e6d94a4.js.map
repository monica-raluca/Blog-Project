{"mappings":"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","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/fcl.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"gcXBc\", function(module, exports) {\n\n$parcel$export(module.exports, \"fcl\", () => $bccbff6d1a96c5e9$export$dfe687906070076d);\nvar $bccbff6d1a96c5e9$var$keywords = {\n    \"term\": true,\n    \"method\": true,\n    \"accu\": true,\n    \"rule\": true,\n    \"then\": true,\n    \"is\": true,\n    \"and\": true,\n    \"or\": true,\n    \"if\": true,\n    \"default\": true\n};\nvar $bccbff6d1a96c5e9$var$start_blocks = {\n    \"var_input\": true,\n    \"var_output\": true,\n    \"fuzzify\": true,\n    \"defuzzify\": true,\n    \"function_block\": true,\n    \"ruleblock\": true\n};\nvar $bccbff6d1a96c5e9$var$end_blocks = {\n    \"end_ruleblock\": true,\n    \"end_defuzzify\": true,\n    \"end_function_block\": true,\n    \"end_fuzzify\": true,\n    \"end_var\": true\n};\nvar $bccbff6d1a96c5e9$var$atoms = {\n    \"true\": true,\n    \"false\": true,\n    \"nan\": true,\n    \"real\": true,\n    \"min\": true,\n    \"max\": true,\n    \"cog\": true,\n    \"cogs\": true\n};\nvar $bccbff6d1a96c5e9$var$isOperatorChar = /[+\\-*&^%:=<>!|\\/]/;\nfunction $bccbff6d1a96c5e9$var$tokenBase(stream, state) {\n    var ch = stream.next();\n    if (/[\\d\\.]/.test(ch)) {\n        if (ch == \".\") stream.match(/^[0-9]+([eE][\\-+]?[0-9]+)?/);\n        else if (ch == \"0\") stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);\n        else stream.match(/^[0-9]*\\.?[0-9]*([eE][\\-+]?[0-9]+)?/);\n        return \"number\";\n    }\n    if (ch == \"/\" || ch == \"(\") {\n        if (stream.eat(\"*\")) {\n            state.tokenize = $bccbff6d1a96c5e9$var$tokenComment;\n            return $bccbff6d1a96c5e9$var$tokenComment(stream, state);\n        }\n        if (stream.eat(\"/\")) {\n            stream.skipToEnd();\n            return \"comment\";\n        }\n    }\n    if ($bccbff6d1a96c5e9$var$isOperatorChar.test(ch)) {\n        stream.eatWhile($bccbff6d1a96c5e9$var$isOperatorChar);\n        return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n    var cur = stream.current().toLowerCase();\n    if ($bccbff6d1a96c5e9$var$keywords.propertyIsEnumerable(cur) || $bccbff6d1a96c5e9$var$start_blocks.propertyIsEnumerable(cur) || $bccbff6d1a96c5e9$var$end_blocks.propertyIsEnumerable(cur)) return \"keyword\";\n    if ($bccbff6d1a96c5e9$var$atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n}\nfunction $bccbff6d1a96c5e9$var$tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while(ch = stream.next()){\n        if ((ch == \"/\" || ch == \")\") && maybeEnd) {\n            state.tokenize = $bccbff6d1a96c5e9$var$tokenBase;\n            break;\n        }\n        maybeEnd = ch == \"*\";\n    }\n    return \"comment\";\n}\nfunction $bccbff6d1a96c5e9$var$Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n}\nfunction $bccbff6d1a96c5e9$var$pushContext(state, col, type) {\n    return state.context = new $bccbff6d1a96c5e9$var$Context(state.indented, col, type, null, state.context);\n}\nfunction $bccbff6d1a96c5e9$var$popContext(state) {\n    if (!state.context.prev) return;\n    var t = state.context.type;\n    if (t == \"end_block\") state.indented = state.context.indented;\n    return state.context = state.context.prev;\n}\nconst $bccbff6d1a96c5e9$export$dfe687906070076d = {\n    name: \"fcl\",\n    startState: function(indentUnit) {\n        return {\n            tokenize: null,\n            context: new $bccbff6d1a96c5e9$var$Context(-indentUnit, 0, \"top\", false),\n            indented: 0,\n            startOfLine: true\n        };\n    },\n    token: function(stream, state) {\n        var ctx = state.context;\n        if (stream.sol()) {\n            if (ctx.align == null) ctx.align = false;\n            state.indented = stream.indentation();\n            state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n        var style = (state.tokenize || $bccbff6d1a96c5e9$var$tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n        var cur = stream.current().toLowerCase();\n        if ($bccbff6d1a96c5e9$var$start_blocks.propertyIsEnumerable(cur)) $bccbff6d1a96c5e9$var$pushContext(state, stream.column(), \"end_block\");\n        else if ($bccbff6d1a96c5e9$var$end_blocks.propertyIsEnumerable(cur)) $bccbff6d1a96c5e9$var$popContext(state);\n        state.startOfLine = false;\n        return style;\n    },\n    indent: function(state, textAfter, cx) {\n        if (state.tokenize != $bccbff6d1a96c5e9$var$tokenBase && state.tokenize != null) return 0;\n        var ctx = state.context;\n        var closing = $bccbff6d1a96c5e9$var$end_blocks.propertyIsEnumerable(textAfter);\n        if (ctx.align) return ctx.column + (closing ? 0 : 1);\n        else return ctx.indented + (closing ? 0 : cx.unit);\n    },\n    languageData: {\n        commentTokens: {\n            line: \"//\",\n            block: {\n                open: \"(*\",\n                close: \"*)\"\n            }\n        }\n    }\n};\n\n});\n\n\n//# sourceMappingURL=fcl.1e6d94a4.js.map\n","var keywords = {\n  \"term\": true,\n  \"method\": true, \"accu\": true,\n  \"rule\": true, \"then\": true, \"is\": true, \"and\": true, \"or\": true,\n  \"if\": true, \"default\": true\n};\n\nvar start_blocks = {\n  \"var_input\": true,\n  \"var_output\": true,\n  \"fuzzify\": true,\n  \"defuzzify\": true,\n  \"function_block\": true,\n  \"ruleblock\": true\n};\n\nvar end_blocks = {\n  \"end_ruleblock\": true,\n  \"end_defuzzify\": true,\n  \"end_function_block\": true,\n  \"end_fuzzify\": true,\n  \"end_var\": true\n};\n\nvar atoms = {\n  \"true\": true, \"false\": true, \"nan\": true,\n  \"real\": true, \"min\": true, \"max\": true, \"cog\": true, \"cogs\": true\n};\n\nvar isOperatorChar = /[+\\-*&^%:=<>!|\\/]/;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n\n  if (/[\\d\\.]/.test(ch)) {\n    if (ch == \".\") {\n      stream.match(/^[0-9]+([eE][\\-+]?[0-9]+)?/);\n    } else if (ch == \"0\") {\n      stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);\n    } else {\n      stream.match(/^[0-9]*\\.?[0-9]*([eE][\\-+]?[0-9]+)?/);\n    }\n    return \"number\";\n  }\n\n  if (ch == \"/\" || ch == \"(\") {\n    if (stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n\n  var cur = stream.current().toLowerCase();\n  if (keywords.propertyIsEnumerable(cur) ||\n      start_blocks.propertyIsEnumerable(cur) ||\n      end_blocks.propertyIsEnumerable(cur)) {\n    return \"keyword\";\n  }\n  if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n  return \"variable\";\n}\n\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if ((ch == \"/\" || ch == \")\") && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\n\nfunction pushContext(state, col, type) {\n  return state.context = new Context(state.indented, col, type, null, state.context);\n}\n\nfunction popContext(state) {\n  if (!state.context.prev) return;\n  var t = state.context.type;\n  if (t == \"end_block\")\n    state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\n// Interface\n\nexport const fcl = {\n  name: \"fcl\",\n  startState: function(indentUnit) {\n    return {\n      tokenize: null,\n      context: new Context(-indentUnit, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true\n    };\n  },\n\n  token: function(stream, state) {\n    var ctx = state.context;\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n    }\n    if (stream.eatSpace()) return null;\n\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\") return style;\n    if (ctx.align == null) ctx.align = true;\n\n    var cur = stream.current().toLowerCase();\n\n    if (start_blocks.propertyIsEnumerable(cur)) pushContext(state, stream.column(), \"end_block\");\n    else if (end_blocks.propertyIsEnumerable(cur))  popContext(state);\n\n    state.startOfLine = false;\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    if (state.tokenize != tokenBase && state.tokenize != null) return 0;\n    var ctx = state.context;\n\n    var closing = end_blocks.propertyIsEnumerable(textAfter);\n    if (ctx.align) return ctx.column + (closing ? 0 : 1);\n    else return ctx.indented + (closing ? 0 : cx.unit);\n  },\n\n  languageData: {\n    commentTokens: {line: \"//\", block: {open: \"(*\", close: \"*)\"}}\n  }\n};\n\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","e","Object","defineProperty","get","$bccbff6d1a96c5e9$export$dfe687906070076d","set","s","enumerable","configurable","$bccbff6d1a96c5e9$var$keywords","$bccbff6d1a96c5e9$var$start_blocks","$bccbff6d1a96c5e9$var$end_blocks","$bccbff6d1a96c5e9$var$atoms","$bccbff6d1a96c5e9$var$isOperatorChar","$bccbff6d1a96c5e9$var$tokenBase","stream","state","ch","next","test","match","eat","tokenize","$bccbff6d1a96c5e9$var$tokenComment","skipToEnd","eatWhile","cur","current","toLowerCase","propertyIsEnumerable","maybeEnd","$bccbff6d1a96c5e9$var$Context","indented","column","type","align","prev","name","startState","indentUnit","context","startOfLine","token","col","ctx","sol","indentation","eatSpace","style","t","indent","textAfter","cx","closing","unit","languageData","commentTokens","line","block","open","close"],"version":3,"file":"fcl.1e6d94a4.js.map"}