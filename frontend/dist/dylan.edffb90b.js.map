{"mappings":"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","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/dylan.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"hawVv\", function(module, exports) {\n\n$parcel$export(module.exports, \"dylan\", () => $0339c1b2f2a1bbee$export$e58467d11b248b74);\nfunction $0339c1b2f2a1bbee$var$forEach(arr, f) {\n    for(var i = 0; i < arr.length; i++)f(arr[i], i);\n}\nfunction $0339c1b2f2a1bbee$var$some(arr, f) {\n    for(var i = 0; i < arr.length; i++)if (f(arr[i], i)) return true;\n    return false;\n}\n// Words\nvar $0339c1b2f2a1bbee$var$words = {\n    // Words that introduce unnamed definitions like \"define interface\"\n    unnamedDefinition: [\n        \"interface\"\n    ],\n    // Words that introduce simple named definitions like \"define library\"\n    namedDefinition: [\n        \"module\",\n        \"library\",\n        \"macro\",\n        \"C-struct\",\n        \"C-union\",\n        \"C-function\",\n        \"C-callable-wrapper\"\n    ],\n    // Words that introduce type definitions like \"define class\".\n    // These are also parameterized like \"define method\" and are\n    // appended to otherParameterizedDefinitionWords\n    typeParameterizedDefinition: [\n        \"class\",\n        \"C-subtype\",\n        \"C-mapped-subtype\"\n    ],\n    // Words that introduce trickier definitions like \"define method\".\n    // These require special definitions to be added to startExpressions\n    otherParameterizedDefinition: [\n        \"method\",\n        \"function\",\n        \"C-variable\",\n        \"C-address\"\n    ],\n    // Words that introduce module constant definitions.\n    // These must also be simple definitions and are\n    // appended to otherSimpleDefinitionWords\n    constantSimpleDefinition: [\n        \"constant\"\n    ],\n    // Words that introduce module variable definitions.\n    // These must also be simple definitions and are\n    // appended to otherSimpleDefinitionWords\n    variableSimpleDefinition: [\n        \"variable\"\n    ],\n    // Other words that introduce simple definitions\n    // (without implicit bodies).\n    otherSimpleDefinition: [\n        \"generic\",\n        \"domain\",\n        \"C-pointer-type\",\n        \"table\"\n    ],\n    // Words that begin statements with implicit bodies.\n    statement: [\n        \"if\",\n        \"block\",\n        \"begin\",\n        \"method\",\n        \"case\",\n        \"for\",\n        \"select\",\n        \"when\",\n        \"unless\",\n        \"until\",\n        \"while\",\n        \"iterate\",\n        \"profiling\",\n        \"dynamic-bind\"\n    ],\n    // Patterns that act as separators in compound statements.\n    // This may include any general pattern that must be indented\n    // specially.\n    separator: [\n        \"finally\",\n        \"exception\",\n        \"cleanup\",\n        \"else\",\n        \"elseif\",\n        \"afterwards\"\n    ],\n    // Keywords that do not require special indentation handling,\n    // but which should be highlighted\n    other: [\n        \"above\",\n        \"below\",\n        \"by\",\n        \"from\",\n        \"handler\",\n        \"in\",\n        \"instance\",\n        \"let\",\n        \"local\",\n        \"otherwise\",\n        \"slot\",\n        \"subclass\",\n        \"then\",\n        \"to\",\n        \"keyed-by\",\n        \"virtual\"\n    ],\n    // Condition signaling function calls\n    signalingCalls: [\n        \"signal\",\n        \"error\",\n        \"cerror\",\n        \"break\",\n        \"check-type\",\n        \"abort\"\n    ]\n};\n$0339c1b2f2a1bbee$var$words[\"otherDefinition\"] = $0339c1b2f2a1bbee$var$words[\"unnamedDefinition\"].concat($0339c1b2f2a1bbee$var$words[\"namedDefinition\"]).concat($0339c1b2f2a1bbee$var$words[\"otherParameterizedDefinition\"]);\n$0339c1b2f2a1bbee$var$words[\"definition\"] = $0339c1b2f2a1bbee$var$words[\"typeParameterizedDefinition\"].concat($0339c1b2f2a1bbee$var$words[\"otherDefinition\"]);\n$0339c1b2f2a1bbee$var$words[\"parameterizedDefinition\"] = $0339c1b2f2a1bbee$var$words[\"typeParameterizedDefinition\"].concat($0339c1b2f2a1bbee$var$words[\"otherParameterizedDefinition\"]);\n$0339c1b2f2a1bbee$var$words[\"simpleDefinition\"] = $0339c1b2f2a1bbee$var$words[\"constantSimpleDefinition\"].concat($0339c1b2f2a1bbee$var$words[\"variableSimpleDefinition\"]).concat($0339c1b2f2a1bbee$var$words[\"otherSimpleDefinition\"]);\n$0339c1b2f2a1bbee$var$words[\"keyword\"] = $0339c1b2f2a1bbee$var$words[\"statement\"].concat($0339c1b2f2a1bbee$var$words[\"separator\"]).concat($0339c1b2f2a1bbee$var$words[\"other\"]);\n// Patterns\nvar $0339c1b2f2a1bbee$var$symbolPattern = \"[-_a-zA-Z?!*@<>$%]+\";\nvar $0339c1b2f2a1bbee$var$symbol = new RegExp(\"^\" + $0339c1b2f2a1bbee$var$symbolPattern);\nvar $0339c1b2f2a1bbee$var$patterns = {\n    // Symbols with special syntax\n    symbolKeyword: $0339c1b2f2a1bbee$var$symbolPattern + \":\",\n    symbolClass: \"<\" + $0339c1b2f2a1bbee$var$symbolPattern + \">\",\n    symbolGlobal: \"\\\\*\" + $0339c1b2f2a1bbee$var$symbolPattern + \"\\\\*\",\n    symbolConstant: \"\\\\$\" + $0339c1b2f2a1bbee$var$symbolPattern\n};\nvar $0339c1b2f2a1bbee$var$patternStyles = {\n    symbolKeyword: \"atom\",\n    symbolClass: \"tag\",\n    symbolGlobal: \"variableName.standard\",\n    symbolConstant: \"variableName.constant\"\n};\n// Compile all patterns to regular expressions\nfor(var $0339c1b2f2a1bbee$var$patternName in $0339c1b2f2a1bbee$var$patterns)if ($0339c1b2f2a1bbee$var$patterns.hasOwnProperty($0339c1b2f2a1bbee$var$patternName)) $0339c1b2f2a1bbee$var$patterns[$0339c1b2f2a1bbee$var$patternName] = new RegExp(\"^\" + $0339c1b2f2a1bbee$var$patterns[$0339c1b2f2a1bbee$var$patternName]);\n// Names beginning \"with-\" and \"without-\" are commonly\n// used as statement macro\n$0339c1b2f2a1bbee$var$patterns[\"keyword\"] = [\n    /^with(?:out)?-[-_a-zA-Z?!*@<>$%]+/\n];\nvar $0339c1b2f2a1bbee$var$styles = {};\n$0339c1b2f2a1bbee$var$styles[\"keyword\"] = \"keyword\";\n$0339c1b2f2a1bbee$var$styles[\"definition\"] = \"def\";\n$0339c1b2f2a1bbee$var$styles[\"simpleDefinition\"] = \"def\";\n$0339c1b2f2a1bbee$var$styles[\"signalingCalls\"] = \"builtin\";\n// protected words lookup table\nvar $0339c1b2f2a1bbee$var$wordLookup = {};\nvar $0339c1b2f2a1bbee$var$styleLookup = {};\n$0339c1b2f2a1bbee$var$forEach([\n    \"keyword\",\n    \"definition\",\n    \"simpleDefinition\",\n    \"signalingCalls\"\n], function(type) {\n    $0339c1b2f2a1bbee$var$forEach($0339c1b2f2a1bbee$var$words[type], function(word) {\n        $0339c1b2f2a1bbee$var$wordLookup[word] = type;\n        $0339c1b2f2a1bbee$var$styleLookup[word] = $0339c1b2f2a1bbee$var$styles[type];\n    });\n});\nfunction $0339c1b2f2a1bbee$var$chain(stream, state, f) {\n    state.tokenize = f;\n    return f(stream, state);\n}\nfunction $0339c1b2f2a1bbee$var$tokenBase(stream, state) {\n    // String\n    var ch = stream.peek();\n    if (ch == \"'\" || ch == '\"') {\n        stream.next();\n        return $0339c1b2f2a1bbee$var$chain(stream, state, $0339c1b2f2a1bbee$var$tokenString(ch, \"string\"));\n    } else if (ch == \"/\") {\n        stream.next();\n        if (stream.eat(\"*\")) return $0339c1b2f2a1bbee$var$chain(stream, state, $0339c1b2f2a1bbee$var$tokenComment);\n        else if (stream.eat(\"/\")) {\n            stream.skipToEnd();\n            return \"comment\";\n        }\n        stream.backUp(1);\n    } else if (/[+\\-\\d\\.]/.test(ch)) {\n        if (stream.match(/^[+-]?[0-9]*\\.[0-9]*([esdx][+-]?[0-9]+)?/i) || stream.match(/^[+-]?[0-9]+([esdx][+-]?[0-9]+)/i) || stream.match(/^[+-]?\\d+/)) return \"number\";\n    } else if (ch == \"#\") {\n        stream.next();\n        // Symbol with string syntax\n        ch = stream.peek();\n        if (ch == '\"') {\n            stream.next();\n            return $0339c1b2f2a1bbee$var$chain(stream, state, $0339c1b2f2a1bbee$var$tokenString('\"', \"string\"));\n        } else if (ch == \"b\") {\n            stream.next();\n            stream.eatWhile(/[01]/);\n            return \"number\";\n        } else if (ch == \"x\") {\n            stream.next();\n            stream.eatWhile(/[\\da-f]/i);\n            return \"number\";\n        } else if (ch == \"o\") {\n            stream.next();\n            stream.eatWhile(/[0-7]/);\n            return \"number\";\n        } else if (ch == '#') {\n            stream.next();\n            return \"punctuation\";\n        } else if (ch == '[' || ch == '(') {\n            stream.next();\n            return \"bracket\";\n        // Hash symbol\n        } else if (stream.match(/f|t|all-keys|include|key|next|rest/i)) return \"atom\";\n        else {\n            stream.eatWhile(/[-a-zA-Z]/);\n            return \"error\";\n        }\n    } else if (ch == \"~\") {\n        stream.next();\n        ch = stream.peek();\n        if (ch == \"=\") {\n            stream.next();\n            ch = stream.peek();\n            if (ch == \"=\") {\n                stream.next();\n                return \"operator\";\n            }\n            return \"operator\";\n        }\n        return \"operator\";\n    } else if (ch == \":\") {\n        stream.next();\n        ch = stream.peek();\n        if (ch == \"=\") {\n            stream.next();\n            return \"operator\";\n        } else if (ch == \":\") {\n            stream.next();\n            return \"punctuation\";\n        }\n    } else if (\"[](){}\".indexOf(ch) != -1) {\n        stream.next();\n        return \"bracket\";\n    } else if (\".,\".indexOf(ch) != -1) {\n        stream.next();\n        return \"punctuation\";\n    } else if (stream.match(\"end\")) return \"keyword\";\n    for(var name in $0339c1b2f2a1bbee$var$patterns)if ($0339c1b2f2a1bbee$var$patterns.hasOwnProperty(name)) {\n        var pattern = $0339c1b2f2a1bbee$var$patterns[name];\n        if (pattern instanceof Array && $0339c1b2f2a1bbee$var$some(pattern, function(p) {\n            return stream.match(p);\n        }) || stream.match(pattern)) return $0339c1b2f2a1bbee$var$patternStyles[name];\n    }\n    if (/[+\\-*\\/^=<>&|]/.test(ch)) {\n        stream.next();\n        return \"operator\";\n    }\n    if (stream.match(\"define\")) return \"def\";\n    else {\n        stream.eatWhile(/[\\w\\-]/);\n        // Keyword\n        if ($0339c1b2f2a1bbee$var$wordLookup.hasOwnProperty(stream.current())) return $0339c1b2f2a1bbee$var$styleLookup[stream.current()];\n        else if (stream.current().match($0339c1b2f2a1bbee$var$symbol)) return \"variable\";\n        else {\n            stream.next();\n            return \"variableName.standard\";\n        }\n    }\n}\nfunction $0339c1b2f2a1bbee$var$tokenComment(stream, state) {\n    var maybeEnd = false, maybeNested = false, nestedCount = 0, ch;\n    while(ch = stream.next()){\n        if (ch == \"/\" && maybeEnd) {\n            if (nestedCount > 0) nestedCount--;\n            else {\n                state.tokenize = $0339c1b2f2a1bbee$var$tokenBase;\n                break;\n            }\n        } else if (ch == \"*\" && maybeNested) nestedCount++;\n        maybeEnd = ch == \"*\";\n        maybeNested = ch == \"/\";\n    }\n    return \"comment\";\n}\nfunction $0339c1b2f2a1bbee$var$tokenString(quote, style) {\n    return function(stream, state) {\n        var escaped = false, next, end = false;\n        while((next = stream.next()) != null){\n            if (next == quote && !escaped) {\n                end = true;\n                break;\n            }\n            escaped = !escaped && next == \"\\\\\";\n        }\n        if (end || !escaped) state.tokenize = $0339c1b2f2a1bbee$var$tokenBase;\n        return style;\n    };\n}\nconst $0339c1b2f2a1bbee$export$e58467d11b248b74 = {\n    name: \"dylan\",\n    startState: function() {\n        return {\n            tokenize: $0339c1b2f2a1bbee$var$tokenBase,\n            currentIndent: 0\n        };\n    },\n    token: function(stream, state) {\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        return style;\n    },\n    languageData: {\n        commentTokens: {\n            block: {\n                open: \"/*\",\n                close: \"*/\"\n            }\n        }\n    }\n};\n\n});\n\n\n//# sourceMappingURL=dylan.edffb90b.js.map\n","function forEach(arr, f) {\n  for (var i = 0; i < arr.length; i++) f(arr[i], i)\n}\nfunction some(arr, f) {\n  for (var i = 0; i < arr.length; i++) if (f(arr[i], i)) return true\n  return false\n}\n\n// Words\nvar words = {\n  // Words that introduce unnamed definitions like \"define interface\"\n  unnamedDefinition: [\"interface\"],\n\n  // Words that introduce simple named definitions like \"define library\"\n  namedDefinition: [\"module\", \"library\", \"macro\",\n                    \"C-struct\", \"C-union\",\n                    \"C-function\", \"C-callable-wrapper\"\n                   ],\n\n  // Words that introduce type definitions like \"define class\".\n  // These are also parameterized like \"define method\" and are\n  // appended to otherParameterizedDefinitionWords\n  typeParameterizedDefinition: [\"class\", \"C-subtype\", \"C-mapped-subtype\"],\n\n  // Words that introduce trickier definitions like \"define method\".\n  // These require special definitions to be added to startExpressions\n  otherParameterizedDefinition: [\"method\", \"function\",\n                                 \"C-variable\", \"C-address\"\n                                ],\n\n  // Words that introduce module constant definitions.\n  // These must also be simple definitions and are\n  // appended to otherSimpleDefinitionWords\n  constantSimpleDefinition: [\"constant\"],\n\n  // Words that introduce module variable definitions.\n  // These must also be simple definitions and are\n  // appended to otherSimpleDefinitionWords\n  variableSimpleDefinition: [\"variable\"],\n\n  // Other words that introduce simple definitions\n  // (without implicit bodies).\n  otherSimpleDefinition: [\"generic\", \"domain\",\n                          \"C-pointer-type\",\n                          \"table\"\n                         ],\n\n  // Words that begin statements with implicit bodies.\n  statement: [\"if\", \"block\", \"begin\", \"method\", \"case\",\n              \"for\", \"select\", \"when\", \"unless\", \"until\",\n              \"while\", \"iterate\", \"profiling\", \"dynamic-bind\"\n             ],\n\n  // Patterns that act as separators in compound statements.\n  // This may include any general pattern that must be indented\n  // specially.\n  separator: [\"finally\", \"exception\", \"cleanup\", \"else\",\n              \"elseif\", \"afterwards\"\n             ],\n\n  // Keywords that do not require special indentation handling,\n  // but which should be highlighted\n  other: [\"above\", \"below\", \"by\", \"from\", \"handler\", \"in\",\n          \"instance\", \"let\", \"local\", \"otherwise\", \"slot\",\n          \"subclass\", \"then\", \"to\", \"keyed-by\", \"virtual\"\n         ],\n\n  // Condition signaling function calls\n  signalingCalls: [\"signal\", \"error\", \"cerror\",\n                   \"break\", \"check-type\", \"abort\"\n                  ]\n};\n\nwords[\"otherDefinition\"] =\n  words[\"unnamedDefinition\"]\n  .concat(words[\"namedDefinition\"])\n  .concat(words[\"otherParameterizedDefinition\"]);\n\nwords[\"definition\"] =\n  words[\"typeParameterizedDefinition\"]\n  .concat(words[\"otherDefinition\"]);\n\nwords[\"parameterizedDefinition\"] =\n  words[\"typeParameterizedDefinition\"]\n  .concat(words[\"otherParameterizedDefinition\"]);\n\nwords[\"simpleDefinition\"] =\n  words[\"constantSimpleDefinition\"]\n  .concat(words[\"variableSimpleDefinition\"])\n  .concat(words[\"otherSimpleDefinition\"]);\n\nwords[\"keyword\"] =\n  words[\"statement\"]\n  .concat(words[\"separator\"])\n  .concat(words[\"other\"]);\n\n// Patterns\nvar symbolPattern = \"[-_a-zA-Z?!*@<>$%]+\";\nvar symbol = new RegExp(\"^\" + symbolPattern);\nvar patterns = {\n  // Symbols with special syntax\n  symbolKeyword: symbolPattern + \":\",\n  symbolClass: \"<\" + symbolPattern + \">\",\n  symbolGlobal: \"\\\\*\" + symbolPattern + \"\\\\*\",\n  symbolConstant: \"\\\\$\" + symbolPattern\n};\nvar patternStyles = {\n  symbolKeyword: \"atom\",\n  symbolClass: \"tag\",\n  symbolGlobal: \"variableName.standard\",\n  symbolConstant: \"variableName.constant\"\n};\n\n// Compile all patterns to regular expressions\nfor (var patternName in patterns)\n  if (patterns.hasOwnProperty(patternName))\n    patterns[patternName] = new RegExp(\"^\" + patterns[patternName]);\n\n// Names beginning \"with-\" and \"without-\" are commonly\n// used as statement macro\npatterns[\"keyword\"] = [/^with(?:out)?-[-_a-zA-Z?!*@<>$%]+/];\n\nvar styles = {};\nstyles[\"keyword\"] = \"keyword\";\nstyles[\"definition\"] = \"def\";\nstyles[\"simpleDefinition\"] = \"def\";\nstyles[\"signalingCalls\"] = \"builtin\";\n\n// protected words lookup table\nvar wordLookup = {};\nvar styleLookup = {};\n\nforEach([\n  \"keyword\",\n  \"definition\",\n  \"simpleDefinition\",\n  \"signalingCalls\"\n], function(type) {\n  forEach(words[type], function(word) {\n    wordLookup[word] = type;\n    styleLookup[word] = styles[type];\n  });\n});\n\n\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\n\nfunction tokenBase(stream, state) {\n  // String\n  var ch = stream.peek();\n  if (ch == \"'\" || ch == '\"') {\n    stream.next();\n    return chain(stream, state, tokenString(ch, \"string\"));\n  }\n  // Comment\n  else if (ch == \"/\") {\n    stream.next();\n    if (stream.eat(\"*\")) {\n      return chain(stream, state, tokenComment);\n    } else if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    stream.backUp(1);\n  }\n  // Decimal\n  else if (/[+\\-\\d\\.]/.test(ch)) {\n    if (stream.match(/^[+-]?[0-9]*\\.[0-9]*([esdx][+-]?[0-9]+)?/i) ||\n        stream.match(/^[+-]?[0-9]+([esdx][+-]?[0-9]+)/i) ||\n        stream.match(/^[+-]?\\d+/)) {\n      return \"number\";\n    }\n  }\n  // Hash\n  else if (ch == \"#\") {\n    stream.next();\n    // Symbol with string syntax\n    ch = stream.peek();\n    if (ch == '\"') {\n      stream.next();\n      return chain(stream, state, tokenString('\"', \"string\"));\n    }\n    // Binary number\n    else if (ch == \"b\") {\n      stream.next();\n      stream.eatWhile(/[01]/);\n      return \"number\";\n    }\n    // Hex number\n    else if (ch == \"x\") {\n      stream.next();\n      stream.eatWhile(/[\\da-f]/i);\n      return \"number\";\n    }\n    // Octal number\n    else if (ch == \"o\") {\n      stream.next();\n      stream.eatWhile(/[0-7]/);\n      return \"number\";\n    }\n    // Token concatenation in macros\n    else if (ch == '#') {\n      stream.next();\n      return \"punctuation\";\n    }\n    // Sequence literals\n    else if ((ch == '[') || (ch == '(')) {\n      stream.next();\n      return \"bracket\";\n      // Hash symbol\n    } else if (stream.match(/f|t|all-keys|include|key|next|rest/i)) {\n      return \"atom\";\n    } else {\n      stream.eatWhile(/[-a-zA-Z]/);\n      return \"error\";\n    }\n  } else if (ch == \"~\") {\n    stream.next();\n    ch = stream.peek();\n    if (ch == \"=\") {\n      stream.next();\n      ch = stream.peek();\n      if (ch == \"=\") {\n        stream.next();\n        return \"operator\";\n      }\n      return \"operator\";\n    }\n    return \"operator\";\n  } else if (ch == \":\") {\n    stream.next();\n    ch = stream.peek();\n    if (ch == \"=\") {\n      stream.next();\n      return \"operator\";\n    } else if (ch == \":\") {\n      stream.next();\n      return \"punctuation\";\n    }\n  } else if (\"[](){}\".indexOf(ch) != -1) {\n    stream.next();\n    return \"bracket\";\n  } else if (\".,\".indexOf(ch) != -1) {\n    stream.next();\n    return \"punctuation\";\n  } else if (stream.match(\"end\")) {\n    return \"keyword\";\n  }\n  for (var name in patterns) {\n    if (patterns.hasOwnProperty(name)) {\n      var pattern = patterns[name];\n      if ((pattern instanceof Array && some(pattern, function(p) {\n        return stream.match(p);\n      })) || stream.match(pattern))\n        return patternStyles[name];\n    }\n  }\n  if (/[+\\-*\\/^=<>&|]/.test(ch)) {\n    stream.next();\n    return \"operator\";\n  }\n  if (stream.match(\"define\")) {\n    return \"def\";\n  } else {\n    stream.eatWhile(/[\\w\\-]/);\n    // Keyword\n    if (wordLookup.hasOwnProperty(stream.current())) {\n      return styleLookup[stream.current()];\n    } else if (stream.current().match(symbol)) {\n      return \"variable\";\n    } else {\n      stream.next();\n      return \"variableName.standard\";\n    }\n  }\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, maybeNested = false, nestedCount = 0, ch;\n  while ((ch = stream.next())) {\n    if (ch == \"/\" && maybeEnd) {\n      if (nestedCount > 0) {\n        nestedCount--;\n      } else {\n        state.tokenize = tokenBase;\n        break;\n      }\n    } else if (ch == \"*\" && maybeNested) {\n      nestedCount++;\n    }\n    maybeEnd = (ch == \"*\");\n    maybeNested = (ch == \"/\");\n  }\n  return \"comment\";\n}\n\nfunction tokenString(quote, style) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !escaped) {\n      state.tokenize = tokenBase;\n    }\n    return style;\n  };\n}\n\n// Interface\nexport const dylan = {\n  name: \"dylan\",\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      currentIndent: 0\n    };\n  },\n  token: function(stream, state) {\n    if (stream.eatSpace())\n      return null;\n    var style = state.tokenize(stream, state);\n    return style;\n  },\n  languageData: {\n    commentTokens: {block: {open: \"/*\", close: \"*/\"}}\n  }\n};\n\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","$0339c1b2f2a1bbee$var$forEach","arr","f","i","length","Object","defineProperty","get","$0339c1b2f2a1bbee$export$e58467d11b248b74","set","s","enumerable","configurable","$0339c1b2f2a1bbee$var$words","unnamedDefinition","namedDefinition","typeParameterizedDefinition","otherParameterizedDefinition","constantSimpleDefinition","variableSimpleDefinition","otherSimpleDefinition","statement","separator","other","signalingCalls","concat","$0339c1b2f2a1bbee$var$symbolPattern","$0339c1b2f2a1bbee$var$symbol","RegExp","$0339c1b2f2a1bbee$var$patterns","symbolKeyword","symbolClass","symbolGlobal","symbolConstant","$0339c1b2f2a1bbee$var$patternStyles","$0339c1b2f2a1bbee$var$patternName","hasOwnProperty","$0339c1b2f2a1bbee$var$styles","$0339c1b2f2a1bbee$var$wordLookup","$0339c1b2f2a1bbee$var$styleLookup","$0339c1b2f2a1bbee$var$chain","stream","state","tokenize","$0339c1b2f2a1bbee$var$tokenBase","ch","peek","next","$0339c1b2f2a1bbee$var$tokenString","eat","$0339c1b2f2a1bbee$var$tokenComment","skipToEnd","backUp","test","match","eatWhile","indexOf","name","pattern","Array","$0339c1b2f2a1bbee$var$some","p","current","maybeEnd","maybeNested","nestedCount","quote","style","escaped","end","type","word","startState","currentIndent","token","eatSpace","languageData","commentTokens","block","open","close"],"version":3,"file":"dylan.edffb90b.js.map"}