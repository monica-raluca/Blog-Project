{"mappings":"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","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/mumps.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"2U7Le\", function(module, exports) {\n\n$parcel$export(module.exports, \"mumps\", () => $21d6d4df42f86f15$export$b1c787dbdab10919);\nfunction $21d6d4df42f86f15$var$wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n}\nvar $21d6d4df42f86f15$var$singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&#!_?\\\\\\\\<>=\\\\'\\\\[\\\\]]\");\nvar $21d6d4df42f86f15$var$doubleOperators = new RegExp(\"^(('=)|(<=)|(>=)|('>)|('<)|([[)|(]])|(^$))\");\nvar $21d6d4df42f86f15$var$singleDelimiters = new RegExp(\"^[\\\\.,:]\");\nvar $21d6d4df42f86f15$var$brackets = new RegExp(\"[()]\");\nvar $21d6d4df42f86f15$var$identifiers = new RegExp(\"^[%A-Za-z][A-Za-z0-9]*\");\nvar $21d6d4df42f86f15$var$commandKeywords = [\n    \"break\",\n    \"close\",\n    \"do\",\n    \"else\",\n    \"for\",\n    \"goto\",\n    \"halt\",\n    \"hang\",\n    \"if\",\n    \"job\",\n    \"kill\",\n    \"lock\",\n    \"merge\",\n    \"new\",\n    \"open\",\n    \"quit\",\n    \"read\",\n    \"set\",\n    \"tcommit\",\n    \"trollback\",\n    \"tstart\",\n    \"use\",\n    \"view\",\n    \"write\",\n    \"xecute\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"tc\",\n    \"tro\",\n    \"ts\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\"\n];\n// The following list includes intrinsic functions _and_ special variables\nvar $21d6d4df42f86f15$var$intrinsicFuncsWords = [\n    \"\\\\$ascii\",\n    \"\\\\$char\",\n    \"\\\\$data\",\n    \"\\\\$ecode\",\n    \"\\\\$estack\",\n    \"\\\\$etrap\",\n    \"\\\\$extract\",\n    \"\\\\$find\",\n    \"\\\\$fnumber\",\n    \"\\\\$get\",\n    \"\\\\$horolog\",\n    \"\\\\$io\",\n    \"\\\\$increment\",\n    \"\\\\$job\",\n    \"\\\\$justify\",\n    \"\\\\$length\",\n    \"\\\\$name\",\n    \"\\\\$next\",\n    \"\\\\$order\",\n    \"\\\\$piece\",\n    \"\\\\$qlength\",\n    \"\\\\$qsubscript\",\n    \"\\\\$query\",\n    \"\\\\$quit\",\n    \"\\\\$random\",\n    \"\\\\$reverse\",\n    \"\\\\$select\",\n    \"\\\\$stack\",\n    \"\\\\$test\",\n    \"\\\\$text\",\n    \"\\\\$translate\",\n    \"\\\\$view\",\n    \"\\\\$x\",\n    \"\\\\$y\",\n    \"\\\\$a\",\n    \"\\\\$c\",\n    \"\\\\$d\",\n    \"\\\\$e\",\n    \"\\\\$ec\",\n    \"\\\\$es\",\n    \"\\\\$et\",\n    \"\\\\$f\",\n    \"\\\\$fn\",\n    \"\\\\$g\",\n    \"\\\\$h\",\n    \"\\\\$i\",\n    \"\\\\$j\",\n    \"\\\\$l\",\n    \"\\\\$n\",\n    \"\\\\$na\",\n    \"\\\\$o\",\n    \"\\\\$p\",\n    \"\\\\$q\",\n    \"\\\\$ql\",\n    \"\\\\$qs\",\n    \"\\\\$r\",\n    \"\\\\$re\",\n    \"\\\\$s\",\n    \"\\\\$st\",\n    \"\\\\$t\",\n    \"\\\\$tr\",\n    \"\\\\$v\",\n    \"\\\\$z\"\n];\nvar $21d6d4df42f86f15$var$intrinsicFuncs = $21d6d4df42f86f15$var$wordRegexp($21d6d4df42f86f15$var$intrinsicFuncsWords);\nvar $21d6d4df42f86f15$var$command = $21d6d4df42f86f15$var$wordRegexp($21d6d4df42f86f15$var$commandKeywords);\nfunction $21d6d4df42f86f15$var$tokenBase(stream, state) {\n    if (stream.sol()) {\n        state.label = true;\n        state.commandMode = 0;\n    }\n    // The <space> character has meaning in MUMPS. Ignoring consecutive\n    // spaces would interfere with interpreting whether the next non-space\n    // character belongs to the command or argument context.\n    // Examine each character and update a mode variable whose interpretation is:\n    //   >0 => command    0 => argument    <0 => command post-conditional\n    var ch = stream.peek();\n    if (ch == \" \" || ch == \"\\t\") {\n        state.label = false;\n        if (state.commandMode == 0) state.commandMode = 1;\n        else if (state.commandMode < 0 || state.commandMode == 2) state.commandMode = 0;\n    } else if (ch != \".\" && state.commandMode > 0) {\n        if (ch == \":\") state.commandMode = -1; // SIS - Command post-conditional\n        else state.commandMode = 2;\n    }\n    // Do not color parameter list as line tag\n    if (ch === \"(\" || ch === \"\\u0009\") state.label = false;\n    // MUMPS comment starts with \";\"\n    if (ch === \";\") {\n        stream.skipToEnd();\n        return \"comment\";\n    }\n    // Number Literals // SIS/RLM - MUMPS permits canonic number followed by concatenate operator\n    if (stream.match(/^[-+]?\\d+(\\.\\d+)?([eE][-+]?\\d+)?/)) return \"number\";\n    // Handle Strings\n    if (ch == '\"') {\n        if (stream.skipTo('\"')) {\n            stream.next();\n            return \"string\";\n        } else {\n            stream.skipToEnd();\n            return \"error\";\n        }\n    }\n    // Handle operators and Delimiters\n    if (stream.match($21d6d4df42f86f15$var$doubleOperators) || stream.match($21d6d4df42f86f15$var$singleOperators)) return \"operator\";\n    // Prevents leading \".\" in DO block from falling through to error\n    if (stream.match($21d6d4df42f86f15$var$singleDelimiters)) return null;\n    if ($21d6d4df42f86f15$var$brackets.test(ch)) {\n        stream.next();\n        return \"bracket\";\n    }\n    if (state.commandMode > 0 && stream.match($21d6d4df42f86f15$var$command)) return \"controlKeyword\";\n    if (stream.match($21d6d4df42f86f15$var$intrinsicFuncs)) return \"builtin\";\n    if (stream.match($21d6d4df42f86f15$var$identifiers)) return \"variable\";\n    // Detect dollar-sign when not a documented intrinsic function\n    // \"^\" may introduce a GVN or SSVN - Color same as function\n    if (ch === \"$\" || ch === \"^\") {\n        stream.next();\n        return \"builtin\";\n    }\n    // MUMPS Indirection\n    if (ch === \"@\") {\n        stream.next();\n        return \"string.special\";\n    }\n    if (/[\\w%]/.test(ch)) {\n        stream.eatWhile(/[\\w%]/);\n        return \"variable\";\n    }\n    // Handle non-detected items\n    stream.next();\n    return \"error\";\n}\nconst $21d6d4df42f86f15$export$b1c787dbdab10919 = {\n    name: \"mumps\",\n    startState: function() {\n        return {\n            label: false,\n            commandMode: 0\n        };\n    },\n    token: function(stream, state) {\n        var style = $21d6d4df42f86f15$var$tokenBase(stream, state);\n        if (state.label) return \"tag\";\n        return style;\n    }\n};\n\n});\n\n\n//# sourceMappingURL=mumps.06348380.js.map\n","function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n}\n\nvar singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&#!_?\\\\\\\\<>=\\\\'\\\\[\\\\]]\");\nvar doubleOperators = new RegExp(\"^(('=)|(<=)|(>=)|('>)|('<)|([[)|(]])|(^$))\");\nvar singleDelimiters = new RegExp(\"^[\\\\.,:]\");\nvar brackets = new RegExp(\"[()]\");\nvar identifiers = new RegExp(\"^[%A-Za-z][A-Za-z0-9]*\");\nvar commandKeywords = [\"break\",\"close\",\"do\",\"else\",\"for\",\"goto\", \"halt\", \"hang\", \"if\", \"job\",\"kill\",\"lock\",\"merge\",\"new\",\"open\", \"quit\", \"read\", \"set\", \"tcommit\", \"trollback\", \"tstart\", \"use\", \"view\", \"write\", \"xecute\", \"b\",\"c\",\"d\",\"e\",\"f\",\"g\", \"h\", \"i\", \"j\",\"k\",\"l\",\"m\",\"n\",\"o\", \"q\", \"r\", \"s\", \"tc\", \"tro\", \"ts\", \"u\", \"v\", \"w\", \"x\"];\n// The following list includes intrinsic functions _and_ special variables\nvar intrinsicFuncsWords = [\"\\\\$ascii\", \"\\\\$char\", \"\\\\$data\", \"\\\\$ecode\", \"\\\\$estack\", \"\\\\$etrap\", \"\\\\$extract\", \"\\\\$find\", \"\\\\$fnumber\", \"\\\\$get\", \"\\\\$horolog\", \"\\\\$io\", \"\\\\$increment\", \"\\\\$job\", \"\\\\$justify\", \"\\\\$length\", \"\\\\$name\", \"\\\\$next\", \"\\\\$order\", \"\\\\$piece\", \"\\\\$qlength\", \"\\\\$qsubscript\", \"\\\\$query\", \"\\\\$quit\", \"\\\\$random\", \"\\\\$reverse\", \"\\\\$select\", \"\\\\$stack\", \"\\\\$test\", \"\\\\$text\", \"\\\\$translate\", \"\\\\$view\", \"\\\\$x\", \"\\\\$y\", \"\\\\$a\", \"\\\\$c\", \"\\\\$d\", \"\\\\$e\", \"\\\\$ec\", \"\\\\$es\", \"\\\\$et\", \"\\\\$f\", \"\\\\$fn\", \"\\\\$g\", \"\\\\$h\", \"\\\\$i\", \"\\\\$j\", \"\\\\$l\", \"\\\\$n\", \"\\\\$na\", \"\\\\$o\", \"\\\\$p\", \"\\\\$q\", \"\\\\$ql\", \"\\\\$qs\", \"\\\\$r\", \"\\\\$re\", \"\\\\$s\", \"\\\\$st\", \"\\\\$t\", \"\\\\$tr\", \"\\\\$v\", \"\\\\$z\"];\nvar intrinsicFuncs = wordRegexp(intrinsicFuncsWords);\nvar command = wordRegexp(commandKeywords);\n\nfunction tokenBase(stream, state) {\n  if (stream.sol()) {\n    state.label = true;\n    state.commandMode = 0;\n  }\n\n  // The <space> character has meaning in MUMPS. Ignoring consecutive\n  // spaces would interfere with interpreting whether the next non-space\n  // character belongs to the command or argument context.\n\n  // Examine each character and update a mode variable whose interpretation is:\n  //   >0 => command    0 => argument    <0 => command post-conditional\n  var ch = stream.peek();\n\n  if (ch == \" \" || ch == \"\\t\") { // Pre-process <space>\n    state.label = false;\n    if (state.commandMode == 0)\n      state.commandMode = 1;\n    else if ((state.commandMode < 0) || (state.commandMode == 2))\n      state.commandMode = 0;\n  } else if ((ch != \".\") && (state.commandMode > 0)) {\n    if (ch == \":\")\n      state.commandMode = -1;   // SIS - Command post-conditional\n    else\n      state.commandMode = 2;\n  }\n\n  // Do not color parameter list as line tag\n  if ((ch === \"(\") || (ch === \"\\u0009\"))\n    state.label = false;\n\n  // MUMPS comment starts with \";\"\n  if (ch === \";\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  // Number Literals // SIS/RLM - MUMPS permits canonic number followed by concatenate operator\n  if (stream.match(/^[-+]?\\d+(\\.\\d+)?([eE][-+]?\\d+)?/))\n    return \"number\";\n\n  // Handle Strings\n  if (ch == '\"') {\n    if (stream.skipTo('\"')) {\n      stream.next();\n      return \"string\";\n    } else {\n      stream.skipToEnd();\n      return \"error\";\n    }\n  }\n\n  // Handle operators and Delimiters\n  if (stream.match(doubleOperators) || stream.match(singleOperators))\n    return \"operator\";\n\n  // Prevents leading \".\" in DO block from falling through to error\n  if (stream.match(singleDelimiters))\n    return null;\n\n  if (brackets.test(ch)) {\n    stream.next();\n    return \"bracket\";\n  }\n\n  if (state.commandMode > 0 && stream.match(command))\n    return \"controlKeyword\";\n\n  if (stream.match(intrinsicFuncs))\n    return \"builtin\";\n\n  if (stream.match(identifiers))\n    return \"variable\";\n\n  // Detect dollar-sign when not a documented intrinsic function\n  // \"^\" may introduce a GVN or SSVN - Color same as function\n  if (ch === \"$\" || ch === \"^\") {\n    stream.next();\n    return \"builtin\";\n  }\n\n  // MUMPS Indirection\n  if (ch === \"@\") {\n    stream.next();\n    return \"string.special\";\n  }\n\n  if (/[\\w%]/.test(ch)) {\n    stream.eatWhile(/[\\w%]/);\n    return \"variable\";\n  }\n\n  // Handle non-detected items\n  stream.next();\n  return \"error\";\n}\n\nexport const mumps = {\n  name: \"mumps\",\n  startState: function() {\n    return {\n      label: false,\n      commandMode: 0\n    };\n  },\n\n  token: function(stream, state) {\n    var style = tokenBase(stream, state);\n    if (state.label) return \"tag\";\n    return style;\n  }\n};\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","$21d6d4df42f86f15$var$wordRegexp","words","RegExp","join","Object","defineProperty","get","$21d6d4df42f86f15$export$b1c787dbdab10919","set","s","enumerable","configurable","$21d6d4df42f86f15$var$singleOperators","$21d6d4df42f86f15$var$doubleOperators","$21d6d4df42f86f15$var$singleDelimiters","$21d6d4df42f86f15$var$brackets","$21d6d4df42f86f15$var$identifiers","$21d6d4df42f86f15$var$intrinsicFuncs","$21d6d4df42f86f15$var$command","name","startState","label","commandMode","token","stream","state","style","$21d6d4df42f86f15$var$tokenBase","sol","ch","peek","skipToEnd","match","skipTo","next","test","eatWhile"],"version":3,"file":"mumps.06348380.js.map"}