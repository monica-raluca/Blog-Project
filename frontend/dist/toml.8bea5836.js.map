{"mappings":"A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,O,C,I,I,E,I,K,E,W,C,E,a,C,C,GCAO,IAAM,EAAO,CAClB,KAAM,OACN,WAAY,WACV,MAAO,CACL,SAAU,CAAA,EACV,WAAY,GACZ,IAAK,CAAA,EACL,QAAS,CACX,CACF,EACA,MAAO,SAAU,CAAM,CAAE,CAAK,EAW5B,GATK,EAAM,QAAQ,EAAK,AAAkB,KAAlB,EAAQ,IAAI,IAAe,AAAiB,KAAjB,EAAO,IAAI,KAC5D,EAAM,UAAU,CAAG,EAAO,IAAI,GAC9B,EAAO,IAAI,GACX,EAAM,QAAQ,CAAG,CAAA,GAEf,EAAO,GAAG,IAAM,AAAkB,IAAlB,EAAM,OAAO,EAC/B,CAAA,EAAM,GAAG,CAAG,CAAA,CADd,EAII,EAAM,QAAQ,CAAE,CAClB,KAAO,EAAM,QAAQ,EAAI,CAAC,EAAO,GAAG,IAC9B,EAAO,IAAI,KAAO,EAAM,UAAU,EACpC,EAAO,IAAI,GACX,EAAM,QAAQ,CAAG,CAAA,GACR,AAAkB,OAAlB,EAAO,IAAI,IACpB,EAAO,IAAI,GACX,EAAO,IAAI,IAEX,EAAO,KAAK,CAAC,gBAGjB,OAAO,EAAM,GAAG,CAAG,WAAa,QAClC,CAAO,GAAI,EAAM,OAAO,EAAI,AAAkB,MAAlB,EAAO,IAAI,GAGrC,OAFA,EAAO,IAAI,GACX,EAAM,OAAO,GACN,UACF,GAAI,EAAM,GAAG,EAAI,AAAkB,MAAlB,EAAO,IAAI,IAAc,EAAO,MAAM,CAAC,KAI7D,OAHA,EAAO,IAAI,GAEP,AAAkB,MAAlB,EAAO,IAAI,IAAY,EAAO,IAAI,GAC/B,OACF,GAAI,AAAkB,MAAlB,EAAO,IAAI,GAEpB,OADA,EAAO,SAAS,GACT,UACF,GAAI,EAAO,QAAQ,SAEnB,GAAI,EAAM,GAAG,EAAI,EAAO,QAAQ,CAAC,SAAU,CAAC,EAAI,MAAO,AAAK,KAAL,GAAY,AAAK,KAAL,CAAU,GAClF,MAAO,gBACF,GAAI,EAAM,GAAG,EAAI,AAAkB,MAAlB,EAAO,IAAI,GACjC,EAAO,IAAI,GACX,EAAM,GAAG,CAAG,CAAA,OAEP,GAAI,CAAC,EAAM,GAAG,EAAI,EAAO,KAAK,CAAC,2BAE3B,CAAC,EAAM,GAAG,EAAK,CAAA,EAAO,KAAK,CAAC,SAAW,EAAO,KAAK,CAAC,QAAA,EAD7D,MAAO,OAGF,GAAI,CAAC,EAAM,GAAG,EAAI,AAAkB,MAAlB,EAAO,IAAI,GAGlC,OAFA,EAAM,OAAO,GACb,EAAO,IAAI,GACJ,UACF,GAAI,CAAC,EAAM,GAAG,EAAI,EAAO,KAAK,CAAC,qBACpC,MAAO,QACE,CAAC,EAAO,QAAQ,IACzB,EAAO,IAAI,GAEb,OAAO,IACT,EACA,aAAc,CACZ,cAAe,CAAE,KAAM,GAAI,CAC7B,CACF,C","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/toml.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"37tEj\", function(module, exports) {\n\n$parcel$export(module.exports, \"toml\", () => $2459063ec86e3c30$export$949f2a0824fb2fb6);\nconst $2459063ec86e3c30$export$949f2a0824fb2fb6 = {\n    name: \"toml\",\n    startState: function() {\n        return {\n            inString: false,\n            stringType: \"\",\n            lhs: true,\n            inArray: 0\n        };\n    },\n    token: function(stream, state) {\n        //check for state changes\n        if (!state.inString && (stream.peek() == '\"' || stream.peek() == \"'\")) {\n            state.stringType = stream.peek();\n            stream.next(); // Skip quote\n            state.inString = true; // Update state\n        }\n        if (stream.sol() && state.inArray === 0) state.lhs = true;\n        //return state\n        if (state.inString) {\n            while(state.inString && !stream.eol()){\n                if (stream.peek() === state.stringType) {\n                    stream.next(); // Skip quote\n                    state.inString = false; // Clear flag\n                } else if (stream.peek() === '\\\\') {\n                    stream.next();\n                    stream.next();\n                } else stream.match(/^.[^\\\\\\\"\\']*/);\n            }\n            return state.lhs ? \"property\" : \"string\"; // Token style\n        } else if (state.inArray && stream.peek() === ']') {\n            stream.next();\n            state.inArray--;\n            return 'bracket';\n        } else if (state.lhs && stream.peek() === '[' && stream.skipTo(']')) {\n            stream.next(); //skip closing ]\n            // array of objects has an extra open & close []\n            if (stream.peek() === ']') stream.next();\n            return \"atom\";\n        } else if (stream.peek() === \"#\") {\n            stream.skipToEnd();\n            return \"comment\";\n        } else if (stream.eatSpace()) return null;\n        else if (state.lhs && stream.eatWhile(function(c) {\n            return c != '=' && c != ' ';\n        })) return \"property\";\n        else if (state.lhs && stream.peek() === \"=\") {\n            stream.next();\n            state.lhs = false;\n            return null;\n        } else if (!state.lhs && stream.match(/^\\d\\d\\d\\d[\\d\\-\\:\\.T]*Z/)) return 'atom'; //date\n        else if (!state.lhs && (stream.match('true') || stream.match('false'))) return 'atom';\n        else if (!state.lhs && stream.peek() === '[') {\n            state.inArray++;\n            stream.next();\n            return 'bracket';\n        } else if (!state.lhs && stream.match(/^\\-?\\d+(?:\\.\\d+)?/)) return 'number';\n        else if (!stream.eatSpace()) stream.next();\n        return null;\n    },\n    languageData: {\n        commentTokens: {\n            line: '#'\n        }\n    }\n};\n\n});\n\n\n//# sourceMappingURL=toml.8bea5836.js.map\n","export const toml = {\n  name: \"toml\",\n  startState: function () {\n    return {\n      inString: false,\n      stringType: \"\",\n      lhs: true,\n      inArray: 0\n    };\n  },\n  token: function (stream, state) {\n    //check for state changes\n    if (!state.inString && ((stream.peek() == '\"') || (stream.peek() == \"'\"))) {\n      state.stringType = stream.peek();\n      stream.next(); // Skip quote\n      state.inString = true; // Update state\n    }\n    if (stream.sol() && state.inArray === 0) {\n      state.lhs = true;\n    }\n    //return state\n    if (state.inString) {\n      while (state.inString && !stream.eol()) {\n        if (stream.peek() === state.stringType) {\n          stream.next(); // Skip quote\n          state.inString = false; // Clear flag\n        } else if (stream.peek() === '\\\\') {\n          stream.next();\n          stream.next();\n        } else {\n          stream.match(/^.[^\\\\\\\"\\']*/);\n        }\n      }\n      return state.lhs ? \"property\" : \"string\"; // Token style\n    } else if (state.inArray && stream.peek() === ']') {\n      stream.next();\n      state.inArray--;\n      return 'bracket';\n    } else if (state.lhs && stream.peek() === '[' && stream.skipTo(']')) {\n      stream.next();//skip closing ]\n      // array of objects has an extra open & close []\n      if (stream.peek() === ']') stream.next();\n      return \"atom\";\n    } else if (stream.peek() === \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    } else if (stream.eatSpace()) {\n      return null;\n    } else if (state.lhs && stream.eatWhile(function (c) { return c != '=' && c != ' '; })) {\n      return \"property\";\n    } else if (state.lhs && stream.peek() === \"=\") {\n      stream.next();\n      state.lhs = false;\n      return null;\n    } else if (!state.lhs && stream.match(/^\\d\\d\\d\\d[\\d\\-\\:\\.T]*Z/)) {\n      return 'atom'; //date\n    } else if (!state.lhs && (stream.match('true') || stream.match('false'))) {\n      return 'atom';\n    } else if (!state.lhs && stream.peek() === '[') {\n      state.inArray++;\n      stream.next();\n      return 'bracket';\n    } else if (!state.lhs && stream.match(/^\\-?\\d+(?:\\.\\d+)?/)) {\n      return 'number';\n    } else if (!stream.eatSpace()) {\n      stream.next();\n    }\n    return null;\n  },\n  languageData: {\n    commentTokens: { line: '#' },\n  },\n};\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","Object","defineProperty","get","$2459063ec86e3c30$export$949f2a0824fb2fb6","set","s","enumerable","configurable","name","startState","inString","stringType","lhs","inArray","token","stream","state","peek","next","sol","eol","match","skipTo","skipToEnd","eatSpace","eatWhile","c","languageData","commentTokens","line"],"version":3,"file":"toml.8bea5836.js.map"}