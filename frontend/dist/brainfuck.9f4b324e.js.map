{"mappings":"A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,Y,C,I,I,E,I,K,E,W,C,E,a,C,C,GCAA,IAAI,EAAU,WAAW,KAAK,CAAC,IAcxB,IAAM,EAAY,CACvB,KAAM,YACN,WAAY,WACV,MAAO,CACL,YAAa,CAAA,EACb,KAAM,EACN,MAAO,EACP,YAAa,CAAA,CACf,CACF,EACA,MAAO,SAAS,CAAM,CAAE,CAAK,EAC3B,GAAI,EAAO,QAAQ,GAAI,OAAO,IAC3B,CAAA,EAAO,GAAG,IACX,CAAA,EAAM,WAAW,CAAG,CAAA,CADtB,EAGA,IAAI,EAAK,EAAO,IAAI,GAAG,QAAQ,GAC/B,GAAG,AAAwB,KAAxB,EAAQ,OAAO,CAAC,GA+BjB,OAJA,EAAM,WAAW,CAAG,CAAA,EACjB,EAAO,GAAG,IACX,CAAA,EAAM,WAAW,CAAG,CAAA,CADtB,EAGO,UA9BP,GAAG,AAAsB,CAAA,IAAtB,EAAM,WAAW,CAIlB,OAHG,EAAO,GAAG,IACX,CAAA,EAAM,WAAW,CAAG,CAAA,CADtB,EAGO,UAET,GAAG,AAAO,MAAP,GAAc,AAAO,MAAP,EAOf,MANG,AAAO,MAAP,EACD,EAAM,IAAI,GAGV,EAAM,KAAK,GAEN,UAEJ,GAAG,AAAO,MAAP,GAAc,AAAO,MAAP,EACpB,MAAO,UAEJ,GAAG,AAAO,MAAP,GAAc,AAAO,MAAP,EACpB,MAAO,OAEJ,GAAG,AAAO,MAAP,GAAc,AAAO,MAAP,EACpB,MAAO,KAUR,CAAA,EAAO,GAAG,IACX,CAAA,EAAM,WAAW,CAAG,CAAA,CADtB,CAGF,CACF,C","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/brainfuck.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"1t7nu\", function(module, exports) {\n\n$parcel$export(module.exports, \"brainfuck\", () => $111e38f30461a8e8$export$2b7ede4d96f89418);\nvar $111e38f30461a8e8$var$reserve = \"><+-.,[]\".split(\"\");\nconst $111e38f30461a8e8$export$2b7ede4d96f89418 = {\n    name: \"brainfuck\",\n    startState: function() {\n        return {\n            commentLine: false,\n            left: 0,\n            right: 0,\n            commentLoop: false\n        };\n    },\n    token: function(stream, state) {\n        if (stream.eatSpace()) return null;\n        if (stream.sol()) state.commentLine = false;\n        var ch = stream.next().toString();\n        if ($111e38f30461a8e8$var$reserve.indexOf(ch) !== -1) {\n            if (state.commentLine === true) {\n                if (stream.eol()) state.commentLine = false;\n                return \"comment\";\n            }\n            if (ch === \"]\" || ch === \"[\") {\n                if (ch === \"[\") state.left++;\n                else state.right++;\n                return \"bracket\";\n            } else if (ch === \"+\" || ch === \"-\") return \"keyword\";\n            else if (ch === \"<\" || ch === \">\") return \"atom\";\n            else if (ch === \".\" || ch === \",\") return \"def\";\n        } else {\n            state.commentLine = true;\n            if (stream.eol()) state.commentLine = false;\n            return \"comment\";\n        }\n        if (stream.eol()) state.commentLine = false;\n    }\n};\n\n});\n\n\n//# sourceMappingURL=brainfuck.9f4b324e.js.map\n","var reserve = \"><+-.,[]\".split(\"\");\n/*\n  comments can be either:\n  placed behind lines\n\n  +++    this is a comment\n\n  where reserved characters cannot be used\n  or in a loop\n  [\n  this is ok to use [ ] and stuff\n  ]\n  or preceded by #\n*/\nexport const brainfuck = {\n  name: \"brainfuck\",\n  startState: function() {\n    return {\n      commentLine: false,\n      left: 0,\n      right: 0,\n      commentLoop: false\n    }\n  },\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null\n    if(stream.sol()){\n      state.commentLine = false;\n    }\n    var ch = stream.next().toString();\n    if(reserve.indexOf(ch) !== -1){\n      if(state.commentLine === true){\n        if(stream.eol()){\n          state.commentLine = false;\n        }\n        return \"comment\";\n      }\n      if(ch === \"]\" || ch === \"[\"){\n        if(ch === \"[\"){\n          state.left++;\n        }\n        else{\n          state.right++;\n        }\n        return \"bracket\";\n      }\n      else if(ch === \"+\" || ch === \"-\"){\n        return \"keyword\";\n      }\n      else if(ch === \"<\" || ch === \">\"){\n        return \"atom\";\n      }\n      else if(ch === \".\" || ch === \",\"){\n        return \"def\";\n      }\n    }\n    else{\n      state.commentLine = true;\n      if(stream.eol()){\n        state.commentLine = false;\n      }\n      return \"comment\";\n    }\n    if(stream.eol()){\n      state.commentLine = false;\n    }\n  }\n};\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","Object","defineProperty","get","$111e38f30461a8e8$export$2b7ede4d96f89418","set","s","enumerable","configurable","$111e38f30461a8e8$var$reserve","split","name","startState","commentLine","left","right","commentLoop","token","stream","state","eatSpace","sol","ch","next","toString","indexOf","eol"],"version":3,"file":"brainfuck.9f4b324e.js.map"}