{"mappings":"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","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/factor.js","node_modules/@codemirror/legacy-modes/mode/simple-mode.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"75S3R\", function(module, exports) {\n\n$parcel$export(module.exports, \"factor\", () => $52a2ef7c2859c345$export$4564c084226129f7);\n\nvar $dp0dU = parcelRequire(\"dp0dU\");\nconst $52a2ef7c2859c345$export$4564c084226129f7 = (0, $dp0dU.simpleMode)({\n    start: [\n        // comments\n        {\n            regex: /#?!.*/,\n            token: \"comment\"\n        },\n        // strings \"\"\", multiline --> state\n        {\n            regex: /\"\"\"/,\n            token: \"string\",\n            next: \"string3\"\n        },\n        {\n            regex: /(STRING:)(\\s)/,\n            token: [\n                \"keyword\",\n                null\n            ],\n            next: \"string2\"\n        },\n        {\n            regex: /\\S*?\"/,\n            token: \"string\",\n            next: \"string\"\n        },\n        // numbers: dec, hex, unicode, bin, fractional, complex\n        {\n            regex: /(?:0x[\\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\\-?\\d+.?\\d*)(?=\\s)/,\n            token: \"number\"\n        },\n        //{regex: /[+-]?/} //fractional\n        // definition: defining word, defined word, etc\n        {\n            regex: /((?:GENERIC)|\\:?\\:)(\\s+)(\\S+)(\\s+)(\\()/,\n            token: [\n                \"keyword\",\n                null,\n                \"def\",\n                null,\n                \"bracket\"\n            ],\n            next: \"stack\"\n        },\n        // method definition: defining word, type, defined word, etc\n        {\n            regex: /(M\\:)(\\s+)(\\S+)(\\s+)(\\S+)/,\n            token: [\n                \"keyword\",\n                null,\n                \"def\",\n                null,\n                \"tag\"\n            ]\n        },\n        // vocabulary using --> state\n        {\n            regex: /USING\\:/,\n            token: \"keyword\",\n            next: \"vocabulary\"\n        },\n        // vocabulary definition/use\n        {\n            regex: /(USE\\:|IN\\:)(\\s+)(\\S+)(?=\\s|$)/,\n            token: [\n                \"keyword\",\n                null,\n                \"tag\"\n            ]\n        },\n        // definition: a defining word, defined word\n        {\n            regex: /(\\S+\\:)(\\s+)(\\S+)(?=\\s|$)/,\n            token: [\n                \"keyword\",\n                null,\n                \"def\"\n            ]\n        },\n        // \"keywords\", incl. ; t f . [ ] { } defining words\n        {\n            regex: /(?:;|\\\\|t|f|if|loop|while|until|do|PRIVATE>|<PRIVATE|\\.|\\S*\\[|\\]|\\S*\\{|\\})(?=\\s|$)/,\n            token: \"keyword\"\n        },\n        // <constructors> and the like\n        {\n            regex: /\\S+[\\)>\\.\\*\\?]+(?=\\s|$)/,\n            token: \"builtin\"\n        },\n        {\n            regex: /[\\)><]+\\S+(?=\\s|$)/,\n            token: \"builtin\"\n        },\n        // operators\n        {\n            regex: /(?:[\\+\\-\\=\\/\\*<>])(?=\\s|$)/,\n            token: \"keyword\"\n        },\n        // any id (?)\n        {\n            regex: /\\S+/,\n            token: \"variable\"\n        },\n        {\n            regex: /\\s+|./,\n            token: null\n        }\n    ],\n    vocabulary: [\n        {\n            regex: /;/,\n            token: \"keyword\",\n            next: \"start\"\n        },\n        {\n            regex: /\\S+/,\n            token: \"tag\"\n        },\n        {\n            regex: /\\s+|./,\n            token: null\n        }\n    ],\n    string: [\n        {\n            regex: /(?:[^\\\\]|\\\\.)*?\"/,\n            token: \"string\",\n            next: \"start\"\n        },\n        {\n            regex: /.*/,\n            token: \"string\"\n        }\n    ],\n    string2: [\n        {\n            regex: /^;/,\n            token: \"keyword\",\n            next: \"start\"\n        },\n        {\n            regex: /.*/,\n            token: \"string\"\n        }\n    ],\n    string3: [\n        {\n            regex: /(?:[^\\\\]|\\\\.)*?\"\"\"/,\n            token: \"string\",\n            next: \"start\"\n        },\n        {\n            regex: /.*/,\n            token: \"string\"\n        }\n    ],\n    stack: [\n        {\n            regex: /\\)/,\n            token: \"bracket\",\n            next: \"start\"\n        },\n        {\n            regex: /--/,\n            token: \"bracket\"\n        },\n        {\n            regex: /\\S+/,\n            token: \"meta\"\n        },\n        {\n            regex: /\\s+|./,\n            token: null\n        }\n    ],\n    languageData: {\n        name: \"factor\",\n        dontIndentStates: [\n            \"start\",\n            \"vocabulary\",\n            \"string\",\n            \"string3\",\n            \"stack\"\n        ],\n        commentTokens: {\n            line: \"!\"\n        }\n    }\n});\n\n});\nparcelRegister(\"dp0dU\", function(module, exports) {\n\n$parcel$export(module.exports, \"simpleMode\", () => $9c1dc886b83c7a05$export$cda2c962bd756348);\nfunction $9c1dc886b83c7a05$export$cda2c962bd756348(states) {\n    $9c1dc886b83c7a05$var$ensureState(states, \"start\");\n    var states_ = {}, meta = states.languageData || {}, hasIndentation = false;\n    for(var state in states)if (state != meta && states.hasOwnProperty(state)) {\n        var list = states_[state] = [], orig = states[state];\n        for(var i = 0; i < orig.length; i++){\n            var data = orig[i];\n            list.push(new $9c1dc886b83c7a05$var$Rule(data, states));\n            if (data.indent || data.dedent) hasIndentation = true;\n        }\n    }\n    return {\n        name: meta.name,\n        startState: function() {\n            return {\n                state: \"start\",\n                pending: null,\n                indent: hasIndentation ? [] : null\n            };\n        },\n        copyState: function(state) {\n            var s = {\n                state: state.state,\n                pending: state.pending,\n                indent: state.indent && state.indent.slice(0)\n            };\n            if (state.stack) s.stack = state.stack.slice(0);\n            return s;\n        },\n        token: $9c1dc886b83c7a05$var$tokenFunction(states_),\n        indent: $9c1dc886b83c7a05$var$indentFunction(states_, meta),\n        mergeTokens: meta.mergeTokens,\n        languageData: meta\n    };\n}\nfunction $9c1dc886b83c7a05$var$ensureState(states, name) {\n    if (!states.hasOwnProperty(name)) throw new Error(\"Undefined state \" + name + \" in simple mode\");\n}\nfunction $9c1dc886b83c7a05$var$toRegex(val, caret) {\n    if (!val) return /(?:)/;\n    var flags = \"\";\n    if (val instanceof RegExp) {\n        if (val.ignoreCase) flags = \"i\";\n        val = val.source;\n    } else val = String(val);\n    return new RegExp((caret === false ? \"\" : \"^\") + \"(?:\" + val + \")\", flags);\n}\nfunction $9c1dc886b83c7a05$var$asToken(val) {\n    if (!val) return null;\n    if (val.apply) return val;\n    if (typeof val == \"string\") return val.replace(/\\./g, \" \");\n    var result = [];\n    for(var i = 0; i < val.length; i++)result.push(val[i] && val[i].replace(/\\./g, \" \"));\n    return result;\n}\nfunction $9c1dc886b83c7a05$var$Rule(data, states) {\n    if (data.next || data.push) $9c1dc886b83c7a05$var$ensureState(states, data.next || data.push);\n    this.regex = $9c1dc886b83c7a05$var$toRegex(data.regex);\n    this.token = $9c1dc886b83c7a05$var$asToken(data.token);\n    this.data = data;\n}\nfunction $9c1dc886b83c7a05$var$tokenFunction(states) {\n    return function(stream, state) {\n        if (state.pending) {\n            var pend = state.pending.shift();\n            if (state.pending.length == 0) state.pending = null;\n            stream.pos += pend.text.length;\n            return pend.token;\n        }\n        var curState = states[state.state];\n        for(var i = 0; i < curState.length; i++){\n            var rule = curState[i];\n            var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);\n            if (matches) {\n                if (rule.data.next) state.state = rule.data.next;\n                else if (rule.data.push) {\n                    (state.stack || (state.stack = [])).push(state.state);\n                    state.state = rule.data.push;\n                } else if (rule.data.pop && state.stack && state.stack.length) state.state = state.stack.pop();\n                if (rule.data.indent) state.indent.push(stream.indentation() + stream.indentUnit);\n                if (rule.data.dedent) state.indent.pop();\n                var token = rule.token;\n                if (token && token.apply) token = token(matches);\n                if (matches.length > 2 && rule.token && typeof rule.token != \"string\") {\n                    state.pending = [];\n                    for(var j = 2; j < matches.length; j++)if (matches[j]) state.pending.push({\n                        text: matches[j],\n                        token: rule.token[j - 1]\n                    });\n                    stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));\n                    return token[0];\n                } else if (token && token.join) return token[0];\n                else return token;\n            }\n        }\n        stream.next();\n        return null;\n    };\n}\nfunction $9c1dc886b83c7a05$var$indentFunction(states, meta) {\n    return function(state, textAfter) {\n        if (state.indent == null || meta.dontIndentStates && meta.dontIndentStates.indexOf(state.state) > -1) return null;\n        var pos = state.indent.length - 1, rules = states[state.state];\n        scan: for(;;){\n            for(var i = 0; i < rules.length; i++){\n                var rule = rules[i];\n                if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {\n                    var m = rule.regex.exec(textAfter);\n                    if (m && m[0]) {\n                        pos--;\n                        if (rule.next || rule.push) rules = states[rule.next || rule.push];\n                        textAfter = textAfter.slice(m[0].length);\n                        continue scan;\n                    }\n                }\n            }\n            break;\n        }\n        return pos < 0 ? 0 : state.indent[pos];\n    };\n}\n\n});\n\n\n\n//# sourceMappingURL=factor.3e783fc5.js.map\n","import {simpleMode} from \"./simple-mode.js\"\n\nexport const factor = simpleMode({\n    start: [\n      // comments\n      {regex: /#?!.*/, token: \"comment\"},\n      // strings \"\"\", multiline --> state\n      {regex: /\"\"\"/, token: \"string\", next: \"string3\"},\n      {regex: /(STRING:)(\\s)/, token: [\"keyword\", null], next: \"string2\"},\n      {regex: /\\S*?\"/, token: \"string\", next: \"string\"},\n      // numbers: dec, hex, unicode, bin, fractional, complex\n      {regex: /(?:0x[\\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\\-?\\d+.?\\d*)(?=\\s)/, token: \"number\"},\n      //{regex: /[+-]?/} //fractional\n      // definition: defining word, defined word, etc\n      {regex: /((?:GENERIC)|\\:?\\:)(\\s+)(\\S+)(\\s+)(\\()/, token: [\"keyword\", null, \"def\", null, \"bracket\"], next: \"stack\"},\n      // method definition: defining word, type, defined word, etc\n      {regex: /(M\\:)(\\s+)(\\S+)(\\s+)(\\S+)/, token: [\"keyword\", null, \"def\", null, \"tag\"]},\n      // vocabulary using --> state\n      {regex: /USING\\:/, token: \"keyword\", next: \"vocabulary\"},\n      // vocabulary definition/use\n      {regex: /(USE\\:|IN\\:)(\\s+)(\\S+)(?=\\s|$)/, token: [\"keyword\", null, \"tag\"]},\n      // definition: a defining word, defined word\n      {regex: /(\\S+\\:)(\\s+)(\\S+)(?=\\s|$)/, token: [\"keyword\", null, \"def\"]},\n      // \"keywords\", incl. ; t f . [ ] { } defining words\n      {regex: /(?:;|\\\\|t|f|if|loop|while|until|do|PRIVATE>|<PRIVATE|\\.|\\S*\\[|\\]|\\S*\\{|\\})(?=\\s|$)/, token: \"keyword\"},\n      // <constructors> and the like\n      {regex: /\\S+[\\)>\\.\\*\\?]+(?=\\s|$)/, token: \"builtin\"},\n      {regex: /[\\)><]+\\S+(?=\\s|$)/, token: \"builtin\"},\n      // operators\n      {regex: /(?:[\\+\\-\\=\\/\\*<>])(?=\\s|$)/, token: \"keyword\"},\n      // any id (?)\n      {regex: /\\S+/, token: \"variable\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    vocabulary: [\n      {regex: /;/, token: \"keyword\", next: \"start\"},\n      {regex: /\\S+/, token: \"tag\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    string: [\n      {regex: /(?:[^\\\\]|\\\\.)*?\"/, token: \"string\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    string2: [\n      {regex: /^;/, token: \"keyword\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    string3: [\n      {regex: /(?:[^\\\\]|\\\\.)*?\"\"\"/, token: \"string\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    stack: [\n      {regex: /\\)/, token: \"bracket\", next: \"start\"},\n      {regex: /--/, token: \"bracket\"},\n      {regex: /\\S+/, token: \"meta\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    languageData: {\n      name: \"factor\",\n      dontIndentStates: [\"start\", \"vocabulary\", \"string\", \"string3\", \"stack\"],\n      commentTokens: {line: \"!\"}\n    }\n  });\n","export function simpleMode(states) {\n  ensureState(states, \"start\");\n  var states_ = {}, meta = states.languageData || {}, hasIndentation = false;\n  for (var state in states) if (state != meta && states.hasOwnProperty(state)) {\n    var list = states_[state] = [], orig = states[state];\n    for (var i = 0; i < orig.length; i++) {\n      var data = orig[i];\n      list.push(new Rule(data, states));\n      if (data.indent || data.dedent) hasIndentation = true;\n    }\n  }\n  return {\n    name: meta.name,\n    startState: function() {\n      return {state: \"start\", pending: null, indent: hasIndentation ? [] : null};\n    },\n    copyState: function(state) {\n      var s = {state: state.state, pending: state.pending, indent: state.indent && state.indent.slice(0)};\n      if (state.stack)\n        s.stack = state.stack.slice(0);\n      return s;\n    },\n    token: tokenFunction(states_),\n    indent: indentFunction(states_, meta),\n    mergeTokens: meta.mergeTokens,\n    languageData: meta\n  }\n};\n\nfunction ensureState(states, name) {\n  if (!states.hasOwnProperty(name))\n    throw new Error(\"Undefined state \" + name + \" in simple mode\");\n}\n\nfunction toRegex(val, caret) {\n  if (!val) return /(?:)/;\n  var flags = \"\";\n  if (val instanceof RegExp) {\n    if (val.ignoreCase) flags = \"i\";\n    val = val.source;\n  } else {\n    val = String(val);\n  }\n  return new RegExp((caret === false ? \"\" : \"^\") + \"(?:\" + val + \")\", flags);\n}\n\nfunction asToken(val) {\n  if (!val) return null;\n  if (val.apply) return val\n  if (typeof val == \"string\") return val.replace(/\\./g, \" \");\n  var result = [];\n  for (var i = 0; i < val.length; i++)\n    result.push(val[i] && val[i].replace(/\\./g, \" \"));\n  return result;\n}\n\nfunction Rule(data, states) {\n  if (data.next || data.push) ensureState(states, data.next || data.push);\n  this.regex = toRegex(data.regex);\n  this.token = asToken(data.token);\n  this.data = data;\n}\n\nfunction tokenFunction(states) {\n  return function(stream, state) {\n    if (state.pending) {\n      var pend = state.pending.shift();\n      if (state.pending.length == 0) state.pending = null;\n      stream.pos += pend.text.length;\n      return pend.token;\n    }\n\n    var curState = states[state.state];\n    for (var i = 0; i < curState.length; i++) {\n      var rule = curState[i];\n      var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);\n      if (matches) {\n        if (rule.data.next) {\n          state.state = rule.data.next;\n        } else if (rule.data.push) {\n          (state.stack || (state.stack = [])).push(state.state);\n          state.state = rule.data.push;\n        } else if (rule.data.pop && state.stack && state.stack.length) {\n          state.state = state.stack.pop();\n        }\n\n        if (rule.data.indent)\n          state.indent.push(stream.indentation() + stream.indentUnit);\n        if (rule.data.dedent)\n          state.indent.pop();\n        var token = rule.token\n        if (token && token.apply) token = token(matches)\n        if (matches.length > 2 && rule.token && typeof rule.token != \"string\") {\n          state.pending = [];\n          for (var j = 2; j < matches.length; j++)\n            if (matches[j])\n              state.pending.push({text: matches[j], token: rule.token[j - 1]});\n          stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));\n          return token[0];\n        } else if (token && token.join) {\n          return token[0];\n        } else {\n          return token;\n        }\n      }\n    }\n    stream.next();\n    return null;\n  };\n}\n\nfunction indentFunction(states, meta) {\n  return function(state, textAfter) {\n    if (state.indent == null || meta.dontIndentStates && meta.dontIndentStates.indexOf(state.state) > -1)\n      return null\n\n    var pos = state.indent.length - 1, rules = states[state.state];\n    scan: for (;;) {\n      for (var i = 0; i < rules.length; i++) {\n        var rule = rules[i];\n        if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {\n          var m = rule.regex.exec(textAfter);\n          if (m && m[0]) {\n            pos--;\n            if (rule.next || rule.push) rules = states[rule.next || rule.push];\n            textAfter = textAfter.slice(m[0].length);\n            continue scan;\n          }\n        }\n      }\n      break;\n    }\n    return pos < 0 ? 0 : state.indent[pos];\n  };\n}\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","parcelRegister","register","module","exports","$52a2ef7c2859c345$export$4564c084226129f7","$dp0dU","simpleMode","start","regex","token","next","vocabulary","string","string2","string3","stack","languageData","name","dontIndentStates","commentTokens","line","$9c1dc886b83c7a05$export$cda2c962bd756348","states","$9c1dc886b83c7a05$var$ensureState","meta","states_","hasIndentation","state","hasOwnProperty","list","orig","i","length","data","push","$9c1dc886b83c7a05$var$Rule","indent","dedent","startState","pending","copyState","slice","stream","pend","shift","pos","text","curState","rule","matches","sol","match","pop","indentation","indentUnit","apply","j","backUp","join","textAfter","indexOf","rules","scan","dedentIfLineStart","m","exec","mergeTokens","Error","$9c1dc886b83c7a05$var$toRegex","val","caret","flags","RegExp","ignoreCase","source","String","$9c1dc886b83c7a05$var$asToken","replace","result"],"version":3,"file":"factor.3e783fc5.js.map"}