{"mappings":"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","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/mllike.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"7GSvW\", function(module, exports) {\n\n$parcel$export(module.exports, \"oCaml\", () => $5996be066ff49f25$export$7bdb6f55ebff4976);\n$parcel$export(module.exports, \"fSharp\", () => $5996be066ff49f25$export$7b4d21ece4cd14cf);\n$parcel$export(module.exports, \"sml\", () => $5996be066ff49f25$export$f8c6eafe4503ee18);\nfunction $5996be066ff49f25$var$mlLike(parserConfig) {\n    var words = {\n        'as': 'keyword',\n        'do': 'keyword',\n        'else': 'keyword',\n        'end': 'keyword',\n        'exception': 'keyword',\n        'fun': 'keyword',\n        'functor': 'keyword',\n        'if': 'keyword',\n        'in': 'keyword',\n        'include': 'keyword',\n        'let': 'keyword',\n        'of': 'keyword',\n        'open': 'keyword',\n        'rec': 'keyword',\n        'struct': 'keyword',\n        'then': 'keyword',\n        'type': 'keyword',\n        'val': 'keyword',\n        'while': 'keyword',\n        'with': 'keyword'\n    };\n    var extraWords = parserConfig.extraWords || {};\n    for(var prop in extraWords)if (extraWords.hasOwnProperty(prop)) words[prop] = parserConfig.extraWords[prop];\n    var hintWords = [];\n    for(var k in words)hintWords.push(k);\n    function tokenBase(stream, state) {\n        var ch = stream.next();\n        if (ch === '\"') {\n            state.tokenize = tokenString;\n            return state.tokenize(stream, state);\n        }\n        if (ch === '{') {\n            if (stream.eat('|')) {\n                state.longString = true;\n                state.tokenize = tokenLongString;\n                return state.tokenize(stream, state);\n            }\n        }\n        if (ch === '(') {\n            if (stream.match(/^\\*(?!\\))/)) {\n                state.commentLevel++;\n                state.tokenize = tokenComment;\n                return state.tokenize(stream, state);\n            }\n        }\n        if (ch === '~' || ch === '?') {\n            stream.eatWhile(/\\w/);\n            return 'variableName.special';\n        }\n        if (ch === '`') {\n            stream.eatWhile(/\\w/);\n            return 'quote';\n        }\n        if (ch === '/' && parserConfig.slashComments && stream.eat('/')) {\n            stream.skipToEnd();\n            return 'comment';\n        }\n        if (/\\d/.test(ch)) {\n            if (ch === '0' && stream.eat(/[bB]/)) stream.eatWhile(/[01]/);\n            if (ch === '0' && stream.eat(/[xX]/)) stream.eatWhile(/[0-9a-fA-F]/);\n            if (ch === '0' && stream.eat(/[oO]/)) stream.eatWhile(/[0-7]/);\n            else {\n                stream.eatWhile(/[\\d_]/);\n                if (stream.eat('.')) stream.eatWhile(/[\\d]/);\n                if (stream.eat(/[eE]/)) stream.eatWhile(/[\\d\\-+]/);\n            }\n            return 'number';\n        }\n        if (/[+\\-*&%=<>!?|@\\.~:]/.test(ch)) return 'operator';\n        if (/[\\w\\xa1-\\uffff]/.test(ch)) {\n            stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n            var cur = stream.current();\n            return words.hasOwnProperty(cur) ? words[cur] : 'variable';\n        }\n        return null;\n    }\n    function tokenString(stream, state) {\n        var next, end = false, escaped = false;\n        while((next = stream.next()) != null){\n            if (next === '\"' && !escaped) {\n                end = true;\n                break;\n            }\n            escaped = !escaped && next === '\\\\';\n        }\n        if (end && !escaped) state.tokenize = tokenBase;\n        return 'string';\n    }\n    function tokenComment(stream, state) {\n        var prev, next;\n        while(state.commentLevel > 0 && (next = stream.next()) != null){\n            if (prev === '(' && next === '*') state.commentLevel++;\n            if (prev === '*' && next === ')') state.commentLevel--;\n            prev = next;\n        }\n        if (state.commentLevel <= 0) state.tokenize = tokenBase;\n        return 'comment';\n    }\n    function tokenLongString(stream, state) {\n        var prev, next;\n        while(state.longString && (next = stream.next()) != null){\n            if (prev === '|' && next === '}') state.longString = false;\n            prev = next;\n        }\n        if (!state.longString) state.tokenize = tokenBase;\n        return 'string';\n    }\n    return {\n        startState: function() {\n            return {\n                tokenize: tokenBase,\n                commentLevel: 0,\n                longString: false\n            };\n        },\n        token: function(stream, state) {\n            if (stream.eatSpace()) return null;\n            return state.tokenize(stream, state);\n        },\n        languageData: {\n            autocomplete: hintWords,\n            commentTokens: {\n                line: parserConfig.slashComments ? \"//\" : undefined,\n                block: {\n                    open: \"(*\",\n                    close: \"*)\"\n                }\n            }\n        }\n    };\n}\nconst $5996be066ff49f25$export$7bdb6f55ebff4976 = $5996be066ff49f25$var$mlLike({\n    name: \"ocaml\",\n    extraWords: {\n        'and': 'keyword',\n        'assert': 'keyword',\n        'begin': 'keyword',\n        'class': 'keyword',\n        'constraint': 'keyword',\n        'done': 'keyword',\n        'downto': 'keyword',\n        'external': 'keyword',\n        'function': 'keyword',\n        'initializer': 'keyword',\n        'lazy': 'keyword',\n        'match': 'keyword',\n        'method': 'keyword',\n        'module': 'keyword',\n        'mutable': 'keyword',\n        'new': 'keyword',\n        'nonrec': 'keyword',\n        'object': 'keyword',\n        'private': 'keyword',\n        'sig': 'keyword',\n        'to': 'keyword',\n        'try': 'keyword',\n        'value': 'keyword',\n        'virtual': 'keyword',\n        'when': 'keyword',\n        // builtins\n        'raise': 'builtin',\n        'failwith': 'builtin',\n        'true': 'builtin',\n        'false': 'builtin',\n        // Pervasives builtins\n        'asr': 'builtin',\n        'land': 'builtin',\n        'lor': 'builtin',\n        'lsl': 'builtin',\n        'lsr': 'builtin',\n        'lxor': 'builtin',\n        'mod': 'builtin',\n        'or': 'builtin',\n        // More Pervasives\n        'raise_notrace': 'builtin',\n        'trace': 'builtin',\n        'exit': 'builtin',\n        'print_string': 'builtin',\n        'print_endline': 'builtin',\n        'int': 'type',\n        'float': 'type',\n        'bool': 'type',\n        'char': 'type',\n        'string': 'type',\n        'unit': 'type',\n        // Modules\n        'List': 'builtin'\n    }\n});\nconst $5996be066ff49f25$export$7b4d21ece4cd14cf = $5996be066ff49f25$var$mlLike({\n    name: \"fsharp\",\n    extraWords: {\n        'abstract': 'keyword',\n        'assert': 'keyword',\n        'base': 'keyword',\n        'begin': 'keyword',\n        'class': 'keyword',\n        'default': 'keyword',\n        'delegate': 'keyword',\n        'do!': 'keyword',\n        'done': 'keyword',\n        'downcast': 'keyword',\n        'downto': 'keyword',\n        'elif': 'keyword',\n        'extern': 'keyword',\n        'finally': 'keyword',\n        'for': 'keyword',\n        'function': 'keyword',\n        'global': 'keyword',\n        'inherit': 'keyword',\n        'inline': 'keyword',\n        'interface': 'keyword',\n        'internal': 'keyword',\n        'lazy': 'keyword',\n        'let!': 'keyword',\n        'match': 'keyword',\n        'member': 'keyword',\n        'module': 'keyword',\n        'mutable': 'keyword',\n        'namespace': 'keyword',\n        'new': 'keyword',\n        'null': 'keyword',\n        'override': 'keyword',\n        'private': 'keyword',\n        'public': 'keyword',\n        'return!': 'keyword',\n        'return': 'keyword',\n        'select': 'keyword',\n        'static': 'keyword',\n        'to': 'keyword',\n        'try': 'keyword',\n        'upcast': 'keyword',\n        'use!': 'keyword',\n        'use': 'keyword',\n        'void': 'keyword',\n        'when': 'keyword',\n        'yield!': 'keyword',\n        'yield': 'keyword',\n        // Reserved words\n        'atomic': 'keyword',\n        'break': 'keyword',\n        'checked': 'keyword',\n        'component': 'keyword',\n        'const': 'keyword',\n        'constraint': 'keyword',\n        'constructor': 'keyword',\n        'continue': 'keyword',\n        'eager': 'keyword',\n        'event': 'keyword',\n        'external': 'keyword',\n        'fixed': 'keyword',\n        'method': 'keyword',\n        'mixin': 'keyword',\n        'object': 'keyword',\n        'parallel': 'keyword',\n        'process': 'keyword',\n        'protected': 'keyword',\n        'pure': 'keyword',\n        'sealed': 'keyword',\n        'tailcall': 'keyword',\n        'trait': 'keyword',\n        'virtual': 'keyword',\n        'volatile': 'keyword',\n        // builtins\n        'List': 'builtin',\n        'Seq': 'builtin',\n        'Map': 'builtin',\n        'Set': 'builtin',\n        'Option': 'builtin',\n        'int': 'builtin',\n        'string': 'builtin',\n        'not': 'builtin',\n        'true': 'builtin',\n        'false': 'builtin',\n        'raise': 'builtin',\n        'failwith': 'builtin'\n    },\n    slashComments: true\n});\nconst $5996be066ff49f25$export$f8c6eafe4503ee18 = $5996be066ff49f25$var$mlLike({\n    name: \"sml\",\n    extraWords: {\n        'abstype': 'keyword',\n        'and': 'keyword',\n        'andalso': 'keyword',\n        'case': 'keyword',\n        'datatype': 'keyword',\n        'fn': 'keyword',\n        'handle': 'keyword',\n        'infix': 'keyword',\n        'infixr': 'keyword',\n        'local': 'keyword',\n        'nonfix': 'keyword',\n        'op': 'keyword',\n        'orelse': 'keyword',\n        'raise': 'keyword',\n        'withtype': 'keyword',\n        'eqtype': 'keyword',\n        'sharing': 'keyword',\n        'sig': 'keyword',\n        'signature': 'keyword',\n        'structure': 'keyword',\n        'where': 'keyword',\n        'true': 'keyword',\n        'false': 'keyword',\n        // types\n        'int': 'builtin',\n        'real': 'builtin',\n        'string': 'builtin',\n        'char': 'builtin',\n        'bool': 'builtin'\n    },\n    slashComments: true\n});\n\n});\n\n\n//# sourceMappingURL=mllike.d465ae4f.js.map\n","function mlLike(parserConfig) {\n  var words = {\n    'as': 'keyword',\n    'do': 'keyword',\n    'else': 'keyword',\n    'end': 'keyword',\n    'exception': 'keyword',\n    'fun': 'keyword',\n    'functor': 'keyword',\n    'if': 'keyword',\n    'in': 'keyword',\n    'include': 'keyword',\n    'let': 'keyword',\n    'of': 'keyword',\n    'open': 'keyword',\n    'rec': 'keyword',\n    'struct': 'keyword',\n    'then': 'keyword',\n    'type': 'keyword',\n    'val': 'keyword',\n    'while': 'keyword',\n    'with': 'keyword'\n  };\n\n  var extraWords = parserConfig.extraWords || {};\n  for (var prop in extraWords) {\n    if (extraWords.hasOwnProperty(prop)) {\n      words[prop] = parserConfig.extraWords[prop];\n    }\n  }\n  var hintWords = [];\n  for (var k in words) { hintWords.push(k); }\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n\n    if (ch === '\"') {\n      state.tokenize = tokenString;\n      return state.tokenize(stream, state);\n    }\n    if (ch === '{') {\n      if (stream.eat('|')) {\n        state.longString = true;\n        state.tokenize = tokenLongString;\n        return state.tokenize(stream, state);\n      }\n    }\n    if (ch === '(') {\n      if (stream.match(/^\\*(?!\\))/)) {\n        state.commentLevel++;\n        state.tokenize = tokenComment;\n        return state.tokenize(stream, state);\n      }\n    }\n    if (ch === '~' || ch === '?') {\n      stream.eatWhile(/\\w/);\n      return 'variableName.special';\n    }\n    if (ch === '`') {\n      stream.eatWhile(/\\w/);\n      return 'quote';\n    }\n    if (ch === '/' && parserConfig.slashComments && stream.eat('/')) {\n      stream.skipToEnd();\n      return 'comment';\n    }\n    if (/\\d/.test(ch)) {\n      if (ch === '0' && stream.eat(/[bB]/)) {\n        stream.eatWhile(/[01]/);\n      } if (ch === '0' && stream.eat(/[xX]/)) {\n        stream.eatWhile(/[0-9a-fA-F]/)\n      } if (ch === '0' && stream.eat(/[oO]/)) {\n        stream.eatWhile(/[0-7]/);\n      } else {\n        stream.eatWhile(/[\\d_]/);\n        if (stream.eat('.')) {\n          stream.eatWhile(/[\\d]/);\n        }\n        if (stream.eat(/[eE]/)) {\n          stream.eatWhile(/[\\d\\-+]/);\n        }\n      }\n      return 'number';\n    }\n    if ( /[+\\-*&%=<>!?|@\\.~:]/.test(ch)) {\n      return 'operator';\n    }\n    if (/[\\w\\xa1-\\uffff]/.test(ch)) {\n      stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n      var cur = stream.current();\n      return words.hasOwnProperty(cur) ? words[cur] : 'variable';\n    }\n    return null\n  }\n\n  function tokenString(stream, state) {\n    var next, end = false, escaped = false;\n    while ((next = stream.next()) != null) {\n      if (next === '\"' && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next === '\\\\';\n    }\n    if (end && !escaped) {\n      state.tokenize = tokenBase;\n    }\n    return 'string';\n  };\n\n  function tokenComment(stream, state) {\n    var prev, next;\n    while(state.commentLevel > 0 && (next = stream.next()) != null) {\n      if (prev === '(' && next === '*') state.commentLevel++;\n      if (prev === '*' && next === ')') state.commentLevel--;\n      prev = next;\n    }\n    if (state.commentLevel <= 0) {\n      state.tokenize = tokenBase;\n    }\n    return 'comment';\n  }\n\n  function tokenLongString(stream, state) {\n    var prev, next;\n    while (state.longString && (next = stream.next()) != null) {\n      if (prev === '|' && next === '}') state.longString = false;\n      prev = next;\n    }\n    if (!state.longString) {\n      state.tokenize = tokenBase;\n    }\n    return 'string';\n  }\n\n  return {\n    startState: function() {return {tokenize: tokenBase, commentLevel: 0, longString: false};},\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      return state.tokenize(stream, state);\n    },\n\n    languageData: {\n      autocomplete: hintWords,\n      commentTokens: {\n        line: parserConfig.slashComments ? \"//\" : undefined,\n        block: {open: \"(*\", close: \"*)\"}\n      }\n    }\n  };\n};\n\nexport const oCaml = mlLike({\n  name: \"ocaml\",\n  extraWords: {\n    'and': 'keyword',\n    'assert': 'keyword',\n    'begin': 'keyword',\n    'class': 'keyword',\n    'constraint': 'keyword',\n    'done': 'keyword',\n    'downto': 'keyword',\n    'external': 'keyword',\n    'function': 'keyword',\n    'initializer': 'keyword',\n    'lazy': 'keyword',\n    'match': 'keyword',\n    'method': 'keyword',\n    'module': 'keyword',\n    'mutable': 'keyword',\n    'new': 'keyword',\n    'nonrec': 'keyword',\n    'object': 'keyword',\n    'private': 'keyword',\n    'sig': 'keyword',\n    'to': 'keyword',\n    'try': 'keyword',\n    'value': 'keyword',\n    'virtual': 'keyword',\n    'when': 'keyword',\n\n    // builtins\n    'raise': 'builtin',\n    'failwith': 'builtin',\n    'true': 'builtin',\n    'false': 'builtin',\n\n    // Pervasives builtins\n    'asr': 'builtin',\n    'land': 'builtin',\n    'lor': 'builtin',\n    'lsl': 'builtin',\n    'lsr': 'builtin',\n    'lxor': 'builtin',\n    'mod': 'builtin',\n    'or': 'builtin',\n\n    // More Pervasives\n    'raise_notrace': 'builtin',\n    'trace': 'builtin',\n    'exit': 'builtin',\n    'print_string': 'builtin',\n    'print_endline': 'builtin',\n\n     'int': 'type',\n     'float': 'type',\n     'bool': 'type',\n     'char': 'type',\n     'string': 'type',\n     'unit': 'type',\n\n     // Modules\n     'List': 'builtin'\n  }\n});\n\nexport const fSharp = mlLike({\n  name: \"fsharp\",\n  extraWords: {\n    'abstract': 'keyword',\n    'assert': 'keyword',\n    'base': 'keyword',\n    'begin': 'keyword',\n    'class': 'keyword',\n    'default': 'keyword',\n    'delegate': 'keyword',\n    'do!': 'keyword',\n    'done': 'keyword',\n    'downcast': 'keyword',\n    'downto': 'keyword',\n    'elif': 'keyword',\n    'extern': 'keyword',\n    'finally': 'keyword',\n    'for': 'keyword',\n    'function': 'keyword',\n    'global': 'keyword',\n    'inherit': 'keyword',\n    'inline': 'keyword',\n    'interface': 'keyword',\n    'internal': 'keyword',\n    'lazy': 'keyword',\n    'let!': 'keyword',\n    'match': 'keyword',\n    'member': 'keyword',\n    'module': 'keyword',\n    'mutable': 'keyword',\n    'namespace': 'keyword',\n    'new': 'keyword',\n    'null': 'keyword',\n    'override': 'keyword',\n    'private': 'keyword',\n    'public': 'keyword',\n    'return!': 'keyword',\n    'return': 'keyword',\n    'select': 'keyword',\n    'static': 'keyword',\n    'to': 'keyword',\n    'try': 'keyword',\n    'upcast': 'keyword',\n    'use!': 'keyword',\n    'use': 'keyword',\n    'void': 'keyword',\n    'when': 'keyword',\n    'yield!': 'keyword',\n    'yield': 'keyword',\n\n    // Reserved words\n    'atomic': 'keyword',\n    'break': 'keyword',\n    'checked': 'keyword',\n    'component': 'keyword',\n    'const': 'keyword',\n    'constraint': 'keyword',\n    'constructor': 'keyword',\n    'continue': 'keyword',\n    'eager': 'keyword',\n    'event': 'keyword',\n    'external': 'keyword',\n    'fixed': 'keyword',\n    'method': 'keyword',\n    'mixin': 'keyword',\n    'object': 'keyword',\n    'parallel': 'keyword',\n    'process': 'keyword',\n    'protected': 'keyword',\n    'pure': 'keyword',\n    'sealed': 'keyword',\n    'tailcall': 'keyword',\n    'trait': 'keyword',\n    'virtual': 'keyword',\n    'volatile': 'keyword',\n\n    // builtins\n    'List': 'builtin',\n    'Seq': 'builtin',\n    'Map': 'builtin',\n    'Set': 'builtin',\n    'Option': 'builtin',\n    'int': 'builtin',\n    'string': 'builtin',\n    'not': 'builtin',\n    'true': 'builtin',\n    'false': 'builtin',\n\n    'raise': 'builtin',\n    'failwith': 'builtin'\n  },\n  slashComments: true\n});\n\nexport const sml = mlLike({\n  name: \"sml\",\n  extraWords: {\n    'abstype': 'keyword',\n    'and': 'keyword',\n    'andalso': 'keyword',\n    'case': 'keyword',\n    'datatype': 'keyword',\n    'fn': 'keyword',\n    'handle': 'keyword',\n    'infix': 'keyword',\n    'infixr': 'keyword',\n    'local': 'keyword',\n    'nonfix': 'keyword',\n    'op': 'keyword',\n    'orelse': 'keyword',\n    'raise': 'keyword',\n    'withtype': 'keyword',\n    'eqtype': 'keyword',\n    'sharing': 'keyword',\n    'sig': 'keyword',\n    'signature': 'keyword',\n    'structure': 'keyword',\n    'where': 'keyword',\n    'true': 'keyword',\n    'false': 'keyword',\n\n    // types\n    'int': 'builtin',\n    'real': 'builtin',\n    'string': 'builtin',\n    'char': 'builtin',\n    'bool': 'builtin'\n  },\n  slashComments: true\n});\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRegister","parcelRequire","$parcel$global","globalThis","register","module","exports","$5996be066ff49f25$var$mlLike","parserConfig","words","extraWords","prop","hasOwnProperty","hintWords","k","push","tokenBase","stream","state","ch","next","tokenize","tokenString","eat","longString","tokenLongString","match","commentLevel","tokenComment","eatWhile","slashComments","skipToEnd","test","cur","current","end","escaped","prev","startState","token","eatSpace","languageData","autocomplete","commentTokens","line","undefined","block","open","close","$5996be066ff49f25$export$7bdb6f55ebff4976","$5996be066ff49f25$export$7b4d21ece4cd14cf","$5996be066ff49f25$export$f8c6eafe4503ee18","name"],"version":3,"file":"mllike.d465ae4f.js.map"}