{"mappings":"A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,O,C,I,I,E,I,K,E,W,C,E,a,C,C,GCAA,IAAI,EAAe,4CACf,EAAiB,uBACjB,EAAmB,oBAkDvB,SAAS,EAAU,CAAM,CAAE,CAAK,EAC9B,IApBiB,EAoBb,EAAK,EAAO,IAAI,GAQpB,MAPI,AAAM,KAAN,EACF,EAAM,QAAQ,CA9CT,SAAS,CAAM,CAAE,CAAK,EAE3B,IADA,IAAqB,EAAjB,EAAU,CAAA,EAEZ,AAD+B,MAAzB,CAAA,EAAO,EAAO,IAAI,EAAA,GACpB,CAAA,GA2CuB,GA3CL,CAAA,GACtB,EAAU,CAAC,GAAW,AAAQ,MAAR,EAIxB,OADI,AAAC,GAAS,CAAA,EAAM,QAAQ,CAAG,CAA/B,EACO,QACT,EAsCS,EAAe,IAAI,CAAC,GAC3B,EAAM,QAAQ,CAnCT,SAAS,CAAM,CAAE,CAAK,EAO3B,MANI,AAAY,KAkCe,EAjC7B,EAAO,GAAG,CAAC,MACJ,AAAY,KAgCU,GA/B7B,EAAO,GAAG,CAAC,MAEb,EAAM,QAAQ,CAAG,EACV,UACT,EA4BS,EAAa,IAAI,CAAC,KAzBV,EA0BY,EAA3B,EAAM,QAAQ,CAzBT,SAAS,CAAM,CAAE,CAAK,EAE3B,IADA,IA/Bc,EA+BV,EAAO,EACH,AAAA,CAAA,EAAK,EAAO,IAAI,EAAA,GAAO,AAA0B,MAA1B,EAAG,KAAK,CAAC,IACtC,GAAQ,EAAO,IAAI,SAIrB,CADA,EAAM,QAAQ,CAAG,EACb,EAAiB,IAAI,CAAC,IACjB,WArCJ,WADS,EAuCI,GAtCI,QAAQ,KAAO,EAuC5B,SACA,AAAiB,KAAjB,EAAO,IAAI,GACX,eAEA,QACX,GAYO,EAAO,QAAQ,EAAI,EAAa,EAAM,QAAQ,CAAC,EAAQ,GAAS,IACzE,CAEO,IAAM,EAAO,CAClB,KAAM,OAEN,WAAY,WACV,MAAO,CACL,SAAU,CACZ,CACF,EAEA,MAAO,SAAS,CAAM,CAAE,CAAK,SAC3B,AAAI,EAAO,QAAQ,GAAW,KACvB,EAAM,QAAQ,CAAC,EAAQ,EAChC,CACF,C","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/solr.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"6DYJn\", function(module, exports) {\n\n$parcel$export(module.exports, \"solr\", () => $4d657e81cbb302eb$export$a66c2ed64e5fb441);\nvar $4d657e81cbb302eb$var$isStringChar = /[^\\s\\|\\!\\+\\-\\*\\?\\~\\^\\&\\:\\(\\)\\[\\]\\{\\}\\\"\\\\]/;\nvar $4d657e81cbb302eb$var$isOperatorChar = /[\\|\\!\\+\\-\\*\\?\\~\\^\\&]/;\nvar $4d657e81cbb302eb$var$isOperatorString = /^(OR|AND|NOT|TO)$/;\nfunction $4d657e81cbb302eb$var$isNumber(word) {\n    return parseFloat(word).toString() === word;\n}\nfunction $4d657e81cbb302eb$var$tokenString(quote) {\n    return function(stream, state) {\n        var escaped = false, next;\n        while((next = stream.next()) != null){\n            if (next == quote && !escaped) break;\n            escaped = !escaped && next == \"\\\\\";\n        }\n        if (!escaped) state.tokenize = $4d657e81cbb302eb$var$tokenBase;\n        return \"string\";\n    };\n}\nfunction $4d657e81cbb302eb$var$tokenOperator(operator) {\n    return function(stream, state) {\n        if (operator == \"|\") stream.eat(/\\|/);\n        else if (operator == \"&\") stream.eat(/\\&/);\n        state.tokenize = $4d657e81cbb302eb$var$tokenBase;\n        return \"operator\";\n    };\n}\nfunction $4d657e81cbb302eb$var$tokenWord(ch) {\n    return function(stream, state) {\n        var word = ch;\n        while((ch = stream.peek()) && ch.match($4d657e81cbb302eb$var$isStringChar) != null)word += stream.next();\n        state.tokenize = $4d657e81cbb302eb$var$tokenBase;\n        if ($4d657e81cbb302eb$var$isOperatorString.test(word)) return \"operator\";\n        else if ($4d657e81cbb302eb$var$isNumber(word)) return \"number\";\n        else if (stream.peek() == \":\") return \"propertyName\";\n        else return \"string\";\n    };\n}\nfunction $4d657e81cbb302eb$var$tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"') state.tokenize = $4d657e81cbb302eb$var$tokenString(ch);\n    else if ($4d657e81cbb302eb$var$isOperatorChar.test(ch)) state.tokenize = $4d657e81cbb302eb$var$tokenOperator(ch);\n    else if ($4d657e81cbb302eb$var$isStringChar.test(ch)) state.tokenize = $4d657e81cbb302eb$var$tokenWord(ch);\n    return state.tokenize != $4d657e81cbb302eb$var$tokenBase ? state.tokenize(stream, state) : null;\n}\nconst $4d657e81cbb302eb$export$a66c2ed64e5fb441 = {\n    name: \"solr\",\n    startState: function() {\n        return {\n            tokenize: $4d657e81cbb302eb$var$tokenBase\n        };\n    },\n    token: function(stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n    }\n};\n\n});\n\n\n//# sourceMappingURL=solr.63ad5ac1.js.map\n","var isStringChar = /[^\\s\\|\\!\\+\\-\\*\\?\\~\\^\\&\\:\\(\\)\\[\\]\\{\\}\\\"\\\\]/;\nvar isOperatorChar = /[\\|\\!\\+\\-\\*\\?\\~\\^\\&]/;\nvar isOperatorString = /^(OR|AND|NOT|TO)$/;\n\nfunction isNumber(word) {\n  return parseFloat(word).toString() === word;\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) break;\n      escaped = !escaped && next == \"\\\\\";\n    }\n\n    if (!escaped) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\n\nfunction tokenOperator(operator) {\n  return function(stream, state) {\n    if (operator == \"|\")\n      stream.eat(/\\|/);\n    else if (operator == \"&\")\n      stream.eat(/\\&/);\n\n    state.tokenize = tokenBase;\n    return \"operator\";\n  };\n}\n\nfunction tokenWord(ch) {\n  return function(stream, state) {\n    var word = ch;\n    while ((ch = stream.peek()) && ch.match(isStringChar) != null) {\n      word += stream.next();\n    }\n\n    state.tokenize = tokenBase;\n    if (isOperatorString.test(word))\n      return \"operator\";\n    else if (isNumber(word))\n      return \"number\";\n    else if (stream.peek() == \":\")\n      return \"propertyName\";\n    else\n      return \"string\";\n  };\n}\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == '\"')\n    state.tokenize = tokenString(ch);\n  else if (isOperatorChar.test(ch))\n    state.tokenize = tokenOperator(ch);\n  else if (isStringChar.test(ch))\n    state.tokenize = tokenWord(ch);\n\n  return (state.tokenize != tokenBase) ? state.tokenize(stream, state) : null;\n}\n\nexport const solr = {\n  name: \"solr\",\n\n  startState: function() {\n    return {\n      tokenize: tokenBase\n    };\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  }\n};\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","Object","defineProperty","get","$4d657e81cbb302eb$export$a66c2ed64e5fb441","set","s","enumerable","configurable","$4d657e81cbb302eb$var$isStringChar","$4d657e81cbb302eb$var$isOperatorChar","$4d657e81cbb302eb$var$isOperatorString","$4d657e81cbb302eb$var$tokenBase","stream","state","ch","next","tokenize","escaped","test","operator","eat","word","peek","match","parseFloat","toString","name","startState","token","eatSpace"],"version":3,"file":"solr.63ad5ac1.js.map"}