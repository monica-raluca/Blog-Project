{"mappings":"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","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/velocity.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"clS25\", function(module, exports) {\n\n$parcel$export(module.exports, \"velocity\", () => $8fe15bfb4b3835bf$export$b9fe5d314b12b4ca);\nfunction $8fe15bfb4b3835bf$var$parseWords(str) {\n    var obj = {}, words = str.split(\" \");\n    for(var i = 0; i < words.length; ++i)obj[words[i]] = true;\n    return obj;\n}\nvar $8fe15bfb4b3835bf$var$keywords = $8fe15bfb4b3835bf$var$parseWords(\"#end #else #break #stop #[[ #]] #{end} #{else} #{break} #{stop}\");\nvar $8fe15bfb4b3835bf$var$functions = $8fe15bfb4b3835bf$var$parseWords(\"#if #elseif #foreach #set #include #parse #macro #define #evaluate #{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}\");\nvar $8fe15bfb4b3835bf$var$specials = $8fe15bfb4b3835bf$var$parseWords(\"$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent\");\nvar $8fe15bfb4b3835bf$var$isOperatorChar = /[+\\-*&%=<>!?:\\/|]/;\nfunction $8fe15bfb4b3835bf$var$chain(stream, state, f) {\n    state.tokenize = f;\n    return f(stream, state);\n}\nfunction $8fe15bfb4b3835bf$var$tokenBase(stream, state) {\n    var beforeParams = state.beforeParams;\n    state.beforeParams = false;\n    var ch = stream.next();\n    // start of unparsed string?\n    if (ch == \"'\" && !state.inString && state.inParams) {\n        state.lastTokenWasBuiltin = false;\n        return $8fe15bfb4b3835bf$var$chain(stream, state, $8fe15bfb4b3835bf$var$tokenString(ch));\n    } else if (ch == '\"') {\n        state.lastTokenWasBuiltin = false;\n        if (state.inString) {\n            state.inString = false;\n            return \"string\";\n        } else if (state.inParams) return $8fe15bfb4b3835bf$var$chain(stream, state, $8fe15bfb4b3835bf$var$tokenString(ch));\n    } else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n        if (ch == \"(\" && beforeParams) state.inParams = true;\n        else if (ch == \")\") {\n            state.inParams = false;\n            state.lastTokenWasBuiltin = true;\n        }\n        return null;\n    } else if (/\\d/.test(ch)) {\n        state.lastTokenWasBuiltin = false;\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n    } else if (ch == \"#\" && stream.eat(\"*\")) {\n        state.lastTokenWasBuiltin = false;\n        return $8fe15bfb4b3835bf$var$chain(stream, state, $8fe15bfb4b3835bf$var$tokenComment);\n    } else if (ch == \"#\" && stream.match(/ *\\[ *\\[/)) {\n        state.lastTokenWasBuiltin = false;\n        return $8fe15bfb4b3835bf$var$chain(stream, state, $8fe15bfb4b3835bf$var$tokenUnparsed);\n    } else if (ch == \"#\" && stream.eat(\"#\")) {\n        state.lastTokenWasBuiltin = false;\n        stream.skipToEnd();\n        return \"comment\";\n    } else if (ch == \"$\") {\n        stream.eat(\"!\");\n        stream.eatWhile(/[\\w\\d\\$_\\.{}-]/);\n        // is it one of the specials?\n        if ($8fe15bfb4b3835bf$var$specials && $8fe15bfb4b3835bf$var$specials.propertyIsEnumerable(stream.current())) return \"keyword\";\n        else {\n            state.lastTokenWasBuiltin = true;\n            state.beforeParams = true;\n            return \"builtin\";\n        }\n    } else if ($8fe15bfb4b3835bf$var$isOperatorChar.test(ch)) {\n        state.lastTokenWasBuiltin = false;\n        stream.eatWhile($8fe15bfb4b3835bf$var$isOperatorChar);\n        return \"operator\";\n    } else {\n        // get the whole word\n        stream.eatWhile(/[\\w\\$_{}@]/);\n        var word = stream.current();\n        // is it one of the listed keywords?\n        if ($8fe15bfb4b3835bf$var$keywords && $8fe15bfb4b3835bf$var$keywords.propertyIsEnumerable(word)) return \"keyword\";\n        // is it one of the listed functions?\n        if ($8fe15bfb4b3835bf$var$functions && $8fe15bfb4b3835bf$var$functions.propertyIsEnumerable(word) || stream.current().match(/^#@?[a-z0-9_]+ *$/i) && stream.peek() == \"(\" && !($8fe15bfb4b3835bf$var$functions && $8fe15bfb4b3835bf$var$functions.propertyIsEnumerable(word.toLowerCase()))) {\n            state.beforeParams = true;\n            state.lastTokenWasBuiltin = false;\n            return \"keyword\";\n        }\n        if (state.inString) {\n            state.lastTokenWasBuiltin = false;\n            return \"string\";\n        }\n        if (stream.pos > word.length && stream.string.charAt(stream.pos - word.length - 1) == \".\" && state.lastTokenWasBuiltin) return \"builtin\";\n        // default: just a \"word\"\n        state.lastTokenWasBuiltin = false;\n        return null;\n    }\n}\nfunction $8fe15bfb4b3835bf$var$tokenString(quote) {\n    return function(stream, state) {\n        var escaped = false, next, end = false;\n        while((next = stream.next()) != null){\n            if (next == quote && !escaped) {\n                end = true;\n                break;\n            }\n            if (quote == '\"' && stream.peek() == '$' && !escaped) {\n                state.inString = true;\n                end = true;\n                break;\n            }\n            escaped = !escaped && next == \"\\\\\";\n        }\n        if (end) state.tokenize = $8fe15bfb4b3835bf$var$tokenBase;\n        return \"string\";\n    };\n}\nfunction $8fe15bfb4b3835bf$var$tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while(ch = stream.next()){\n        if (ch == \"#\" && maybeEnd) {\n            state.tokenize = $8fe15bfb4b3835bf$var$tokenBase;\n            break;\n        }\n        maybeEnd = ch == \"*\";\n    }\n    return \"comment\";\n}\nfunction $8fe15bfb4b3835bf$var$tokenUnparsed(stream, state) {\n    var maybeEnd = 0, ch;\n    while(ch = stream.next()){\n        if (ch == \"#\" && maybeEnd == 2) {\n            state.tokenize = $8fe15bfb4b3835bf$var$tokenBase;\n            break;\n        }\n        if (ch == \"]\") maybeEnd++;\n        else if (ch != \" \") maybeEnd = 0;\n    }\n    return \"meta\";\n}\nconst $8fe15bfb4b3835bf$export$b9fe5d314b12b4ca = {\n    name: \"velocity\",\n    startState: function() {\n        return {\n            tokenize: $8fe15bfb4b3835bf$var$tokenBase,\n            beforeParams: false,\n            inParams: false,\n            inString: false,\n            lastTokenWasBuiltin: false\n        };\n    },\n    token: function(stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n    },\n    languageData: {\n        commentTokens: {\n            line: \"##\",\n            block: {\n                open: \"#*\",\n                close: \"*#\"\n            }\n        }\n    }\n};\n\n});\n\n\n//# sourceMappingURL=velocity.81c0de4c.js.map\n","function parseWords(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nvar keywords = parseWords(\"#end #else #break #stop #[[ #]] \" +\n                          \"#{end} #{else} #{break} #{stop}\");\nvar functions = parseWords(\"#if #elseif #foreach #set #include #parse #macro #define #evaluate \" +\n                           \"#{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}\");\nvar specials = parseWords(\"$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent\");\nvar isOperatorChar = /[+\\-*&%=<>!?:\\/|]/;\n\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\nfunction tokenBase(stream, state) {\n  var beforeParams = state.beforeParams;\n  state.beforeParams = false;\n  var ch = stream.next();\n  // start of unparsed string?\n  if ((ch == \"'\") && !state.inString && state.inParams) {\n    state.lastTokenWasBuiltin = false;\n    return chain(stream, state, tokenString(ch));\n  }\n  // start of parsed string?\n  else if ((ch == '\"')) {\n    state.lastTokenWasBuiltin = false;\n    if (state.inString) {\n      state.inString = false;\n      return \"string\";\n    }\n    else if (state.inParams)\n      return chain(stream, state, tokenString(ch));\n  }\n  // is it one of the special signs []{}().,;? Separator?\n  else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n    if (ch == \"(\" && beforeParams)\n      state.inParams = true;\n    else if (ch == \")\") {\n      state.inParams = false;\n      state.lastTokenWasBuiltin = true;\n    }\n    return null;\n  }\n  // start of a number value?\n  else if (/\\d/.test(ch)) {\n    state.lastTokenWasBuiltin = false;\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  // multi line comment?\n  else if (ch == \"#\" && stream.eat(\"*\")) {\n    state.lastTokenWasBuiltin = false;\n    return chain(stream, state, tokenComment);\n  }\n  // unparsed content?\n  else if (ch == \"#\" && stream.match(/ *\\[ *\\[/)) {\n    state.lastTokenWasBuiltin = false;\n    return chain(stream, state, tokenUnparsed);\n  }\n  // single line comment?\n  else if (ch == \"#\" && stream.eat(\"#\")) {\n    state.lastTokenWasBuiltin = false;\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  // variable?\n  else if (ch == \"$\") {\n    stream.eat(\"!\");\n    stream.eatWhile(/[\\w\\d\\$_\\.{}-]/);\n    // is it one of the specials?\n    if (specials && specials.propertyIsEnumerable(stream.current())) {\n      return \"keyword\";\n    }\n    else {\n      state.lastTokenWasBuiltin = true;\n      state.beforeParams = true;\n      return \"builtin\";\n    }\n  }\n  // is it a operator?\n  else if (isOperatorChar.test(ch)) {\n    state.lastTokenWasBuiltin = false;\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  else {\n    // get the whole word\n    stream.eatWhile(/[\\w\\$_{}@]/);\n    var word = stream.current();\n    // is it one of the listed keywords?\n    if (keywords && keywords.propertyIsEnumerable(word))\n      return \"keyword\";\n    // is it one of the listed functions?\n    if (functions && functions.propertyIsEnumerable(word) ||\n        (stream.current().match(/^#@?[a-z0-9_]+ *$/i) && stream.peek()==\"(\") &&\n        !(functions && functions.propertyIsEnumerable(word.toLowerCase()))) {\n      state.beforeParams = true;\n      state.lastTokenWasBuiltin = false;\n      return \"keyword\";\n    }\n    if (state.inString) {\n      state.lastTokenWasBuiltin = false;\n      return \"string\";\n    }\n    if (stream.pos > word.length && stream.string.charAt(stream.pos-word.length-1)==\".\" && state.lastTokenWasBuiltin)\n      return \"builtin\";\n    // default: just a \"word\"\n    state.lastTokenWasBuiltin = false;\n    return null;\n  }\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if ((next == quote) && !escaped) {\n        end = true;\n        break;\n      }\n      if (quote=='\"' && stream.peek() == '$' && !escaped) {\n        state.inString = true;\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"#\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction tokenUnparsed(stream, state) {\n  var maybeEnd = 0, ch;\n  while (ch = stream.next()) {\n    if (ch == \"#\" && maybeEnd == 2) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    if (ch == \"]\")\n      maybeEnd++;\n    else if (ch != \" \")\n      maybeEnd = 0;\n  }\n  return \"meta\";\n}\n// Interface\n\nexport const velocity = {\n  name: \"velocity\",\n\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      beforeParams: false,\n      inParams: false,\n      inString: false,\n      lastTokenWasBuiltin: false\n    };\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  },\n  languageData: {\n    commentTokens: {line: \"##\", block: {open: \"#*\", close: \"*#\"}}\n  }\n};\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","$8fe15bfb4b3835bf$var$parseWords","str","obj","words","split","i","length","Object","defineProperty","get","$8fe15bfb4b3835bf$export$b9fe5d314b12b4ca","set","s","enumerable","configurable","$8fe15bfb4b3835bf$var$keywords","$8fe15bfb4b3835bf$var$functions","$8fe15bfb4b3835bf$var$specials","$8fe15bfb4b3835bf$var$isOperatorChar","$8fe15bfb4b3835bf$var$chain","stream","state","f","tokenize","$8fe15bfb4b3835bf$var$tokenBase","beforeParams","ch","next","inString","inParams","lastTokenWasBuiltin","$8fe15bfb4b3835bf$var$tokenString","test","eatWhile","eat","$8fe15bfb4b3835bf$var$tokenComment","match","$8fe15bfb4b3835bf$var$tokenUnparsed","skipToEnd","propertyIsEnumerable","current","word","peek","toLowerCase","pos","string","charAt","quote","escaped","end","maybeEnd","name","startState","token","eatSpace","languageData","commentTokens","line","block","open","close"],"version":3,"file":"velocity.81c0de4c.js.map"}