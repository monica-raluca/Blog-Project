{"mappings":"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","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/turtle.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"7kaqp\", function(module, exports) {\n\n$parcel$export(module.exports, \"turtle\", () => $55527cd39e8b767b$export$cdd8d0919c63e10e);\nvar $55527cd39e8b767b$var$curPunc;\nfunction $55527cd39e8b767b$var$wordRegexp(words) {\n    return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n}\nvar $55527cd39e8b767b$var$ops = $55527cd39e8b767b$var$wordRegexp([]);\nvar $55527cd39e8b767b$var$keywords = $55527cd39e8b767b$var$wordRegexp([\n    \"@prefix\",\n    \"@base\",\n    \"a\"\n]);\nvar $55527cd39e8b767b$var$operatorChars = /[*+\\-<>=&|]/;\nfunction $55527cd39e8b767b$var$tokenBase(stream, state) {\n    var ch = stream.next();\n    $55527cd39e8b767b$var$curPunc = null;\n    if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n        stream.match(/^[^\\s\\u00a0>]*>?/);\n        return \"atom\";\n    } else if (ch == \"\\\"\" || ch == \"'\") {\n        state.tokenize = $55527cd39e8b767b$var$tokenLiteral(ch);\n        return state.tokenize(stream, state);\n    } else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n        $55527cd39e8b767b$var$curPunc = ch;\n        return null;\n    } else if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n    } else if ($55527cd39e8b767b$var$operatorChars.test(ch)) {\n        stream.eatWhile($55527cd39e8b767b$var$operatorChars);\n        return null;\n    } else if (ch == \":\") return \"operator\";\n    else {\n        stream.eatWhile(/[_\\w\\d]/);\n        if (stream.peek() == \":\") return \"variableName.special\";\n        else {\n            var word = stream.current();\n            if ($55527cd39e8b767b$var$keywords.test(word)) return \"meta\";\n            if (ch >= \"A\" && ch <= \"Z\") return \"comment\";\n            else return \"keyword\";\n        }\n        var word = stream.current();\n        if ($55527cd39e8b767b$var$ops.test(word)) return null;\n        else if ($55527cd39e8b767b$var$keywords.test(word)) return \"meta\";\n        else return \"variable\";\n    }\n}\nfunction $55527cd39e8b767b$var$tokenLiteral(quote) {\n    return function(stream, state) {\n        var escaped = false, ch;\n        while((ch = stream.next()) != null){\n            if (ch == quote && !escaped) {\n                state.tokenize = $55527cd39e8b767b$var$tokenBase;\n                break;\n            }\n            escaped = !escaped && ch == \"\\\\\";\n        }\n        return \"string\";\n    };\n}\nfunction $55527cd39e8b767b$var$pushContext(state, type, col) {\n    state.context = {\n        prev: state.context,\n        indent: state.indent,\n        col: col,\n        type: type\n    };\n}\nfunction $55527cd39e8b767b$var$popContext(state) {\n    state.indent = state.context.indent;\n    state.context = state.context.prev;\n}\nconst $55527cd39e8b767b$export$cdd8d0919c63e10e = {\n    name: \"turtle\",\n    startState: function() {\n        return {\n            tokenize: $55527cd39e8b767b$var$tokenBase,\n            context: null,\n            indent: 0,\n            col: 0\n        };\n    },\n    token: function(stream, state) {\n        if (stream.sol()) {\n            if (state.context && state.context.align == null) state.context.align = false;\n            state.indent = stream.indentation();\n        }\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") state.context.align = true;\n        if ($55527cd39e8b767b$var$curPunc == \"(\") $55527cd39e8b767b$var$pushContext(state, \")\", stream.column());\n        else if ($55527cd39e8b767b$var$curPunc == \"[\") $55527cd39e8b767b$var$pushContext(state, \"]\", stream.column());\n        else if ($55527cd39e8b767b$var$curPunc == \"{\") $55527cd39e8b767b$var$pushContext(state, \"}\", stream.column());\n        else if (/[\\]\\}\\)]/.test($55527cd39e8b767b$var$curPunc)) {\n            while(state.context && state.context.type == \"pattern\")$55527cd39e8b767b$var$popContext(state);\n            if (state.context && $55527cd39e8b767b$var$curPunc == state.context.type) $55527cd39e8b767b$var$popContext(state);\n        } else if ($55527cd39e8b767b$var$curPunc == \".\" && state.context && state.context.type == \"pattern\") $55527cd39e8b767b$var$popContext(state);\n        else if (/atom|string|variable/.test(style) && state.context) {\n            if (/[\\}\\]]/.test(state.context.type)) $55527cd39e8b767b$var$pushContext(state, \"pattern\", stream.column());\n            else if (state.context.type == \"pattern\" && !state.context.align) {\n                state.context.align = true;\n                state.context.col = stream.column();\n            }\n        }\n        return style;\n    },\n    indent: function(state, textAfter, cx) {\n        var firstChar = textAfter && textAfter.charAt(0);\n        var context = state.context;\n        if (/[\\]\\}]/.test(firstChar)) while(context && context.type == \"pattern\")context = context.prev;\n        var closing = context && firstChar == context.type;\n        if (!context) return 0;\n        else if (context.type == \"pattern\") return context.col;\n        else if (context.align) return context.col + (closing ? 0 : 1);\n        else return context.indent + (closing ? 0 : cx.unit);\n    },\n    languageData: {\n        commentTokens: {\n            line: \"#\"\n        }\n    }\n};\n\n});\n\n\n//# sourceMappingURL=turtle.14556c52.js.map\n","var curPunc;\n\nfunction wordRegexp(words) {\n  return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n}\nvar ops = wordRegexp([]);\nvar keywords = wordRegexp([\"@prefix\", \"@base\", \"a\"]);\nvar operatorChars = /[*+\\-<>=&|]/;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  curPunc = null;\n  if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n    stream.match(/^[^\\s\\u00a0>]*>?/);\n    return \"atom\";\n  }\n  else if (ch == \"\\\"\" || ch == \"'\") {\n    state.tokenize = tokenLiteral(ch);\n    return state.tokenize(stream, state);\n  }\n  else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  }\n  else if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  else if (operatorChars.test(ch)) {\n    stream.eatWhile(operatorChars);\n    return null;\n  }\n  else if (ch == \":\") {\n    return \"operator\";\n  } else {\n    stream.eatWhile(/[_\\w\\d]/);\n    if(stream.peek() == \":\") {\n      return \"variableName.special\";\n    } else {\n      var word = stream.current();\n\n      if(keywords.test(word)) {\n        return \"meta\";\n      }\n\n      if(ch >= \"A\" && ch <= \"Z\") {\n        return \"comment\";\n      } else {\n        return \"keyword\";\n      }\n    }\n    var word = stream.current();\n    if (ops.test(word))\n      return null;\n    else if (keywords.test(word))\n      return \"meta\";\n    else\n      return \"variable\";\n  }\n}\n\nfunction tokenLiteral(quote) {\n  return function(stream, state) {\n    var escaped = false, ch;\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    return \"string\";\n  };\n}\n\nfunction pushContext(state, type, col) {\n  state.context = {prev: state.context, indent: state.indent, col: col, type: type};\n}\nfunction popContext(state) {\n  state.indent = state.context.indent;\n  state.context = state.context.prev;\n}\n\nexport const turtle = {\n  name: \"turtle\",\n  startState: function() {\n    return {tokenize: tokenBase,\n            context: null,\n            indent: 0,\n            col: 0};\n  },\n\n  token: function(stream, state) {\n    if (stream.sol()) {\n      if (state.context && state.context.align == null) state.context.align = false;\n      state.indent = stream.indentation();\n    }\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n\n    if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n      state.context.align = true;\n    }\n\n    if (curPunc == \"(\") pushContext(state, \")\", stream.column());\n    else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());\n    else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());\n    else if (/[\\]\\}\\)]/.test(curPunc)) {\n      while (state.context && state.context.type == \"pattern\") popContext(state);\n      if (state.context && curPunc == state.context.type) popContext(state);\n    }\n    else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);\n    else if (/atom|string|variable/.test(style) && state.context) {\n      if (/[\\}\\]]/.test(state.context.type))\n        pushContext(state, \"pattern\", stream.column());\n      else if (state.context.type == \"pattern\" && !state.context.align) {\n        state.context.align = true;\n        state.context.col = stream.column();\n      }\n    }\n\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    var firstChar = textAfter && textAfter.charAt(0);\n    var context = state.context;\n    if (/[\\]\\}]/.test(firstChar))\n      while (context && context.type == \"pattern\") context = context.prev;\n\n    var closing = context && firstChar == context.type;\n    if (!context)\n      return 0;\n    else if (context.type == \"pattern\")\n      return context.col;\n    else if (context.align)\n      return context.col + (closing ? 0 : 1);\n    else\n      return context.indent + (closing ? 0 : cx.unit);\n  },\n\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n};\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","$55527cd39e8b767b$var$wordRegexp","words","RegExp","join","Object","defineProperty","get","$55527cd39e8b767b$export$cdd8d0919c63e10e","set","s","enumerable","configurable","$55527cd39e8b767b$var$curPunc","$55527cd39e8b767b$var$keywords","$55527cd39e8b767b$var$operatorChars","$55527cd39e8b767b$var$tokenBase","stream","state","quote","word","ch","next","match","tokenize","escaped","test","skipToEnd","eatWhile","peek","current","$55527cd39e8b767b$var$pushContext","type","col","context","prev","indent","$55527cd39e8b767b$var$popContext","name","startState","token","sol","align","indentation","eatSpace","style","column","textAfter","cx","firstChar","charAt","closing","unit","languageData","commentTokens","line"],"version":3,"file":"turtle.14556c52.js.map"}