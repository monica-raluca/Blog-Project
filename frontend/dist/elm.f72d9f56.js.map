{"mappings":"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","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/elm.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"c32m1\", function(module, exports) {\n\n$parcel$export(module.exports, \"elm\", () => $8c579753e78a1948$export$be2543d304cb151);\nfunction $8c579753e78a1948$var$switchState(source, setState, f) {\n    setState(f);\n    return f(source, setState);\n}\nvar $8c579753e78a1948$var$lowerRE = /[a-z]/;\nvar $8c579753e78a1948$var$upperRE = /[A-Z]/;\nvar $8c579753e78a1948$var$innerRE = /[a-zA-Z0-9_]/;\nvar $8c579753e78a1948$var$digitRE = /[0-9]/;\nvar $8c579753e78a1948$var$hexRE = /[0-9A-Fa-f]/;\nvar $8c579753e78a1948$var$symbolRE = /[-&*+.\\\\/<>=?^|:]/;\nvar $8c579753e78a1948$var$specialRE = /[(),[\\]{}]/;\nvar $8c579753e78a1948$var$spacesRE = /[ \\v\\f]/; // newlines are handled in tokenizer\nfunction $8c579753e78a1948$var$normal() {\n    return function(source, setState) {\n        if (source.eatWhile($8c579753e78a1948$var$spacesRE)) return null;\n        var char = source.next();\n        if ($8c579753e78a1948$var$specialRE.test(char)) return char === '{' && source.eat('-') ? $8c579753e78a1948$var$switchState(source, setState, $8c579753e78a1948$var$chompMultiComment(1)) : char === '[' && source.match('glsl|') ? $8c579753e78a1948$var$switchState(source, setState, $8c579753e78a1948$var$chompGlsl) : 'builtin';\n        if (char === '\\'') return $8c579753e78a1948$var$switchState(source, setState, $8c579753e78a1948$var$chompChar);\n        if (char === '\"') return source.eat('\"') ? source.eat('\"') ? $8c579753e78a1948$var$switchState(source, setState, $8c579753e78a1948$var$chompMultiString) : 'string' : $8c579753e78a1948$var$switchState(source, setState, $8c579753e78a1948$var$chompSingleString);\n        if ($8c579753e78a1948$var$upperRE.test(char)) {\n            source.eatWhile($8c579753e78a1948$var$innerRE);\n            return 'type';\n        }\n        if ($8c579753e78a1948$var$lowerRE.test(char)) {\n            var isDef = source.pos === 1;\n            source.eatWhile($8c579753e78a1948$var$innerRE);\n            return isDef ? \"def\" : \"variable\";\n        }\n        if ($8c579753e78a1948$var$digitRE.test(char)) {\n            if (char === '0') {\n                if (source.eat(/[xX]/)) {\n                    source.eatWhile($8c579753e78a1948$var$hexRE); // should require at least 1\n                    return \"number\";\n                }\n            } else source.eatWhile($8c579753e78a1948$var$digitRE);\n            if (source.eat('.')) source.eatWhile($8c579753e78a1948$var$digitRE); // should require at least 1\n            if (source.eat(/[eE]/)) {\n                source.eat(/[-+]/);\n                source.eatWhile($8c579753e78a1948$var$digitRE); // should require at least 1\n            }\n            return \"number\";\n        }\n        if ($8c579753e78a1948$var$symbolRE.test(char)) {\n            if (char === '-' && source.eat('-')) {\n                source.skipToEnd();\n                return \"comment\";\n            }\n            source.eatWhile($8c579753e78a1948$var$symbolRE);\n            return \"keyword\";\n        }\n        if (char === '_') return \"keyword\";\n        return \"error\";\n    };\n}\nfunction $8c579753e78a1948$var$chompMultiComment(nest) {\n    if (nest == 0) return $8c579753e78a1948$var$normal();\n    return function(source, setState) {\n        while(!source.eol()){\n            var char = source.next();\n            if (char == '{' && source.eat('-')) ++nest;\n            else if (char == '-' && source.eat('}')) {\n                --nest;\n                if (nest === 0) {\n                    setState($8c579753e78a1948$var$normal());\n                    return 'comment';\n                }\n            }\n        }\n        setState($8c579753e78a1948$var$chompMultiComment(nest));\n        return 'comment';\n    };\n}\nfunction $8c579753e78a1948$var$chompMultiString(source, setState) {\n    while(!source.eol()){\n        var char = source.next();\n        if (char === '\"' && source.eat('\"') && source.eat('\"')) {\n            setState($8c579753e78a1948$var$normal());\n            return 'string';\n        }\n    }\n    return 'string';\n}\nfunction $8c579753e78a1948$var$chompSingleString(source, setState) {\n    while(source.skipTo('\\\\\"')){\n        source.next();\n        source.next();\n    }\n    if (source.skipTo('\"')) {\n        source.next();\n        setState($8c579753e78a1948$var$normal());\n        return 'string';\n    }\n    source.skipToEnd();\n    setState($8c579753e78a1948$var$normal());\n    return 'error';\n}\nfunction $8c579753e78a1948$var$chompChar(source, setState) {\n    while(source.skipTo(\"\\\\'\")){\n        source.next();\n        source.next();\n    }\n    if (source.skipTo(\"'\")) {\n        source.next();\n        setState($8c579753e78a1948$var$normal());\n        return 'string';\n    }\n    source.skipToEnd();\n    setState($8c579753e78a1948$var$normal());\n    return 'error';\n}\nfunction $8c579753e78a1948$var$chompGlsl(source, setState) {\n    while(!source.eol()){\n        var char = source.next();\n        if (char === '|' && source.eat(']')) {\n            setState($8c579753e78a1948$var$normal());\n            return 'string';\n        }\n    }\n    return 'string';\n}\nvar $8c579753e78a1948$var$wellKnownWords = {\n    case: 1,\n    of: 1,\n    as: 1,\n    if: 1,\n    then: 1,\n    else: 1,\n    let: 1,\n    in: 1,\n    type: 1,\n    alias: 1,\n    module: 1,\n    where: 1,\n    import: 1,\n    exposing: 1,\n    port: 1\n};\nconst $8c579753e78a1948$export$be2543d304cb151 = {\n    name: \"elm\",\n    startState: function() {\n        return {\n            f: $8c579753e78a1948$var$normal()\n        };\n    },\n    copyState: function(s) {\n        return {\n            f: s.f\n        };\n    },\n    token: function(stream, state) {\n        var type = state.f(stream, function(s) {\n            state.f = s;\n        });\n        var word = stream.current();\n        return $8c579753e78a1948$var$wellKnownWords.hasOwnProperty(word) ? 'keyword' : type;\n    },\n    languageData: {\n        commentTokens: {\n            line: \"--\"\n        }\n    }\n};\n\n});\n\n\n//# sourceMappingURL=elm.f72d9f56.js.map\n","function switchState(source, setState, f)\n{\n  setState(f);\n  return f(source, setState);\n}\n\nvar lowerRE = /[a-z]/;\nvar upperRE = /[A-Z]/;\nvar innerRE = /[a-zA-Z0-9_]/;\n\nvar digitRE = /[0-9]/;\nvar hexRE = /[0-9A-Fa-f]/;\nvar symbolRE = /[-&*+.\\\\/<>=?^|:]/;\nvar specialRE = /[(),[\\]{}]/;\nvar spacesRE = /[ \\v\\f]/; // newlines are handled in tokenizer\n\nfunction normal()\n{\n  return function(source, setState)\n  {\n    if (source.eatWhile(spacesRE))\n    {\n      return null;\n    }\n\n    var char = source.next();\n\n    if (specialRE.test(char))\n    {\n      return (char === '{' && source.eat('-'))\n        ? switchState(source, setState, chompMultiComment(1))\n        : (char === '[' && source.match('glsl|'))\n        ? switchState(source, setState, chompGlsl)\n        : 'builtin';\n    }\n\n    if (char === '\\'')\n    {\n      return switchState(source, setState, chompChar);\n    }\n\n    if (char === '\"')\n    {\n      return source.eat('\"')\n        ? source.eat('\"')\n        ? switchState(source, setState, chompMultiString)\n        : 'string'\n      : switchState(source, setState, chompSingleString);\n    }\n\n    if (upperRE.test(char))\n    {\n      source.eatWhile(innerRE);\n      return 'type';\n    }\n\n    if (lowerRE.test(char))\n    {\n      var isDef = source.pos === 1;\n      source.eatWhile(innerRE);\n      return isDef ? \"def\" : \"variable\";\n    }\n\n    if (digitRE.test(char))\n    {\n      if (char === '0')\n      {\n        if (source.eat(/[xX]/))\n        {\n          source.eatWhile(hexRE); // should require at least 1\n          return \"number\";\n        }\n      }\n      else\n      {\n        source.eatWhile(digitRE);\n      }\n      if (source.eat('.'))\n      {\n        source.eatWhile(digitRE); // should require at least 1\n      }\n      if (source.eat(/[eE]/))\n      {\n        source.eat(/[-+]/);\n        source.eatWhile(digitRE); // should require at least 1\n      }\n      return \"number\";\n    }\n\n    if (symbolRE.test(char))\n    {\n      if (char === '-' && source.eat('-'))\n      {\n        source.skipToEnd();\n        return \"comment\";\n      }\n      source.eatWhile(symbolRE);\n      return \"keyword\";\n    }\n\n    if (char === '_')\n    {\n      return \"keyword\";\n    }\n\n    return \"error\";\n  }\n}\n\nfunction chompMultiComment(nest)\n{\n  if (nest == 0)\n  {\n    return normal();\n  }\n  return function(source, setState)\n  {\n    while (!source.eol())\n    {\n      var char = source.next();\n      if (char == '{' && source.eat('-'))\n      {\n        ++nest;\n      }\n      else if (char == '-' && source.eat('}'))\n      {\n        --nest;\n        if (nest === 0)\n        {\n          setState(normal());\n          return 'comment';\n        }\n      }\n    }\n    setState(chompMultiComment(nest));\n    return 'comment';\n  }\n}\n\nfunction chompMultiString(source, setState)\n{\n  while (!source.eol())\n  {\n    var char = source.next();\n    if (char === '\"' && source.eat('\"') && source.eat('\"'))\n    {\n      setState(normal());\n      return 'string';\n    }\n  }\n  return 'string';\n}\n\nfunction chompSingleString(source, setState)\n{\n  while (source.skipTo('\\\\\"')) { source.next(); source.next(); }\n  if (source.skipTo('\"'))\n  {\n    source.next();\n    setState(normal());\n    return 'string';\n  }\n  source.skipToEnd();\n  setState(normal());\n  return 'error';\n}\n\nfunction chompChar(source, setState)\n{\n  while (source.skipTo(\"\\\\'\")) { source.next(); source.next(); }\n  if (source.skipTo(\"'\"))\n  {\n    source.next();\n    setState(normal());\n    return 'string';\n  }\n  source.skipToEnd();\n  setState(normal());\n  return 'error';\n}\n\nfunction chompGlsl(source, setState)\n{\n  while (!source.eol())\n  {\n    var char = source.next();\n    if (char === '|' && source.eat(']'))\n    {\n      setState(normal());\n      return 'string';\n    }\n  }\n  return 'string';\n}\n\nvar wellKnownWords = {\n  case: 1,\n  of: 1,\n  as: 1,\n  if: 1,\n  then: 1,\n  else: 1,\n  let: 1,\n    in: 1,\n  type: 1,\n  alias: 1,\n  module: 1,\n  where: 1,\n  import: 1,\n  exposing: 1,\n  port: 1\n};\n\nexport const elm = {\n  name: \"elm\",\n  startState: function ()  { return { f: normal() }; },\n  copyState:  function (s) { return { f: s.f }; },\n\n  token: function(stream, state) {\n    var type = state.f(stream, function(s) { state.f = s; });\n    var word = stream.current();\n    return (wellKnownWords.hasOwnProperty(word)) ? 'keyword' : type;\n  },\n\n  languageData: {\n    commentTokens: {line: \"--\"}\n  }\n};\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","$8c579753e78a1948$var$switchState","source","setState","f","e","Object","defineProperty","get","$8c579753e78a1948$export$be2543d304cb151","set","s","enumerable","configurable","$8c579753e78a1948$var$lowerRE","$8c579753e78a1948$var$upperRE","$8c579753e78a1948$var$innerRE","$8c579753e78a1948$var$digitRE","$8c579753e78a1948$var$hexRE","$8c579753e78a1948$var$symbolRE","$8c579753e78a1948$var$specialRE","$8c579753e78a1948$var$spacesRE","$8c579753e78a1948$var$normal","eatWhile","char","next","test","eat","$8c579753e78a1948$var$chompMultiComment","nest","eol","match","$8c579753e78a1948$var$chompGlsl","$8c579753e78a1948$var$chompChar","$8c579753e78a1948$var$chompMultiString","$8c579753e78a1948$var$chompSingleString","isDef","pos","skipToEnd","skipTo","$8c579753e78a1948$var$wellKnownWords","case","of","as","if","then","else","let","in","type","alias","where","import","exposing","port","name","startState","copyState","token","stream","state","word","current","hasOwnProperty","languageData","commentTokens","line"],"version":3,"file":"elm.f72d9f56.js.map"}