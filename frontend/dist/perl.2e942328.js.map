{"mappings":"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","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/perl.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"lQe0y\", function(module, exports) {\n\n$parcel$export(module.exports, \"perl\", () => $fe6951fa85737307$export$f3198024f30e8d06);\n// it's like \"peek\", but need for look-ahead or look-behind if index < 0\nfunction $fe6951fa85737307$var$look(stream, c) {\n    return stream.string.charAt(stream.pos + (c || 0));\n}\n// return a part of prefix of current stream from current position\nfunction $fe6951fa85737307$var$prefix(stream, c) {\n    if (c) {\n        var x = stream.pos - c;\n        return stream.string.substr(x >= 0 ? x : 0, c);\n    } else return stream.string.substr(0, stream.pos - 1);\n}\n// return a part of suffix of current stream from current position\nfunction $fe6951fa85737307$var$suffix(stream, c) {\n    var y = stream.string.length;\n    var x = y - stream.pos + 1;\n    return stream.string.substr(stream.pos, c && c < y ? c : x);\n}\n// eating and vomiting a part of stream from current position\nfunction $fe6951fa85737307$var$eatSuffix(stream, c) {\n    var x = stream.pos + c;\n    var y;\n    if (x <= 0) stream.pos = 0;\n    else if (x >= (y = stream.string.length - 1)) stream.pos = y;\n    else stream.pos = x;\n}\n// http://perldoc.perl.org\nvar $fe6951fa85737307$var$PERL = {\n    //   1 - keyword\n    //   2 - def\n    //   3 - atom\n    //   4 - operator\n    //   5 - builtin (predefined)\n    //   [x,y] - x=1,2,3; y=must be defined if x{...}\n    //      PERL operators\n    '->': 4,\n    '++': 4,\n    '--': 4,\n    '**': 4,\n    //   ! ~ \\ and unary + and -\n    '=~': 4,\n    '!~': 4,\n    '*': 4,\n    '/': 4,\n    '%': 4,\n    'x': 4,\n    '+': 4,\n    '-': 4,\n    '.': 4,\n    '<<': 4,\n    '>>': 4,\n    //   named unary operators\n    '<': 4,\n    '>': 4,\n    '<=': 4,\n    '>=': 4,\n    'lt': 4,\n    'gt': 4,\n    'le': 4,\n    'ge': 4,\n    '==': 4,\n    '!=': 4,\n    '<=>': 4,\n    'eq': 4,\n    'ne': 4,\n    'cmp': 4,\n    '~~': 4,\n    '&': 4,\n    '|': 4,\n    '^': 4,\n    '&&': 4,\n    '||': 4,\n    '//': 4,\n    '..': 4,\n    '...': 4,\n    '?': 4,\n    ':': 4,\n    '=': 4,\n    '+=': 4,\n    '-=': 4,\n    '*=': 4,\n    ',': 4,\n    '=>': 4,\n    '::': 4,\n    //   list operators (rightward)\n    'not': 4,\n    'and': 4,\n    'or': 4,\n    'xor': 4,\n    //      PERL predefined variables (I know, what this is a paranoid idea, but may be needed for people, who learn PERL, and for me as well, ...and may be for you?;)\n    'BEGIN': [\n        5,\n        1\n    ],\n    'END': [\n        5,\n        1\n    ],\n    'PRINT': [\n        5,\n        1\n    ],\n    'PRINTF': [\n        5,\n        1\n    ],\n    'GETC': [\n        5,\n        1\n    ],\n    'READ': [\n        5,\n        1\n    ],\n    'READLINE': [\n        5,\n        1\n    ],\n    'DESTROY': [\n        5,\n        1\n    ],\n    'TIE': [\n        5,\n        1\n    ],\n    'TIEHANDLE': [\n        5,\n        1\n    ],\n    'UNTIE': [\n        5,\n        1\n    ],\n    'STDIN': 5,\n    'STDIN_TOP': 5,\n    'STDOUT': 5,\n    'STDOUT_TOP': 5,\n    'STDERR': 5,\n    'STDERR_TOP': 5,\n    '$ARG': 5,\n    '$_': 5,\n    '@ARG': 5,\n    '@_': 5,\n    '$LIST_SEPARATOR': 5,\n    '$\"': 5,\n    '$PROCESS_ID': 5,\n    '$PID': 5,\n    '$$': 5,\n    '$REAL_GROUP_ID': 5,\n    '$GID': 5,\n    '$(': 5,\n    '$EFFECTIVE_GROUP_ID': 5,\n    '$EGID': 5,\n    '$)': 5,\n    '$PROGRAM_NAME': 5,\n    '$0': 5,\n    '$SUBSCRIPT_SEPARATOR': 5,\n    '$SUBSEP': 5,\n    '$;': 5,\n    '$REAL_USER_ID': 5,\n    '$UID': 5,\n    '$<': 5,\n    '$EFFECTIVE_USER_ID': 5,\n    '$EUID': 5,\n    '$>': 5,\n    '$a': 5,\n    '$b': 5,\n    '$COMPILING': 5,\n    '$^C': 5,\n    '$DEBUGGING': 5,\n    '$^D': 5,\n    '${^ENCODING}': 5,\n    '$ENV': 5,\n    '%ENV': 5,\n    '$SYSTEM_FD_MAX': 5,\n    '$^F': 5,\n    '@F': 5,\n    '${^GLOBAL_PHASE}': 5,\n    '$^H': 5,\n    '%^H': 5,\n    '@INC': 5,\n    '%INC': 5,\n    '$INPLACE_EDIT': 5,\n    '$^I': 5,\n    '$^M': 5,\n    '$OSNAME': 5,\n    '$^O': 5,\n    '${^OPEN}': 5,\n    '$PERLDB': 5,\n    '$^P': 5,\n    '$SIG': 5,\n    '%SIG': 5,\n    '$BASETIME': 5,\n    '$^T': 5,\n    '${^TAINT}': 5,\n    '${^UNICODE}': 5,\n    '${^UTF8CACHE}': 5,\n    '${^UTF8LOCALE}': 5,\n    '$PERL_VERSION': 5,\n    '$^V': 5,\n    '${^WIN32_SLOPPY_STAT}': 5,\n    '$EXECUTABLE_NAME': 5,\n    '$^X': 5,\n    '$1': 5,\n    '$MATCH': 5,\n    '$&': 5,\n    '${^MATCH}': 5,\n    '$PREMATCH': 5,\n    '$`': 5,\n    '${^PREMATCH}': 5,\n    '$POSTMATCH': 5,\n    \"$'\": 5,\n    '${^POSTMATCH}': 5,\n    '$LAST_PAREN_MATCH': 5,\n    '$+': 5,\n    '$LAST_SUBMATCH_RESULT': 5,\n    '$^N': 5,\n    '@LAST_MATCH_END': 5,\n    '@+': 5,\n    '%LAST_PAREN_MATCH': 5,\n    '%+': 5,\n    '@LAST_MATCH_START': 5,\n    '@-': 5,\n    '%LAST_MATCH_START': 5,\n    '%-': 5,\n    '$LAST_REGEXP_CODE_RESULT': 5,\n    '$^R': 5,\n    '${^RE_DEBUG_FLAGS}': 5,\n    '${^RE_TRIE_MAXBUF}': 5,\n    '$ARGV': 5,\n    '@ARGV': 5,\n    'ARGV': 5,\n    'ARGVOUT': 5,\n    '$OUTPUT_FIELD_SEPARATOR': 5,\n    '$OFS': 5,\n    '$,': 5,\n    '$INPUT_LINE_NUMBER': 5,\n    '$NR': 5,\n    '$.': 5,\n    '$INPUT_RECORD_SEPARATOR': 5,\n    '$RS': 5,\n    '$/': 5,\n    '$OUTPUT_RECORD_SEPARATOR': 5,\n    '$ORS': 5,\n    '$\\\\': 5,\n    '$OUTPUT_AUTOFLUSH': 5,\n    '$|': 5,\n    '$ACCUMULATOR': 5,\n    '$^A': 5,\n    '$FORMAT_FORMFEED': 5,\n    '$^L': 5,\n    '$FORMAT_PAGE_NUMBER': 5,\n    '$%': 5,\n    '$FORMAT_LINES_LEFT': 5,\n    '$-': 5,\n    '$FORMAT_LINE_BREAK_CHARACTERS': 5,\n    '$:': 5,\n    '$FORMAT_LINES_PER_PAGE': 5,\n    '$=': 5,\n    '$FORMAT_TOP_NAME': 5,\n    '$^': 5,\n    '$FORMAT_NAME': 5,\n    '$~': 5,\n    '${^CHILD_ERROR_NATIVE}': 5,\n    '$EXTENDED_OS_ERROR': 5,\n    '$^E': 5,\n    '$EXCEPTIONS_BEING_CAUGHT': 5,\n    '$^S': 5,\n    '$WARNING': 5,\n    '$^W': 5,\n    '${^WARNING_BITS}': 5,\n    '$OS_ERROR': 5,\n    '$ERRNO': 5,\n    '$!': 5,\n    '%OS_ERROR': 5,\n    '%ERRNO': 5,\n    '%!': 5,\n    '$CHILD_ERROR': 5,\n    '$?': 5,\n    '$EVAL_ERROR': 5,\n    '$@': 5,\n    '$OFMT': 5,\n    '$#': 5,\n    '$*': 5,\n    '$ARRAY_BASE': 5,\n    '$[': 5,\n    '$OLD_PERL_VERSION': 5,\n    '$]': 5,\n    //      PERL blocks\n    'if': [\n        1,\n        1\n    ],\n    elsif: [\n        1,\n        1\n    ],\n    'else': [\n        1,\n        1\n    ],\n    'while': [\n        1,\n        1\n    ],\n    unless: [\n        1,\n        1\n    ],\n    'for': [\n        1,\n        1\n    ],\n    foreach: [\n        1,\n        1\n    ],\n    //      PERL functions\n    'abs': 1,\n    accept: 1,\n    alarm: 1,\n    'atan2': 1,\n    bind: 1,\n    binmode: 1,\n    bless: 1,\n    bootstrap: 1,\n    'break': 1,\n    caller: 1,\n    chdir: 1,\n    chmod: 1,\n    chomp: 1,\n    chop: 1,\n    chown: 1,\n    chr: 1,\n    chroot: 1,\n    close: 1,\n    closedir: 1,\n    connect: 1,\n    'continue': [\n        1,\n        1\n    ],\n    'cos': 1,\n    crypt: 1,\n    dbmclose: 1,\n    dbmopen: 1,\n    'default': 1,\n    defined: 1,\n    'delete': 1,\n    die: 1,\n    'do': 1,\n    dump: 1,\n    each: 1,\n    endgrent: 1,\n    endhostent: 1,\n    endnetent: 1,\n    endprotoent: 1,\n    endpwent: 1,\n    endservent: 1,\n    eof: 1,\n    'eval': 1,\n    'exec': 1,\n    exists: 1,\n    exit: 1,\n    'exp': 1,\n    fcntl: 1,\n    fileno: 1,\n    flock: 1,\n    fork: 1,\n    format: 1,\n    formline: 1,\n    getc: 1,\n    getgrent: 1,\n    getgrgid: 1,\n    getgrnam: 1,\n    gethostbyaddr: 1,\n    gethostbyname: 1,\n    gethostent: 1,\n    getlogin: 1,\n    getnetbyaddr: 1,\n    getnetbyname: 1,\n    getnetent: 1,\n    getpeername: 1,\n    getpgrp: 1,\n    getppid: 1,\n    getpriority: 1,\n    getprotobyname: 1,\n    getprotobynumber: 1,\n    getprotoent: 1,\n    getpwent: 1,\n    getpwnam: 1,\n    getpwuid: 1,\n    getservbyname: 1,\n    getservbyport: 1,\n    getservent: 1,\n    getsockname: 1,\n    getsockopt: 1,\n    given: 1,\n    glob: 1,\n    gmtime: 1,\n    'goto': 1,\n    grep: 1,\n    hex: 1,\n    'import': 1,\n    index: 1,\n    'int': 1,\n    ioctl: 1,\n    'join': 1,\n    keys: 1,\n    kill: 1,\n    last: 1,\n    lc: 1,\n    lcfirst: 1,\n    length: 1,\n    'link': 1,\n    listen: 1,\n    local: 2,\n    localtime: 1,\n    lock: 1,\n    'log': 1,\n    lstat: 1,\n    m: null,\n    map: 1,\n    mkdir: 1,\n    msgctl: 1,\n    msgget: 1,\n    msgrcv: 1,\n    msgsnd: 1,\n    my: 2,\n    'new': 1,\n    next: 1,\n    no: 1,\n    oct: 1,\n    open: 1,\n    opendir: 1,\n    ord: 1,\n    our: 2,\n    pack: 1,\n    'package': 1,\n    pipe: 1,\n    pop: 1,\n    pos: 1,\n    print: 1,\n    printf: 1,\n    prototype: 1,\n    push: 1,\n    q: null,\n    qq: null,\n    qr: null,\n    quotemeta: null,\n    qw: null,\n    qx: null,\n    rand: 1,\n    read: 1,\n    readdir: 1,\n    readline: 1,\n    readlink: 1,\n    readpipe: 1,\n    recv: 1,\n    redo: 1,\n    ref: 1,\n    rename: 1,\n    require: 1,\n    reset: 1,\n    'return': 1,\n    reverse: 1,\n    rewinddir: 1,\n    rindex: 1,\n    rmdir: 1,\n    s: null,\n    say: 1,\n    scalar: 1,\n    seek: 1,\n    seekdir: 1,\n    select: 1,\n    semctl: 1,\n    semget: 1,\n    semop: 1,\n    send: 1,\n    setgrent: 1,\n    sethostent: 1,\n    setnetent: 1,\n    setpgrp: 1,\n    setpriority: 1,\n    setprotoent: 1,\n    setpwent: 1,\n    setservent: 1,\n    setsockopt: 1,\n    shift: 1,\n    shmctl: 1,\n    shmget: 1,\n    shmread: 1,\n    shmwrite: 1,\n    shutdown: 1,\n    'sin': 1,\n    sleep: 1,\n    socket: 1,\n    socketpair: 1,\n    'sort': 1,\n    splice: 1,\n    'split': 1,\n    sprintf: 1,\n    'sqrt': 1,\n    srand: 1,\n    stat: 1,\n    state: 1,\n    study: 1,\n    'sub': 1,\n    'substr': 1,\n    symlink: 1,\n    syscall: 1,\n    sysopen: 1,\n    sysread: 1,\n    sysseek: 1,\n    system: 1,\n    syswrite: 1,\n    tell: 1,\n    telldir: 1,\n    tie: 1,\n    tied: 1,\n    time: 1,\n    times: 1,\n    tr: null,\n    truncate: 1,\n    uc: 1,\n    ucfirst: 1,\n    umask: 1,\n    undef: 1,\n    unlink: 1,\n    unpack: 1,\n    unshift: 1,\n    untie: 1,\n    use: 1,\n    utime: 1,\n    values: 1,\n    vec: 1,\n    wait: 1,\n    waitpid: 1,\n    wantarray: 1,\n    warn: 1,\n    when: 1,\n    write: 1,\n    y: null\n}; // - transliterate a string\nvar $fe6951fa85737307$var$RXstyle = \"string.special\";\nvar $fe6951fa85737307$var$RXmodifiers = /[goseximacplud]/; // NOTE: \"m\", \"s\", \"y\" and \"tr\" need to correct real modifiers for each regexp type\nfunction $fe6951fa85737307$var$tokenChain(stream, state, chain, style, tail) {\n    state.chain = null; //                                                          12   3tail\n    state.style = null;\n    state.tail = null;\n    state.tokenize = function(stream, state) {\n        var e = false, c, i = 0;\n        while(c = stream.next()){\n            if (c === chain[i] && !e) {\n                if (chain[++i] !== undefined) {\n                    state.chain = chain[i];\n                    state.style = style;\n                    state.tail = tail;\n                } else if (tail) stream.eatWhile(tail);\n                state.tokenize = $fe6951fa85737307$var$tokenPerl;\n                return style;\n            }\n            e = !e && c == \"\\\\\";\n        }\n        return style;\n    };\n    return state.tokenize(stream, state);\n}\nfunction $fe6951fa85737307$var$tokenSOMETHING(stream, state, string) {\n    state.tokenize = function(stream, state) {\n        if (stream.string == string) state.tokenize = $fe6951fa85737307$var$tokenPerl;\n        stream.skipToEnd();\n        return \"string\";\n    };\n    return state.tokenize(stream, state);\n}\nfunction $fe6951fa85737307$var$tokenPerl(stream, state) {\n    if (stream.eatSpace()) return null;\n    if (state.chain) return $fe6951fa85737307$var$tokenChain(stream, state, state.chain, state.style, state.tail);\n    if (stream.match(/^(\\-?((\\d[\\d_]*)?\\.\\d+(e[+-]?\\d+)?|\\d+\\.\\d*)|0x[\\da-fA-F_]+|0b[01_]+|\\d[\\d_]*(e[+-]?\\d+)?)/)) return 'number';\n    if (stream.match(/^<<(?=[_a-zA-Z])/)) {\n        stream.eatWhile(/\\w/);\n        return $fe6951fa85737307$var$tokenSOMETHING(stream, state, stream.current().substr(2));\n    }\n    if (stream.sol() && stream.match(/^\\=item(?!\\w)/)) return $fe6951fa85737307$var$tokenSOMETHING(stream, state, '=cut');\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n        if ($fe6951fa85737307$var$prefix(stream, 3) == \"<<\" + ch) {\n            var p = stream.pos;\n            stream.eatWhile(/\\w/);\n            var n = stream.current().substr(1);\n            if (n && stream.eat(ch)) return $fe6951fa85737307$var$tokenSOMETHING(stream, state, n);\n            stream.pos = p;\n        }\n        return $fe6951fa85737307$var$tokenChain(stream, state, [\n            ch\n        ], \"string\");\n    }\n    if (ch == \"q\") {\n        var c = $fe6951fa85737307$var$look(stream, -2);\n        if (!(c && /\\w/.test(c))) {\n            c = $fe6951fa85737307$var$look(stream, 0);\n            if (c == \"x\") {\n                c = $fe6951fa85737307$var$look(stream, 1);\n                if (c == \"(\") {\n                    $fe6951fa85737307$var$eatSuffix(stream, 2);\n                    return $fe6951fa85737307$var$tokenChain(stream, state, [\n                        \")\"\n                    ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n                }\n                if (c == \"[\") {\n                    $fe6951fa85737307$var$eatSuffix(stream, 2);\n                    return $fe6951fa85737307$var$tokenChain(stream, state, [\n                        \"]\"\n                    ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n                }\n                if (c == \"{\") {\n                    $fe6951fa85737307$var$eatSuffix(stream, 2);\n                    return $fe6951fa85737307$var$tokenChain(stream, state, [\n                        \"}\"\n                    ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n                }\n                if (c == \"<\") {\n                    $fe6951fa85737307$var$eatSuffix(stream, 2);\n                    return $fe6951fa85737307$var$tokenChain(stream, state, [\n                        \">\"\n                    ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n                }\n                if (/[\\^'\"!~\\/]/.test(c)) {\n                    $fe6951fa85737307$var$eatSuffix(stream, 1);\n                    return $fe6951fa85737307$var$tokenChain(stream, state, [\n                        stream.eat(c)\n                    ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n                }\n            } else if (c == \"q\") {\n                c = $fe6951fa85737307$var$look(stream, 1);\n                if (c == \"(\") {\n                    $fe6951fa85737307$var$eatSuffix(stream, 2);\n                    return $fe6951fa85737307$var$tokenChain(stream, state, [\n                        \")\"\n                    ], \"string\");\n                }\n                if (c == \"[\") {\n                    $fe6951fa85737307$var$eatSuffix(stream, 2);\n                    return $fe6951fa85737307$var$tokenChain(stream, state, [\n                        \"]\"\n                    ], \"string\");\n                }\n                if (c == \"{\") {\n                    $fe6951fa85737307$var$eatSuffix(stream, 2);\n                    return $fe6951fa85737307$var$tokenChain(stream, state, [\n                        \"}\"\n                    ], \"string\");\n                }\n                if (c == \"<\") {\n                    $fe6951fa85737307$var$eatSuffix(stream, 2);\n                    return $fe6951fa85737307$var$tokenChain(stream, state, [\n                        \">\"\n                    ], \"string\");\n                }\n                if (/[\\^'\"!~\\/]/.test(c)) {\n                    $fe6951fa85737307$var$eatSuffix(stream, 1);\n                    return $fe6951fa85737307$var$tokenChain(stream, state, [\n                        stream.eat(c)\n                    ], \"string\");\n                }\n            } else if (c == \"w\") {\n                c = $fe6951fa85737307$var$look(stream, 1);\n                if (c == \"(\") {\n                    $fe6951fa85737307$var$eatSuffix(stream, 2);\n                    return $fe6951fa85737307$var$tokenChain(stream, state, [\n                        \")\"\n                    ], \"bracket\");\n                }\n                if (c == \"[\") {\n                    $fe6951fa85737307$var$eatSuffix(stream, 2);\n                    return $fe6951fa85737307$var$tokenChain(stream, state, [\n                        \"]\"\n                    ], \"bracket\");\n                }\n                if (c == \"{\") {\n                    $fe6951fa85737307$var$eatSuffix(stream, 2);\n                    return $fe6951fa85737307$var$tokenChain(stream, state, [\n                        \"}\"\n                    ], \"bracket\");\n                }\n                if (c == \"<\") {\n                    $fe6951fa85737307$var$eatSuffix(stream, 2);\n                    return $fe6951fa85737307$var$tokenChain(stream, state, [\n                        \">\"\n                    ], \"bracket\");\n                }\n                if (/[\\^'\"!~\\/]/.test(c)) {\n                    $fe6951fa85737307$var$eatSuffix(stream, 1);\n                    return $fe6951fa85737307$var$tokenChain(stream, state, [\n                        stream.eat(c)\n                    ], \"bracket\");\n                }\n            } else if (c == \"r\") {\n                c = $fe6951fa85737307$var$look(stream, 1);\n                if (c == \"(\") {\n                    $fe6951fa85737307$var$eatSuffix(stream, 2);\n                    return $fe6951fa85737307$var$tokenChain(stream, state, [\n                        \")\"\n                    ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n                }\n                if (c == \"[\") {\n                    $fe6951fa85737307$var$eatSuffix(stream, 2);\n                    return $fe6951fa85737307$var$tokenChain(stream, state, [\n                        \"]\"\n                    ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n                }\n                if (c == \"{\") {\n                    $fe6951fa85737307$var$eatSuffix(stream, 2);\n                    return $fe6951fa85737307$var$tokenChain(stream, state, [\n                        \"}\"\n                    ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n                }\n                if (c == \"<\") {\n                    $fe6951fa85737307$var$eatSuffix(stream, 2);\n                    return $fe6951fa85737307$var$tokenChain(stream, state, [\n                        \">\"\n                    ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n                }\n                if (/[\\^'\"!~\\/]/.test(c)) {\n                    $fe6951fa85737307$var$eatSuffix(stream, 1);\n                    return $fe6951fa85737307$var$tokenChain(stream, state, [\n                        stream.eat(c)\n                    ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n                }\n            } else if (/[\\^'\"!~\\/(\\[{<]/.test(c)) {\n                if (c == \"(\") {\n                    $fe6951fa85737307$var$eatSuffix(stream, 1);\n                    return $fe6951fa85737307$var$tokenChain(stream, state, [\n                        \")\"\n                    ], \"string\");\n                }\n                if (c == \"[\") {\n                    $fe6951fa85737307$var$eatSuffix(stream, 1);\n                    return $fe6951fa85737307$var$tokenChain(stream, state, [\n                        \"]\"\n                    ], \"string\");\n                }\n                if (c == \"{\") {\n                    $fe6951fa85737307$var$eatSuffix(stream, 1);\n                    return $fe6951fa85737307$var$tokenChain(stream, state, [\n                        \"}\"\n                    ], \"string\");\n                }\n                if (c == \"<\") {\n                    $fe6951fa85737307$var$eatSuffix(stream, 1);\n                    return $fe6951fa85737307$var$tokenChain(stream, state, [\n                        \">\"\n                    ], \"string\");\n                }\n                if (/[\\^'\"!~\\/]/.test(c)) return $fe6951fa85737307$var$tokenChain(stream, state, [\n                    stream.eat(c)\n                ], \"string\");\n            }\n        }\n    }\n    if (ch == \"m\") {\n        var c = $fe6951fa85737307$var$look(stream, -2);\n        if (!(c && /\\w/.test(c))) {\n            c = stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n            if (c) {\n                if (/[\\^'\"!~\\/]/.test(c)) return $fe6951fa85737307$var$tokenChain(stream, state, [\n                    c\n                ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n                if (c == \"(\") return $fe6951fa85737307$var$tokenChain(stream, state, [\n                    \")\"\n                ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n                if (c == \"[\") return $fe6951fa85737307$var$tokenChain(stream, state, [\n                    \"]\"\n                ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n                if (c == \"{\") return $fe6951fa85737307$var$tokenChain(stream, state, [\n                    \"}\"\n                ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n                if (c == \"<\") return $fe6951fa85737307$var$tokenChain(stream, state, [\n                    \">\"\n                ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n            }\n        }\n    }\n    if (ch == \"s\") {\n        var c = /[\\/>\\]})\\w]/.test($fe6951fa85737307$var$look(stream, -2));\n        if (!c) {\n            c = stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n            if (c) {\n                if (c == \"[\") return $fe6951fa85737307$var$tokenChain(stream, state, [\n                    \"]\",\n                    \"]\"\n                ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n                if (c == \"{\") return $fe6951fa85737307$var$tokenChain(stream, state, [\n                    \"}\",\n                    \"}\"\n                ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n                if (c == \"<\") return $fe6951fa85737307$var$tokenChain(stream, state, [\n                    \">\",\n                    \">\"\n                ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n                if (c == \"(\") return $fe6951fa85737307$var$tokenChain(stream, state, [\n                    \")\",\n                    \")\"\n                ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n                return $fe6951fa85737307$var$tokenChain(stream, state, [\n                    c,\n                    c\n                ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n            }\n        }\n    }\n    if (ch == \"y\") {\n        var c = /[\\/>\\]})\\w]/.test($fe6951fa85737307$var$look(stream, -2));\n        if (!c) {\n            c = stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n            if (c) {\n                if (c == \"[\") return $fe6951fa85737307$var$tokenChain(stream, state, [\n                    \"]\",\n                    \"]\"\n                ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n                if (c == \"{\") return $fe6951fa85737307$var$tokenChain(stream, state, [\n                    \"}\",\n                    \"}\"\n                ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n                if (c == \"<\") return $fe6951fa85737307$var$tokenChain(stream, state, [\n                    \">\",\n                    \">\"\n                ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n                if (c == \"(\") return $fe6951fa85737307$var$tokenChain(stream, state, [\n                    \")\",\n                    \")\"\n                ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n                return $fe6951fa85737307$var$tokenChain(stream, state, [\n                    c,\n                    c\n                ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n            }\n        }\n    }\n    if (ch == \"t\") {\n        var c = /[\\/>\\]})\\w]/.test($fe6951fa85737307$var$look(stream, -2));\n        if (!c) {\n            c = stream.eat(\"r\");\n            if (c) {\n                c = stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n                if (c) {\n                    if (c == \"[\") return $fe6951fa85737307$var$tokenChain(stream, state, [\n                        \"]\",\n                        \"]\"\n                    ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n                    if (c == \"{\") return $fe6951fa85737307$var$tokenChain(stream, state, [\n                        \"}\",\n                        \"}\"\n                    ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n                    if (c == \"<\") return $fe6951fa85737307$var$tokenChain(stream, state, [\n                        \">\",\n                        \">\"\n                    ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n                    if (c == \"(\") return $fe6951fa85737307$var$tokenChain(stream, state, [\n                        \")\",\n                        \")\"\n                    ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n                    return $fe6951fa85737307$var$tokenChain(stream, state, [\n                        c,\n                        c\n                    ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n                }\n            }\n        }\n    }\n    if (ch == \"`\") return $fe6951fa85737307$var$tokenChain(stream, state, [\n        ch\n    ], \"builtin\");\n    if (ch == \"/\") {\n        if (!/~\\s*$/.test($fe6951fa85737307$var$prefix(stream))) return \"operator\";\n        else return $fe6951fa85737307$var$tokenChain(stream, state, [\n            ch\n        ], $fe6951fa85737307$var$RXstyle, $fe6951fa85737307$var$RXmodifiers);\n    }\n    if (ch == \"$\") {\n        var p = stream.pos;\n        if (stream.eatWhile(/\\d/) || stream.eat(\"{\") && stream.eatWhile(/\\d/) && stream.eat(\"}\")) return \"builtin\";\n        else stream.pos = p;\n    }\n    if (/[$@%]/.test(ch)) {\n        var p = stream.pos;\n        if (stream.eat(\"^\") && stream.eat(/[A-Z]/) || !/[@$%&]/.test($fe6951fa85737307$var$look(stream, -2)) && stream.eat(/[=|\\\\\\-#?@;:&`~\\^!\\[\\]*'\"$+.,\\/<>()]/)) {\n            var c = stream.current();\n            if ($fe6951fa85737307$var$PERL[c]) return \"builtin\";\n        }\n        stream.pos = p;\n    }\n    if (/[$@%&]/.test(ch)) {\n        if (stream.eatWhile(/[\\w$]/) || stream.eat(\"{\") && stream.eatWhile(/[\\w$]/) && stream.eat(\"}\")) {\n            var c = stream.current();\n            if ($fe6951fa85737307$var$PERL[c]) return \"builtin\";\n            else return \"variable\";\n        }\n    }\n    if (ch == \"#\") {\n        if ($fe6951fa85737307$var$look(stream, -2) != \"$\") {\n            stream.skipToEnd();\n            return \"comment\";\n        }\n    }\n    if (/[:+\\-\\^*$&%@=<>!?|\\/~\\.]/.test(ch)) {\n        var p = stream.pos;\n        stream.eatWhile(/[:+\\-\\^*$&%@=<>!?|\\/~\\.]/);\n        if ($fe6951fa85737307$var$PERL[stream.current()]) return \"operator\";\n        else stream.pos = p;\n    }\n    if (ch == \"_\") {\n        if (stream.pos == 1) {\n            if ($fe6951fa85737307$var$suffix(stream, 6) == \"_END__\") return $fe6951fa85737307$var$tokenChain(stream, state, [\n                '\\0'\n            ], \"comment\");\n            else if ($fe6951fa85737307$var$suffix(stream, 7) == \"_DATA__\") return $fe6951fa85737307$var$tokenChain(stream, state, [\n                '\\0'\n            ], \"builtin\");\n            else if ($fe6951fa85737307$var$suffix(stream, 7) == \"_C__\") return $fe6951fa85737307$var$tokenChain(stream, state, [\n                '\\0'\n            ], \"string\");\n        }\n    }\n    if (/\\w/.test(ch)) {\n        var p = stream.pos;\n        if ($fe6951fa85737307$var$look(stream, -2) == \"{\" && ($fe6951fa85737307$var$look(stream, 0) == \"}\" || stream.eatWhile(/\\w/) && $fe6951fa85737307$var$look(stream, 0) == \"}\")) return \"string\";\n        else stream.pos = p;\n    }\n    if (/[A-Z]/.test(ch)) {\n        var l = $fe6951fa85737307$var$look(stream, -2);\n        var p = stream.pos;\n        stream.eatWhile(/[A-Z_]/);\n        if (/[\\da-z]/.test($fe6951fa85737307$var$look(stream, 0))) stream.pos = p;\n        else {\n            var c = $fe6951fa85737307$var$PERL[stream.current()];\n            if (!c) return \"meta\";\n            if (c[1]) c = c[0];\n            if (l != \":\") {\n                if (c == 1) return \"keyword\";\n                else if (c == 2) return \"def\";\n                else if (c == 3) return \"atom\";\n                else if (c == 4) return \"operator\";\n                else if (c == 5) return \"builtin\";\n                else return \"meta\";\n            } else return \"meta\";\n        }\n    }\n    if (/[a-zA-Z_]/.test(ch)) {\n        var l = $fe6951fa85737307$var$look(stream, -2);\n        stream.eatWhile(/\\w/);\n        var c = $fe6951fa85737307$var$PERL[stream.current()];\n        if (!c) return \"meta\";\n        if (c[1]) c = c[0];\n        if (l != \":\") {\n            if (c == 1) return \"keyword\";\n            else if (c == 2) return \"def\";\n            else if (c == 3) return \"atom\";\n            else if (c == 4) return \"operator\";\n            else if (c == 5) return \"builtin\";\n            else return \"meta\";\n        } else return \"meta\";\n    }\n    return null;\n}\nconst $fe6951fa85737307$export$f3198024f30e8d06 = {\n    name: \"perl\",\n    startState: function() {\n        return {\n            tokenize: $fe6951fa85737307$var$tokenPerl,\n            chain: null,\n            style: null,\n            tail: null\n        };\n    },\n    token: function(stream, state) {\n        return (state.tokenize || $fe6951fa85737307$var$tokenPerl)(stream, state);\n    },\n    languageData: {\n        commentTokens: {\n            line: \"#\"\n        },\n        wordChars: \"$\"\n    }\n};\n\n});\n\n\n//# sourceMappingURL=perl.2e942328.js.map\n","\n// it's like \"peek\", but need for look-ahead or look-behind if index < 0\nfunction look(stream, c){\n  return stream.string.charAt(stream.pos+(c||0));\n}\n\n// return a part of prefix of current stream from current position\nfunction prefix(stream, c){\n  if(c){\n    var x=stream.pos-c;\n    return stream.string.substr((x>=0?x:0),c);}\n  else{\n    return stream.string.substr(0,stream.pos-1);\n  }\n}\n\n// return a part of suffix of current stream from current position\nfunction suffix(stream, c){\n  var y=stream.string.length;\n  var x=y-stream.pos+1;\n  return stream.string.substr(stream.pos,(c&&c<y?c:x));\n}\n\n// eating and vomiting a part of stream from current position\nfunction eatSuffix(stream, c){\n  var x=stream.pos+c;\n  var y;\n  if(x<=0)\n    stream.pos=0;\n  else if(x>=(y=stream.string.length-1))\n    stream.pos=y;\n  else\n    stream.pos=x;\n}\n\n// http://perldoc.perl.org\nvar PERL={                                      //   null - magic touch\n  //   1 - keyword\n  //   2 - def\n  //   3 - atom\n  //   4 - operator\n  //   5 - builtin (predefined)\n  //   [x,y] - x=1,2,3; y=must be defined if x{...}\n  //      PERL operators\n  '->':   4,\n  '++':   4,\n  '--':   4,\n  '**':   4,\n  //   ! ~ \\ and unary + and -\n  '=~':   4,\n  '!~':   4,\n  '*':   4,\n  '/':   4,\n  '%':   4,\n  'x':   4,\n  '+':   4,\n  '-':   4,\n  '.':   4,\n  '<<':   4,\n  '>>':   4,\n  //   named unary operators\n  '<':   4,\n  '>':   4,\n  '<=':   4,\n  '>=':   4,\n  'lt':   4,\n  'gt':   4,\n  'le':   4,\n  'ge':   4,\n  '==':   4,\n  '!=':   4,\n  '<=>':   4,\n  'eq':   4,\n  'ne':   4,\n  'cmp':   4,\n  '~~':   4,\n  '&':   4,\n  '|':   4,\n  '^':   4,\n  '&&':   4,\n  '||':   4,\n  '//':   4,\n  '..':   4,\n  '...':   4,\n  '?':   4,\n  ':':   4,\n  '=':   4,\n  '+=':   4,\n  '-=':   4,\n  '*=':   4,  //   etc. ???\n  ',':   4,\n  '=>':   4,\n  '::':   4,\n  //   list operators (rightward)\n  'not':   4,\n  'and':   4,\n  'or':   4,\n  'xor':   4,\n  //      PERL predefined variables (I know, what this is a paranoid idea, but may be needed for people, who learn PERL, and for me as well, ...and may be for you?;)\n  'BEGIN':   [5,1],\n  'END':   [5,1],\n  'PRINT':   [5,1],\n  'PRINTF':   [5,1],\n  'GETC':   [5,1],\n  'READ':   [5,1],\n  'READLINE':   [5,1],\n  'DESTROY':   [5,1],\n  'TIE':   [5,1],\n  'TIEHANDLE':   [5,1],\n  'UNTIE':   [5,1],\n  'STDIN':    5,\n  'STDIN_TOP':    5,\n  'STDOUT':    5,\n  'STDOUT_TOP':    5,\n  'STDERR':    5,\n  'STDERR_TOP':    5,\n  '$ARG':    5,\n  '$_':    5,\n  '@ARG':    5,\n  '@_':    5,\n  '$LIST_SEPARATOR':    5,\n  '$\"':    5,\n  '$PROCESS_ID':    5,\n  '$PID':    5,\n  '$$':    5,\n  '$REAL_GROUP_ID':    5,\n  '$GID':    5,\n  '$(':    5,\n  '$EFFECTIVE_GROUP_ID':    5,\n  '$EGID':    5,\n  '$)':    5,\n  '$PROGRAM_NAME':    5,\n  '$0':    5,\n  '$SUBSCRIPT_SEPARATOR':    5,\n  '$SUBSEP':    5,\n  '$;':    5,\n  '$REAL_USER_ID':    5,\n  '$UID':    5,\n  '$<':    5,\n  '$EFFECTIVE_USER_ID':    5,\n  '$EUID':    5,\n  '$>':    5,\n  '$a':    5,\n  '$b':    5,\n  '$COMPILING':    5,\n  '$^C':    5,\n  '$DEBUGGING':    5,\n  '$^D':    5,\n  '${^ENCODING}':    5,\n  '$ENV':    5,\n  '%ENV':    5,\n  '$SYSTEM_FD_MAX':    5,\n  '$^F':    5,\n  '@F':    5,\n  '${^GLOBAL_PHASE}':    5,\n  '$^H':    5,\n  '%^H':    5,\n  '@INC':    5,\n  '%INC':    5,\n  '$INPLACE_EDIT':    5,\n  '$^I':    5,\n  '$^M':    5,\n  '$OSNAME':    5,\n  '$^O':    5,\n  '${^OPEN}':    5,\n  '$PERLDB':    5,\n  '$^P':    5,\n  '$SIG':    5,\n  '%SIG':    5,\n  '$BASETIME':    5,\n  '$^T':    5,\n  '${^TAINT}':    5,\n  '${^UNICODE}':    5,\n  '${^UTF8CACHE}':    5,\n  '${^UTF8LOCALE}':    5,\n  '$PERL_VERSION':    5,\n  '$^V':    5,\n  '${^WIN32_SLOPPY_STAT}':    5,\n  '$EXECUTABLE_NAME':    5,\n  '$^X':    5,\n  '$1':    5, // - regexp $1, $2...\n  '$MATCH':    5,\n  '$&':    5,\n  '${^MATCH}':    5,\n  '$PREMATCH':    5,\n  '$`':    5,\n  '${^PREMATCH}':    5,\n  '$POSTMATCH':    5,\n  \"$'\":    5,\n  '${^POSTMATCH}':    5,\n  '$LAST_PAREN_MATCH':    5,\n  '$+':    5,\n  '$LAST_SUBMATCH_RESULT':    5,\n  '$^N':    5,\n  '@LAST_MATCH_END':    5,\n  '@+':    5,\n  '%LAST_PAREN_MATCH':    5,\n  '%+':    5,\n  '@LAST_MATCH_START':    5,\n  '@-':    5,\n  '%LAST_MATCH_START':    5,\n  '%-':    5,\n  '$LAST_REGEXP_CODE_RESULT':    5,\n  '$^R':    5,\n  '${^RE_DEBUG_FLAGS}':    5,\n  '${^RE_TRIE_MAXBUF}':    5,\n  '$ARGV':    5,\n  '@ARGV':    5,\n  'ARGV':    5,\n  'ARGVOUT':    5,\n  '$OUTPUT_FIELD_SEPARATOR':    5,\n  '$OFS':    5,\n  '$,':    5,\n  '$INPUT_LINE_NUMBER':    5,\n  '$NR':    5,\n  '$.':    5,\n  '$INPUT_RECORD_SEPARATOR':    5,\n  '$RS':    5,\n  '$/':    5,\n  '$OUTPUT_RECORD_SEPARATOR':    5,\n  '$ORS':    5,\n  '$\\\\':    5,\n  '$OUTPUT_AUTOFLUSH':    5,\n  '$|':    5,\n  '$ACCUMULATOR':    5,\n  '$^A':    5,\n  '$FORMAT_FORMFEED':    5,\n  '$^L':    5,\n  '$FORMAT_PAGE_NUMBER':    5,\n  '$%':    5,\n  '$FORMAT_LINES_LEFT':    5,\n  '$-':    5,\n  '$FORMAT_LINE_BREAK_CHARACTERS':    5,\n  '$:':    5,\n  '$FORMAT_LINES_PER_PAGE':    5,\n  '$=':    5,\n  '$FORMAT_TOP_NAME':    5,\n  '$^':    5,\n  '$FORMAT_NAME':    5,\n  '$~':    5,\n  '${^CHILD_ERROR_NATIVE}':    5,\n  '$EXTENDED_OS_ERROR':    5,\n  '$^E':    5,\n  '$EXCEPTIONS_BEING_CAUGHT':    5,\n  '$^S':    5,\n  '$WARNING':    5,\n  '$^W':    5,\n  '${^WARNING_BITS}':    5,\n  '$OS_ERROR':    5,\n  '$ERRNO':    5,\n  '$!':    5,\n  '%OS_ERROR':    5,\n  '%ERRNO':    5,\n  '%!':    5,\n  '$CHILD_ERROR':    5,\n  '$?':    5,\n  '$EVAL_ERROR':    5,\n  '$@':    5,\n  '$OFMT':    5,\n  '$#':    5,\n  '$*':    5,\n  '$ARRAY_BASE':    5,\n  '$[':    5,\n  '$OLD_PERL_VERSION':    5,\n  '$]':    5,\n  //      PERL blocks\n  'if':[1,1],\n  elsif:[1,1],\n  'else':[1,1],\n  'while':[1,1],\n  unless:[1,1],\n  'for':[1,1],\n  foreach:[1,1],\n  //      PERL functions\n  'abs':1,     // - absolute value function\n  accept:1,     // - accept an incoming socket connect\n  alarm:1,     // - schedule a SIGALRM\n  'atan2':1,     // - arctangent of Y/X in the range -PI to PI\n  bind:1,     // - binds an address to a socket\n  binmode:1,     // - prepare binary files for I/O\n  bless:1,     // - create an object\n  bootstrap:1,     //\n  'break':1,     // - break out of a \"given\" block\n  caller:1,     // - get context of the current subroutine call\n  chdir:1,     // - change your current working directory\n  chmod:1,     // - changes the permissions on a list of files\n  chomp:1,     // - remove a trailing record separator from a string\n  chop:1,     // - remove the last character from a string\n  chown:1,     // - change the ownership on a list of files\n  chr:1,     // - get character this number represents\n  chroot:1,     // - make directory new root for path lookups\n  close:1,     // - close file (or pipe or socket) handle\n  closedir:1,     // - close directory handle\n  connect:1,     // - connect to a remote socket\n  'continue':[1,1], // - optional trailing block in a while or foreach\n  'cos':1,     // - cosine function\n  crypt:1,     // - one-way passwd-style encryption\n  dbmclose:1,     // - breaks binding on a tied dbm file\n  dbmopen:1,     // - create binding on a tied dbm file\n  'default':1,     //\n  defined:1,     // - test whether a value, variable, or function is defined\n  'delete':1,     // - deletes a value from a hash\n  die:1,     // - raise an exception or bail out\n  'do':1,     // - turn a BLOCK into a TERM\n  dump:1,     // - create an immediate core dump\n  each:1,     // - retrieve the next key/value pair from a hash\n  endgrent:1,     // - be done using group file\n  endhostent:1,     // - be done using hosts file\n  endnetent:1,     // - be done using networks file\n  endprotoent:1,     // - be done using protocols file\n  endpwent:1,     // - be done using passwd file\n  endservent:1,     // - be done using services file\n  eof:1,     // - test a filehandle for its end\n  'eval':1,     // - catch exceptions or compile and run code\n  'exec':1,     // - abandon this program to run another\n  exists:1,     // - test whether a hash key is present\n  exit:1,     // - terminate this program\n  'exp':1,     // - raise I to a power\n  fcntl:1,     // - file control system call\n  fileno:1,     // - return file descriptor from filehandle\n  flock:1,     // - lock an entire file with an advisory lock\n  fork:1,     // - create a new process just like this one\n  format:1,     // - declare a picture format with use by the write() function\n  formline:1,     // - internal function used for formats\n  getc:1,     // - get the next character from the filehandle\n  getgrent:1,     // - get next group record\n  getgrgid:1,     // - get group record given group user ID\n  getgrnam:1,     // - get group record given group name\n  gethostbyaddr:1,     // - get host record given its address\n  gethostbyname:1,     // - get host record given name\n  gethostent:1,     // - get next hosts record\n  getlogin:1,     // - return who logged in at this tty\n  getnetbyaddr:1,     // - get network record given its address\n  getnetbyname:1,     // - get networks record given name\n  getnetent:1,     // - get next networks record\n  getpeername:1,     // - find the other end of a socket connection\n  getpgrp:1,     // - get process group\n  getppid:1,     // - get parent process ID\n  getpriority:1,     // - get current nice value\n  getprotobyname:1,     // - get protocol record given name\n  getprotobynumber:1,     // - get protocol record numeric protocol\n  getprotoent:1,     // - get next protocols record\n  getpwent:1,     // - get next passwd record\n  getpwnam:1,     // - get passwd record given user login name\n  getpwuid:1,     // - get passwd record given user ID\n  getservbyname:1,     // - get services record given its name\n  getservbyport:1,     // - get services record given numeric port\n  getservent:1,     // - get next services record\n  getsockname:1,     // - retrieve the sockaddr for a given socket\n  getsockopt:1,     // - get socket options on a given socket\n  given:1,     //\n  glob:1,     // - expand filenames using wildcards\n  gmtime:1,     // - convert UNIX time into record or string using Greenwich time\n  'goto':1,     // - create spaghetti code\n  grep:1,     // - locate elements in a list test true against a given criterion\n  hex:1,     // - convert a string to a hexadecimal number\n  'import':1,     // - patch a module's namespace into your own\n  index:1,     // - find a substring within a string\n  'int':1,     // - get the integer portion of a number\n  ioctl:1,     // - system-dependent device control system call\n  'join':1,     // - join a list into a string using a separator\n  keys:1,     // - retrieve list of indices from a hash\n  kill:1,     // - send a signal to a process or process group\n  last:1,     // - exit a block prematurely\n  lc:1,     // - return lower-case version of a string\n  lcfirst:1,     // - return a string with just the next letter in lower case\n  length:1,     // - return the number of bytes in a string\n  'link':1,     // - create a hard link in the filesystem\n  listen:1,     // - register your socket as a server\n  local: 2,    // - create a temporary value for a global variable (dynamic scoping)\n  localtime:1,     // - convert UNIX time into record or string using local time\n  lock:1,     // - get a thread lock on a variable, subroutine, or method\n  'log':1,     // - retrieve the natural logarithm for a number\n  lstat:1,     // - stat a symbolic link\n  m:null,  // - match a string with a regular expression pattern\n  map:1,     // - apply a change to a list to get back a new list with the changes\n  mkdir:1,     // - create a directory\n  msgctl:1,     // - SysV IPC message control operations\n  msgget:1,     // - get SysV IPC message queue\n  msgrcv:1,     // - receive a SysV IPC message from a message queue\n  msgsnd:1,     // - send a SysV IPC message to a message queue\n  my: 2,    // - declare and assign a local variable (lexical scoping)\n  'new':1,     //\n  next:1,     // - iterate a block prematurely\n  no:1,     // - unimport some module symbols or semantics at compile time\n  oct:1,     // - convert a string to an octal number\n  open:1,     // - open a file, pipe, or descriptor\n  opendir:1,     // - open a directory\n  ord:1,     // - find a character's numeric representation\n  our: 2,    // - declare and assign a package variable (lexical scoping)\n  pack:1,     // - convert a list into a binary representation\n  'package':1,     // - declare a separate global namespace\n  pipe:1,     // - open a pair of connected filehandles\n  pop:1,     // - remove the last element from an array and return it\n  pos:1,     // - find or set the offset for the last/next m//g search\n  print:1,     // - output a list to a filehandle\n  printf:1,     // - output a formatted list to a filehandle\n  prototype:1,     // - get the prototype (if any) of a subroutine\n  push:1,     // - append one or more elements to an array\n  q:null,  // - singly quote a string\n  qq:null,  // - doubly quote a string\n  qr:null,  // - Compile pattern\n  quotemeta:null,  // - quote regular expression magic characters\n  qw:null,  // - quote a list of words\n  qx:null,  // - backquote quote a string\n  rand:1,     // - retrieve the next pseudorandom number\n  read:1,     // - fixed-length buffered input from a filehandle\n  readdir:1,     // - get a directory from a directory handle\n  readline:1,     // - fetch a record from a file\n  readlink:1,     // - determine where a symbolic link is pointing\n  readpipe:1,     // - execute a system command and collect standard output\n  recv:1,     // - receive a message over a Socket\n  redo:1,     // - start this loop iteration over again\n  ref:1,     // - find out the type of thing being referenced\n  rename:1,     // - change a filename\n  require:1,     // - load in external functions from a library at runtime\n  reset:1,     // - clear all variables of a given name\n  'return':1,     // - get out of a function early\n  reverse:1,     // - flip a string or a list\n  rewinddir:1,     // - reset directory handle\n  rindex:1,     // - right-to-left substring search\n  rmdir:1,     // - remove a directory\n  s:null,  // - replace a pattern with a string\n  say:1,     // - print with newline\n  scalar:1,     // - force a scalar context\n  seek:1,     // - reposition file pointer for random-access I/O\n  seekdir:1,     // - reposition directory pointer\n  select:1,     // - reset default output or do I/O multiplexing\n  semctl:1,     // - SysV semaphore control operations\n  semget:1,     // - get set of SysV semaphores\n  semop:1,     // - SysV semaphore operations\n  send:1,     // - send a message over a socket\n  setgrent:1,     // - prepare group file for use\n  sethostent:1,     // - prepare hosts file for use\n  setnetent:1,     // - prepare networks file for use\n  setpgrp:1,     // - set the process group of a process\n  setpriority:1,     // - set a process's nice value\n  setprotoent:1,     // - prepare protocols file for use\n  setpwent:1,     // - prepare passwd file for use\n  setservent:1,     // - prepare services file for use\n  setsockopt:1,     // - set some socket options\n  shift:1,     // - remove the first element of an array, and return it\n  shmctl:1,     // - SysV shared memory operations\n  shmget:1,     // - get SysV shared memory segment identifier\n  shmread:1,     // - read SysV shared memory\n  shmwrite:1,     // - write SysV shared memory\n  shutdown:1,     // - close down just half of a socket connection\n  'sin':1,     // - return the sine of a number\n  sleep:1,     // - block for some number of seconds\n  socket:1,     // - create a socket\n  socketpair:1,     // - create a pair of sockets\n  'sort':1,     // - sort a list of values\n  splice:1,     // - add or remove elements anywhere in an array\n  'split':1,     // - split up a string using a regexp delimiter\n  sprintf:1,     // - formatted print into a string\n  'sqrt':1,     // - square root function\n  srand:1,     // - seed the random number generator\n  stat:1,     // - get a file's status information\n  state:1,     // - declare and assign a state variable (persistent lexical scoping)\n  study:1,     // - optimize input data for repeated searches\n  'sub':1,     // - declare a subroutine, possibly anonymously\n  'substr':1,     // - get or alter a portion of a string\n  symlink:1,     // - create a symbolic link to a file\n  syscall:1,     // - execute an arbitrary system call\n  sysopen:1,     // - open a file, pipe, or descriptor\n  sysread:1,     // - fixed-length unbuffered input from a filehandle\n  sysseek:1,     // - position I/O pointer on handle used with sysread and syswrite\n  system:1,     // - run a separate program\n  syswrite:1,     // - fixed-length unbuffered output to a filehandle\n  tell:1,     // - get current seekpointer on a filehandle\n  telldir:1,     // - get current seekpointer on a directory handle\n  tie:1,     // - bind a variable to an object class\n  tied:1,     // - get a reference to the object underlying a tied variable\n  time:1,     // - return number of seconds since 1970\n  times:1,     // - return elapsed time for self and child processes\n  tr:null,  // - transliterate a string\n  truncate:1,     // - shorten a file\n  uc:1,     // - return upper-case version of a string\n  ucfirst:1,     // - return a string with just the next letter in upper case\n  umask:1,     // - set file creation mode mask\n  undef:1,     // - remove a variable or function definition\n  unlink:1,     // - remove one link to a file\n  unpack:1,     // - convert binary structure into normal perl variables\n  unshift:1,     // - prepend more elements to the beginning of a list\n  untie:1,     // - break a tie binding to a variable\n  use:1,     // - load in a module at compile time\n  utime:1,     // - set a file's last access and modify times\n  values:1,     // - return a list of the values in a hash\n  vec:1,     // - test or set particular bits in a string\n  wait:1,     // - wait for any child process to die\n  waitpid:1,     // - wait for a particular child process to die\n  wantarray:1,     // - get void vs scalar vs list context of current subroutine call\n  warn:1,     // - print debugging info\n  when:1,     //\n  write:1,     // - print a picture record\n  y:null}; // - transliterate a string\n\nvar RXstyle=\"string.special\";\nvar RXmodifiers=/[goseximacplud]/;              // NOTE: \"m\", \"s\", \"y\" and \"tr\" need to correct real modifiers for each regexp type\n\nfunction tokenChain(stream,state,chain,style,tail){     // NOTE: chain.length > 2 is not working now (it's for s[...][...]geos;)\n  state.chain=null;                               //                                                          12   3tail\n  state.style=null;\n  state.tail=null;\n  state.tokenize=function(stream,state){\n    var e=false,c,i=0;\n    while(c=stream.next()){\n      if(c===chain[i]&&!e){\n        if(chain[++i]!==undefined){\n          state.chain=chain[i];\n          state.style=style;\n          state.tail=tail;}\n        else if(tail)\n          stream.eatWhile(tail);\n        state.tokenize=tokenPerl;\n        return style;}\n      e=!e&&c==\"\\\\\";}\n    return style;};\n  return state.tokenize(stream,state);}\n\nfunction tokenSOMETHING(stream,state,string){\n  state.tokenize=function(stream,state){\n    if(stream.string==string)\n      state.tokenize=tokenPerl;\n    stream.skipToEnd();\n    return \"string\";};\n  return state.tokenize(stream,state);}\n\nfunction tokenPerl(stream,state){\n  if(stream.eatSpace())\n    return null;\n  if(state.chain)\n    return tokenChain(stream,state,state.chain,state.style,state.tail);\n  if(stream.match(/^(\\-?((\\d[\\d_]*)?\\.\\d+(e[+-]?\\d+)?|\\d+\\.\\d*)|0x[\\da-fA-F_]+|0b[01_]+|\\d[\\d_]*(e[+-]?\\d+)?)/))\n    return 'number';\n  if(stream.match(/^<<(?=[_a-zA-Z])/)){                  // NOTE: <<SOMETHING\\n...\\nSOMETHING\\n\n    stream.eatWhile(/\\w/);\n    return tokenSOMETHING(stream,state,stream.current().substr(2));}\n  if(stream.sol()&&stream.match(/^\\=item(?!\\w)/)){// NOTE: \\n=item...\\n=cut\\n\n    return tokenSOMETHING(stream,state,'=cut');}\n  var ch=stream.next();\n  if(ch=='\"'||ch==\"'\"){                           // NOTE: ' or \" or <<'SOMETHING'\\n...\\nSOMETHING\\n or <<\"SOMETHING\"\\n...\\nSOMETHING\\n\n    if(prefix(stream, 3)==\"<<\"+ch){\n      var p=stream.pos;\n      stream.eatWhile(/\\w/);\n      var n=stream.current().substr(1);\n      if(n&&stream.eat(ch))\n        return tokenSOMETHING(stream,state,n);\n      stream.pos=p;}\n    return tokenChain(stream,state,[ch],\"string\");}\n  if(ch==\"q\"){\n    var c=look(stream, -2);\n    if(!(c&&/\\w/.test(c))){\n      c=look(stream, 0);\n      if(c==\"x\"){\n        c=look(stream, 1);\n        if(c==\"(\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\")\"],RXstyle,RXmodifiers);}\n        if(c==\"[\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\"]\"],RXstyle,RXmodifiers);}\n        if(c==\"{\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\"}\"],RXstyle,RXmodifiers);}\n        if(c==\"<\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\">\"],RXstyle,RXmodifiers);}\n        if(/[\\^'\"!~\\/]/.test(c)){\n          eatSuffix(stream, 1);\n          return tokenChain(stream,state,[stream.eat(c)],RXstyle,RXmodifiers);}}\n      else if(c==\"q\"){\n        c=look(stream, 1);\n        if(c==\"(\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\")\"],\"string\");}\n        if(c==\"[\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\"]\"],\"string\");}\n        if(c==\"{\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\"}\"],\"string\");}\n        if(c==\"<\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\">\"],\"string\");}\n        if(/[\\^'\"!~\\/]/.test(c)){\n          eatSuffix(stream, 1);\n          return tokenChain(stream,state,[stream.eat(c)],\"string\");}}\n      else if(c==\"w\"){\n        c=look(stream, 1);\n        if(c==\"(\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\")\"],\"bracket\");}\n        if(c==\"[\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\"]\"],\"bracket\");}\n        if(c==\"{\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\"}\"],\"bracket\");}\n        if(c==\"<\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\">\"],\"bracket\");}\n        if(/[\\^'\"!~\\/]/.test(c)){\n          eatSuffix(stream, 1);\n          return tokenChain(stream,state,[stream.eat(c)],\"bracket\");}}\n      else if(c==\"r\"){\n        c=look(stream, 1);\n        if(c==\"(\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\")\"],RXstyle,RXmodifiers);}\n        if(c==\"[\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\"]\"],RXstyle,RXmodifiers);}\n        if(c==\"{\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\"}\"],RXstyle,RXmodifiers);}\n        if(c==\"<\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\">\"],RXstyle,RXmodifiers);}\n        if(/[\\^'\"!~\\/]/.test(c)){\n          eatSuffix(stream, 1);\n          return tokenChain(stream,state,[stream.eat(c)],RXstyle,RXmodifiers);}}\n      else if(/[\\^'\"!~\\/(\\[{<]/.test(c)){\n        if(c==\"(\"){\n          eatSuffix(stream, 1);\n          return tokenChain(stream,state,[\")\"],\"string\");}\n        if(c==\"[\"){\n          eatSuffix(stream, 1);\n          return tokenChain(stream,state,[\"]\"],\"string\");}\n        if(c==\"{\"){\n          eatSuffix(stream, 1);\n          return tokenChain(stream,state,[\"}\"],\"string\");}\n        if(c==\"<\"){\n          eatSuffix(stream, 1);\n          return tokenChain(stream,state,[\">\"],\"string\");}\n        if(/[\\^'\"!~\\/]/.test(c)){\n          return tokenChain(stream,state,[stream.eat(c)],\"string\");}}}}\n  if(ch==\"m\"){\n    var c=look(stream, -2);\n    if(!(c&&/\\w/.test(c))){\n      c=stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n      if(c){\n        if(/[\\^'\"!~\\/]/.test(c)){\n          return tokenChain(stream,state,[c],RXstyle,RXmodifiers);}\n        if(c==\"(\"){\n          return tokenChain(stream,state,[\")\"],RXstyle,RXmodifiers);}\n        if(c==\"[\"){\n          return tokenChain(stream,state,[\"]\"],RXstyle,RXmodifiers);}\n        if(c==\"{\"){\n          return tokenChain(stream,state,[\"}\"],RXstyle,RXmodifiers);}\n        if(c==\"<\"){\n          return tokenChain(stream,state,[\">\"],RXstyle,RXmodifiers);}}}}\n  if(ch==\"s\"){\n    var c=/[\\/>\\]})\\w]/.test(look(stream, -2));\n    if(!c){\n      c=stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n      if(c){\n        if(c==\"[\")\n          return tokenChain(stream,state,[\"]\",\"]\"],RXstyle,RXmodifiers);\n        if(c==\"{\")\n          return tokenChain(stream,state,[\"}\",\"}\"],RXstyle,RXmodifiers);\n        if(c==\"<\")\n          return tokenChain(stream,state,[\">\",\">\"],RXstyle,RXmodifiers);\n        if(c==\"(\")\n          return tokenChain(stream,state,[\")\",\")\"],RXstyle,RXmodifiers);\n        return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}\n  if(ch==\"y\"){\n    var c=/[\\/>\\]})\\w]/.test(look(stream, -2));\n    if(!c){\n      c=stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n      if(c){\n        if(c==\"[\")\n          return tokenChain(stream,state,[\"]\",\"]\"],RXstyle,RXmodifiers);\n        if(c==\"{\")\n          return tokenChain(stream,state,[\"}\",\"}\"],RXstyle,RXmodifiers);\n        if(c==\"<\")\n          return tokenChain(stream,state,[\">\",\">\"],RXstyle,RXmodifiers);\n        if(c==\"(\")\n          return tokenChain(stream,state,[\")\",\")\"],RXstyle,RXmodifiers);\n        return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}\n  if(ch==\"t\"){\n    var c=/[\\/>\\]})\\w]/.test(look(stream, -2));\n    if(!c){\n      c=stream.eat(\"r\");if(c){\n        c=stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n        if(c){\n          if(c==\"[\")\n            return tokenChain(stream,state,[\"]\",\"]\"],RXstyle,RXmodifiers);\n          if(c==\"{\")\n            return tokenChain(stream,state,[\"}\",\"}\"],RXstyle,RXmodifiers);\n          if(c==\"<\")\n            return tokenChain(stream,state,[\">\",\">\"],RXstyle,RXmodifiers);\n          if(c==\"(\")\n            return tokenChain(stream,state,[\")\",\")\"],RXstyle,RXmodifiers);\n          return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}}\n  if(ch==\"`\"){\n    return tokenChain(stream,state,[ch],\"builtin\");}\n  if(ch==\"/\"){\n    if(!/~\\s*$/.test(prefix(stream)))\n      return \"operator\";\n    else\n      return tokenChain(stream,state,[ch],RXstyle,RXmodifiers);}\n  if(ch==\"$\"){\n    var p=stream.pos;\n    if(stream.eatWhile(/\\d/)||stream.eat(\"{\")&&stream.eatWhile(/\\d/)&&stream.eat(\"}\"))\n      return \"builtin\";\n    else\n      stream.pos=p;}\n  if(/[$@%]/.test(ch)){\n    var p=stream.pos;\n    if(stream.eat(\"^\")&&stream.eat(/[A-Z]/)||!/[@$%&]/.test(look(stream, -2))&&stream.eat(/[=|\\\\\\-#?@;:&`~\\^!\\[\\]*'\"$+.,\\/<>()]/)){\n      var c=stream.current();\n      if(PERL[c])\n        return \"builtin\";}\n    stream.pos=p;}\n  if(/[$@%&]/.test(ch)){\n    if(stream.eatWhile(/[\\w$]/)||stream.eat(\"{\")&&stream.eatWhile(/[\\w$]/)&&stream.eat(\"}\")){\n      var c=stream.current();\n      if(PERL[c])\n        return \"builtin\";\n      else\n        return \"variable\";}}\n  if(ch==\"#\"){\n    if(look(stream, -2)!=\"$\"){\n      stream.skipToEnd();\n      return \"comment\";}}\n  if(/[:+\\-\\^*$&%@=<>!?|\\/~\\.]/.test(ch)){\n    var p=stream.pos;\n    stream.eatWhile(/[:+\\-\\^*$&%@=<>!?|\\/~\\.]/);\n    if(PERL[stream.current()])\n      return \"operator\";\n    else\n      stream.pos=p;}\n  if(ch==\"_\"){\n    if(stream.pos==1){\n      if(suffix(stream, 6)==\"_END__\"){\n        return tokenChain(stream,state,['\\0'],\"comment\");}\n      else if(suffix(stream, 7)==\"_DATA__\"){\n        return tokenChain(stream,state,['\\0'],\"builtin\");}\n      else if(suffix(stream, 7)==\"_C__\"){\n        return tokenChain(stream,state,['\\0'],\"string\");}}}\n  if(/\\w/.test(ch)){\n    var p=stream.pos;\n    if(look(stream, -2)==\"{\"&&(look(stream, 0)==\"}\"||stream.eatWhile(/\\w/)&&look(stream, 0)==\"}\"))\n      return \"string\";\n    else\n      stream.pos=p;}\n  if(/[A-Z]/.test(ch)){\n    var l=look(stream, -2);\n    var p=stream.pos;\n    stream.eatWhile(/[A-Z_]/);\n    if(/[\\da-z]/.test(look(stream, 0))){\n      stream.pos=p;}\n    else{\n      var c=PERL[stream.current()];\n      if(!c)\n        return \"meta\";\n      if(c[1])\n        c=c[0];\n      if(l!=\":\"){\n        if(c==1)\n          return \"keyword\";\n        else if(c==2)\n          return \"def\";\n        else if(c==3)\n          return \"atom\";\n        else if(c==4)\n          return \"operator\";\n        else if(c==5)\n          return \"builtin\";\n        else\n          return \"meta\";}\n      else\n        return \"meta\";}}\n  if(/[a-zA-Z_]/.test(ch)){\n    var l=look(stream, -2);\n    stream.eatWhile(/\\w/);\n    var c=PERL[stream.current()];\n    if(!c)\n      return \"meta\";\n    if(c[1])\n      c=c[0];\n    if(l!=\":\"){\n      if(c==1)\n        return \"keyword\";\n      else if(c==2)\n        return \"def\";\n      else if(c==3)\n        return \"atom\";\n      else if(c==4)\n        return \"operator\";\n      else if(c==5)\n        return \"builtin\";\n      else\n        return \"meta\";}\n    else\n      return \"meta\";}\n  return null;}\n\nexport const perl = {\n  name: \"perl\",\n\n  startState: function() {\n    return {\n      tokenize: tokenPerl,\n      chain: null,\n      style: null,\n      tail: null\n    };\n  },\n  token: function(stream, state) {\n    return (state.tokenize || tokenPerl)(stream, state);\n  },\n  languageData: {\n    commentTokens: {line: \"#\"},\n    wordChars: \"$\"\n  }\n};\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","$fe6951fa85737307$var$look","stream","c","string","charAt","pos","$fe6951fa85737307$var$prefix","substr","x","$fe6951fa85737307$var$suffix","y","length","$fe6951fa85737307$var$eatSuffix","Object","defineProperty","get","$fe6951fa85737307$export$f3198024f30e8d06","set","s","enumerable","configurable","$fe6951fa85737307$var$PERL","elsif","unless","foreach","accept","alarm","bind","binmode","bless","bootstrap","caller","chdir","chmod","chomp","chop","chown","chr","chroot","close","closedir","connect","crypt","dbmclose","dbmopen","defined","die","dump","each","endgrent","endhostent","endnetent","endprotoent","endpwent","endservent","eof","exists","exit","fcntl","fileno","flock","fork","format","formline","getc","getgrent","getgrgid","getgrnam","gethostbyaddr","gethostbyname","gethostent","getlogin","getnetbyaddr","getnetbyname","getnetent","getpeername","getpgrp","getppid","getpriority","getprotobyname","getprotobynumber","getprotoent","getpwent","getpwnam","getpwuid","getservbyname","getservbyport","getservent","getsockname","getsockopt","given","glob","gmtime","grep","hex","index","ioctl","keys","kill","last","lc","lcfirst","listen","local","localtime","lock","lstat","m","map","mkdir","msgctl","msgget","msgrcv","msgsnd","my","next","no","oct","open","opendir","ord","our","pack","pipe","pop","print","printf","prototype","push","q","qq","qr","quotemeta","qw","qx","rand","read","readdir","readline","readlink","readpipe","recv","redo","ref","rename","require","reset","reverse","rewinddir","rindex","rmdir","say","scalar","seek","seekdir","select","semctl","semget","semop","send","setgrent","sethostent","setnetent","setpgrp","setpriority","setprotoent","setpwent","setservent","setsockopt","shift","shmctl","shmget","shmread","shmwrite","shutdown","sleep","socket","socketpair","splice","sprintf","srand","stat","state","study","symlink","syscall","sysopen","sysread","sysseek","system","syswrite","tell","telldir","tie","tied","time","times","tr","truncate","uc","ucfirst","umask","undef","unlink","unpack","unshift","untie","use","utime","values","vec","wait","waitpid","wantarray","warn","when","write","$fe6951fa85737307$var$RXstyle","$fe6951fa85737307$var$RXmodifiers","$fe6951fa85737307$var$tokenChain","chain","style","tail","tokenize","e","i","undefined","eatWhile","$fe6951fa85737307$var$tokenPerl","$fe6951fa85737307$var$tokenSOMETHING","skipToEnd","eatSpace","match","current","sol","ch","p","n","eat","test","l","name","startState","token","languageData","commentTokens","line","wordChars"],"version":3,"file":"perl.2e942328.js.map"}