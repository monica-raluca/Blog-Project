{"mappings":"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","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/r.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"7RFNU\", function(module, exports) {\n\n$parcel$export(module.exports, \"r\", () => $5b9de906c9e7d1ad$export$43caf9889c228507);\nfunction $5b9de906c9e7d1ad$var$wordObj(words) {\n    var res = {};\n    for(var i = 0; i < words.length; ++i)res[words[i]] = true;\n    return res;\n}\nvar $5b9de906c9e7d1ad$var$commonAtoms = [\n    \"NULL\",\n    \"NA\",\n    \"Inf\",\n    \"NaN\",\n    \"NA_integer_\",\n    \"NA_real_\",\n    \"NA_complex_\",\n    \"NA_character_\",\n    \"TRUE\",\n    \"FALSE\"\n];\nvar $5b9de906c9e7d1ad$var$commonBuiltins = [\n    \"list\",\n    \"quote\",\n    \"bquote\",\n    \"eval\",\n    \"return\",\n    \"call\",\n    \"parse\",\n    \"deparse\"\n];\nvar $5b9de906c9e7d1ad$var$commonKeywords = [\n    \"if\",\n    \"else\",\n    \"repeat\",\n    \"while\",\n    \"function\",\n    \"for\",\n    \"in\",\n    \"next\",\n    \"break\"\n];\nvar $5b9de906c9e7d1ad$var$commonBlockKeywords = [\n    \"if\",\n    \"else\",\n    \"repeat\",\n    \"while\",\n    \"function\",\n    \"for\"\n];\nvar $5b9de906c9e7d1ad$var$atoms = $5b9de906c9e7d1ad$var$wordObj($5b9de906c9e7d1ad$var$commonAtoms);\nvar $5b9de906c9e7d1ad$var$builtins = $5b9de906c9e7d1ad$var$wordObj($5b9de906c9e7d1ad$var$commonBuiltins);\nvar $5b9de906c9e7d1ad$var$keywords = $5b9de906c9e7d1ad$var$wordObj($5b9de906c9e7d1ad$var$commonKeywords);\nvar $5b9de906c9e7d1ad$var$blockkeywords = $5b9de906c9e7d1ad$var$wordObj($5b9de906c9e7d1ad$var$commonBlockKeywords);\nvar $5b9de906c9e7d1ad$var$opChars = /[+\\-*\\/^<>=!&|~$:]/;\nvar $5b9de906c9e7d1ad$var$curPunc;\nfunction $5b9de906c9e7d1ad$var$tokenBase(stream, state) {\n    $5b9de906c9e7d1ad$var$curPunc = null;\n    var ch = stream.next();\n    if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n    } else if (ch == \"0\" && stream.eat(\"x\")) {\n        stream.eatWhile(/[\\da-f]/i);\n        return \"number\";\n    } else if (ch == \".\" && stream.eat(/\\d/)) {\n        stream.match(/\\d*(?:e[+\\-]?\\d+)?/);\n        return \"number\";\n    } else if (/\\d/.test(ch)) {\n        stream.match(/\\d*(?:\\.\\d+)?(?:e[+\\-]\\d+)?L?/);\n        return \"number\";\n    } else if (ch == \"'\" || ch == '\"') {\n        state.tokenize = $5b9de906c9e7d1ad$var$tokenString(ch);\n        return \"string\";\n    } else if (ch == \"`\") {\n        stream.match(/[^`]+`/);\n        return \"string.special\";\n    } else if (ch == \".\" && stream.match(/.(?:[.]|\\d+)/)) return \"keyword\";\n    else if (/[a-zA-Z\\.]/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        var word = stream.current();\n        if ($5b9de906c9e7d1ad$var$atoms.propertyIsEnumerable(word)) return \"atom\";\n        if ($5b9de906c9e7d1ad$var$keywords.propertyIsEnumerable(word)) {\n            // Block keywords start new blocks, except 'else if', which only starts\n            // one new block for the 'if', no block for the 'else'.\n            if ($5b9de906c9e7d1ad$var$blockkeywords.propertyIsEnumerable(word) && !stream.match(/\\s*if(\\s+|$)/, false)) $5b9de906c9e7d1ad$var$curPunc = \"block\";\n            return \"keyword\";\n        }\n        if ($5b9de906c9e7d1ad$var$builtins.propertyIsEnumerable(word)) return \"builtin\";\n        return \"variable\";\n    } else if (ch == \"%\") {\n        if (stream.skipTo(\"%\")) stream.next();\n        return \"variableName.special\";\n    } else if (ch == \"<\" && stream.eat(\"-\") || ch == \"<\" && stream.match(\"<-\") || ch == \"-\" && stream.match(/>>?/)) return \"operator\";\n    else if (ch == \"=\" && state.ctx.argList) return \"operator\";\n    else if ($5b9de906c9e7d1ad$var$opChars.test(ch)) {\n        if (ch == \"$\") return \"operator\";\n        stream.eatWhile($5b9de906c9e7d1ad$var$opChars);\n        return \"operator\";\n    } else if (/[\\(\\){}\\[\\];]/.test(ch)) {\n        $5b9de906c9e7d1ad$var$curPunc = ch;\n        if (ch == \";\") return \"punctuation\";\n        return null;\n    } else return null;\n}\nfunction $5b9de906c9e7d1ad$var$tokenString(quote) {\n    return function(stream, state) {\n        if (stream.eat(\"\\\\\")) {\n            var ch = stream.next();\n            if (ch == \"x\") stream.match(/^[a-f0-9]{2}/i);\n            else if ((ch == \"u\" || ch == \"U\") && stream.eat(\"{\") && stream.skipTo(\"}\")) stream.next();\n            else if (ch == \"u\") stream.match(/^[a-f0-9]{4}/i);\n            else if (ch == \"U\") stream.match(/^[a-f0-9]{8}/i);\n            else if (/[0-7]/.test(ch)) stream.match(/^[0-7]{1,2}/);\n            return \"string.special\";\n        } else {\n            var next;\n            while((next = stream.next()) != null){\n                if (next == quote) {\n                    state.tokenize = $5b9de906c9e7d1ad$var$tokenBase;\n                    break;\n                }\n                if (next == \"\\\\\") {\n                    stream.backUp(1);\n                    break;\n                }\n            }\n            return \"string\";\n        }\n    };\n}\nvar $5b9de906c9e7d1ad$var$ALIGN_YES = 1, $5b9de906c9e7d1ad$var$ALIGN_NO = 2, $5b9de906c9e7d1ad$var$BRACELESS = 4;\nfunction $5b9de906c9e7d1ad$var$push(state, type, stream) {\n    state.ctx = {\n        type: type,\n        indent: state.indent,\n        flags: 0,\n        column: stream.column(),\n        prev: state.ctx\n    };\n}\nfunction $5b9de906c9e7d1ad$var$setFlag(state, flag) {\n    var ctx = state.ctx;\n    state.ctx = {\n        type: ctx.type,\n        indent: ctx.indent,\n        flags: ctx.flags | flag,\n        column: ctx.column,\n        prev: ctx.prev\n    };\n}\nfunction $5b9de906c9e7d1ad$var$pop(state) {\n    state.indent = state.ctx.indent;\n    state.ctx = state.ctx.prev;\n}\nconst $5b9de906c9e7d1ad$export$43caf9889c228507 = {\n    name: \"r\",\n    startState: function(indentUnit) {\n        return {\n            tokenize: $5b9de906c9e7d1ad$var$tokenBase,\n            ctx: {\n                type: \"top\",\n                indent: -indentUnit,\n                flags: $5b9de906c9e7d1ad$var$ALIGN_NO\n            },\n            indent: 0,\n            afterIdent: false\n        };\n    },\n    token: function(stream, state) {\n        if (stream.sol()) {\n            if ((state.ctx.flags & 3) == 0) state.ctx.flags |= $5b9de906c9e7d1ad$var$ALIGN_NO;\n            if (state.ctx.flags & $5b9de906c9e7d1ad$var$BRACELESS) $5b9de906c9e7d1ad$var$pop(state);\n            state.indent = stream.indentation();\n        }\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        if (style != \"comment\" && (state.ctx.flags & $5b9de906c9e7d1ad$var$ALIGN_NO) == 0) $5b9de906c9e7d1ad$var$setFlag(state, $5b9de906c9e7d1ad$var$ALIGN_YES);\n        if (($5b9de906c9e7d1ad$var$curPunc == \";\" || $5b9de906c9e7d1ad$var$curPunc == \"{\" || $5b9de906c9e7d1ad$var$curPunc == \"}\") && state.ctx.type == \"block\") $5b9de906c9e7d1ad$var$pop(state);\n        if ($5b9de906c9e7d1ad$var$curPunc == \"{\") $5b9de906c9e7d1ad$var$push(state, \"}\", stream);\n        else if ($5b9de906c9e7d1ad$var$curPunc == \"(\") {\n            $5b9de906c9e7d1ad$var$push(state, \")\", stream);\n            if (state.afterIdent) state.ctx.argList = true;\n        } else if ($5b9de906c9e7d1ad$var$curPunc == \"[\") $5b9de906c9e7d1ad$var$push(state, \"]\", stream);\n        else if ($5b9de906c9e7d1ad$var$curPunc == \"block\") $5b9de906c9e7d1ad$var$push(state, \"block\", stream);\n        else if ($5b9de906c9e7d1ad$var$curPunc == state.ctx.type) $5b9de906c9e7d1ad$var$pop(state);\n        else if (state.ctx.type == \"block\" && style != \"comment\") $5b9de906c9e7d1ad$var$setFlag(state, $5b9de906c9e7d1ad$var$BRACELESS);\n        state.afterIdent = style == \"variable\" || style == \"keyword\";\n        return style;\n    },\n    indent: function(state, textAfter, cx) {\n        if (state.tokenize != $5b9de906c9e7d1ad$var$tokenBase) return 0;\n        var firstChar = textAfter && textAfter.charAt(0), ctx = state.ctx, closing = firstChar == ctx.type;\n        if (ctx.flags & $5b9de906c9e7d1ad$var$BRACELESS) ctx = ctx.prev;\n        if (ctx.type == \"block\") return ctx.indent + (firstChar == \"{\" ? 0 : cx.unit);\n        else if (ctx.flags & $5b9de906c9e7d1ad$var$ALIGN_YES) return ctx.column + (closing ? 0 : 1);\n        else return ctx.indent + (closing ? 0 : cx.unit);\n    },\n    languageData: {\n        wordChars: \".\",\n        commentTokens: {\n            line: \"#\"\n        },\n        autocomplete: $5b9de906c9e7d1ad$var$commonAtoms.concat($5b9de906c9e7d1ad$var$commonBuiltins, $5b9de906c9e7d1ad$var$commonKeywords)\n    }\n};\n\n});\n\n\n//# sourceMappingURL=r.ce847655.js.map\n","function wordObj(words) {\n  var res = {};\n  for (var i = 0; i < words.length; ++i) res[words[i]] = true;\n  return res;\n}\nvar commonAtoms = [\"NULL\", \"NA\", \"Inf\", \"NaN\", \"NA_integer_\", \"NA_real_\", \"NA_complex_\", \"NA_character_\", \"TRUE\", \"FALSE\"];\nvar commonBuiltins = [\"list\", \"quote\", \"bquote\", \"eval\", \"return\", \"call\", \"parse\", \"deparse\"];\nvar commonKeywords = [\"if\", \"else\", \"repeat\", \"while\", \"function\", \"for\", \"in\", \"next\", \"break\"];\nvar commonBlockKeywords = [\"if\", \"else\", \"repeat\", \"while\", \"function\", \"for\"];\n\nvar atoms = wordObj(commonAtoms);\nvar builtins = wordObj(commonBuiltins);\nvar keywords = wordObj(commonKeywords);\nvar blockkeywords = wordObj(commonBlockKeywords);\nvar opChars = /[+\\-*\\/^<>=!&|~$:]/;\nvar curPunc;\n\nfunction tokenBase(stream, state) {\n  curPunc = null;\n  var ch = stream.next();\n  if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  } else if (ch == \"0\" && stream.eat(\"x\")) {\n    stream.eatWhile(/[\\da-f]/i);\n    return \"number\";\n  } else if (ch == \".\" && stream.eat(/\\d/)) {\n    stream.match(/\\d*(?:e[+\\-]?\\d+)?/);\n    return \"number\";\n  } else if (/\\d/.test(ch)) {\n    stream.match(/\\d*(?:\\.\\d+)?(?:e[+\\-]\\d+)?L?/);\n    return \"number\";\n  } else if (ch == \"'\" || ch == '\"') {\n    state.tokenize = tokenString(ch);\n    return \"string\";\n  } else if (ch == \"`\") {\n    stream.match(/[^`]+`/);\n    return \"string.special\";\n  } else if (ch == \".\" && stream.match(/.(?:[.]|\\d+)/)) {\n    return \"keyword\";\n  } else if (/[a-zA-Z\\.]/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    var word = stream.current();\n    if (atoms.propertyIsEnumerable(word)) return \"atom\";\n    if (keywords.propertyIsEnumerable(word)) {\n      // Block keywords start new blocks, except 'else if', which only starts\n      // one new block for the 'if', no block for the 'else'.\n      if (blockkeywords.propertyIsEnumerable(word) &&\n          !stream.match(/\\s*if(\\s+|$)/, false))\n        curPunc = \"block\";\n      return \"keyword\";\n    }\n    if (builtins.propertyIsEnumerable(word)) return \"builtin\";\n    return \"variable\";\n  } else if (ch == \"%\") {\n    if (stream.skipTo(\"%\")) stream.next();\n    return \"variableName.special\";\n  } else if (\n    (ch == \"<\" && stream.eat(\"-\")) ||\n      (ch == \"<\" && stream.match(\"<-\")) ||\n      (ch == \"-\" && stream.match(/>>?/))\n  ) {\n    return \"operator\";\n  } else if (ch == \"=\" && state.ctx.argList) {\n    return \"operator\";\n  } else if (opChars.test(ch)) {\n    if (ch == \"$\") return \"operator\";\n    stream.eatWhile(opChars);\n    return \"operator\";\n  } else if (/[\\(\\){}\\[\\];]/.test(ch)) {\n    curPunc = ch;\n    if (ch == \";\") return \"punctuation\";\n    return null;\n  } else {\n    return null;\n  }\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    if (stream.eat(\"\\\\\")) {\n      var ch = stream.next();\n      if (ch == \"x\") stream.match(/^[a-f0-9]{2}/i);\n      else if ((ch == \"u\" || ch == \"U\") && stream.eat(\"{\") && stream.skipTo(\"}\")) stream.next();\n      else if (ch == \"u\") stream.match(/^[a-f0-9]{4}/i);\n      else if (ch == \"U\") stream.match(/^[a-f0-9]{8}/i);\n      else if (/[0-7]/.test(ch)) stream.match(/^[0-7]{1,2}/);\n      return \"string.special\";\n    } else {\n      var next;\n      while ((next = stream.next()) != null) {\n        if (next == quote) { state.tokenize = tokenBase; break; }\n        if (next == \"\\\\\") { stream.backUp(1); break; }\n      }\n      return \"string\";\n    }\n  };\n}\n\nvar ALIGN_YES = 1, ALIGN_NO = 2, BRACELESS = 4\n\nfunction push(state, type, stream) {\n  state.ctx = {type: type,\n               indent: state.indent,\n               flags: 0,\n               column: stream.column(),\n               prev: state.ctx};\n}\nfunction setFlag(state, flag) {\n  var ctx = state.ctx\n  state.ctx = {type: ctx.type,\n               indent: ctx.indent,\n               flags: ctx.flags | flag,\n               column: ctx.column,\n               prev: ctx.prev}\n}\nfunction pop(state) {\n  state.indent = state.ctx.indent;\n  state.ctx = state.ctx.prev;\n}\n\nexport const r = {\n  name: \"r\",\n  startState: function(indentUnit) {\n    return {tokenize: tokenBase,\n            ctx: {type: \"top\",\n                  indent: -indentUnit,\n                  flags: ALIGN_NO},\n            indent: 0,\n            afterIdent: false};\n  },\n\n  token: function(stream, state) {\n    if (stream.sol()) {\n      if ((state.ctx.flags & 3) == 0) state.ctx.flags |= ALIGN_NO\n      if (state.ctx.flags & BRACELESS) pop(state)\n      state.indent = stream.indentation();\n    }\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n    if (style != \"comment\" && (state.ctx.flags & ALIGN_NO) == 0) setFlag(state, ALIGN_YES)\n\n    if ((curPunc == \";\" || curPunc == \"{\" || curPunc == \"}\") && state.ctx.type == \"block\") pop(state);\n    if (curPunc == \"{\") push(state, \"}\", stream);\n    else if (curPunc == \"(\") {\n      push(state, \")\", stream);\n      if (state.afterIdent) state.ctx.argList = true;\n    }\n    else if (curPunc == \"[\") push(state, \"]\", stream);\n    else if (curPunc == \"block\") push(state, \"block\", stream);\n    else if (curPunc == state.ctx.type) pop(state);\n    else if (state.ctx.type == \"block\" && style != \"comment\") setFlag(state, BRACELESS)\n    state.afterIdent = style == \"variable\" || style == \"keyword\";\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    if (state.tokenize != tokenBase) return 0;\n    var firstChar = textAfter && textAfter.charAt(0), ctx = state.ctx,\n        closing = firstChar == ctx.type;\n    if (ctx.flags & BRACELESS) ctx = ctx.prev\n    if (ctx.type == \"block\") return ctx.indent + (firstChar == \"{\" ? 0 : cx.unit);\n    else if (ctx.flags & ALIGN_YES) return ctx.column + (closing ? 0 : 1);\n    else return ctx.indent + (closing ? 0 : cx.unit);\n  },\n\n  languageData: {\n    wordChars: \".\",\n    commentTokens: {line: \"#\"},\n    autocomplete: commonAtoms.concat(commonBuiltins, commonKeywords)\n  }\n};\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","$5b9de906c9e7d1ad$var$wordObj","words","res","i","length","e","Object","defineProperty","get","$5b9de906c9e7d1ad$export$43caf9889c228507","set","s","enumerable","configurable","$5b9de906c9e7d1ad$var$curPunc","$5b9de906c9e7d1ad$var$commonAtoms","$5b9de906c9e7d1ad$var$commonBuiltins","$5b9de906c9e7d1ad$var$commonKeywords","$5b9de906c9e7d1ad$var$atoms","$5b9de906c9e7d1ad$var$builtins","$5b9de906c9e7d1ad$var$keywords","$5b9de906c9e7d1ad$var$blockkeywords","$5b9de906c9e7d1ad$var$opChars","$5b9de906c9e7d1ad$var$tokenBase","stream","state","quote","ch","next","skipToEnd","eat","eatWhile","match","test","tokenize","skipTo","backUp","word","current","propertyIsEnumerable","ctx","argList","$5b9de906c9e7d1ad$var$push","type","indent","flags","column","prev","$5b9de906c9e7d1ad$var$setFlag","flag","$5b9de906c9e7d1ad$var$pop","name","startState","indentUnit","afterIdent","token","sol","indentation","eatSpace","style","textAfter","cx","firstChar","charAt","closing","unit","languageData","wordChars","commentTokens","line","autocomplete","concat"],"version":3,"file":"r.ce847655.js.map"}