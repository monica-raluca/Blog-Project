{"mappings":"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","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/cypher.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"hzvVC\", function(module, exports) {\n\n$parcel$export(module.exports, \"cypher\", () => $ccae78e1558e7fe0$export$ce02b35bc792b83);\nvar $ccae78e1558e7fe0$var$wordRegexp = function(words) {\n    return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n};\nvar $ccae78e1558e7fe0$var$tokenBase = function(stream /*, state*/ ) {\n    $ccae78e1558e7fe0$var$curPunc = null;\n    var ch = stream.next();\n    if (ch === '\"') {\n        stream.match(/^.*?\"/);\n        return \"string\";\n    }\n    if (ch === \"'\") {\n        stream.match(/^.*?'/);\n        return \"string\";\n    }\n    if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n        $ccae78e1558e7fe0$var$curPunc = ch;\n        return \"punctuation\";\n    } else if (ch === \"/\" && stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n    } else if ($ccae78e1558e7fe0$var$operatorChars.test(ch)) {\n        stream.eatWhile($ccae78e1558e7fe0$var$operatorChars);\n        return null;\n    } else {\n        stream.eatWhile(/[_\\w\\d]/);\n        if (stream.eat(\":\")) {\n            stream.eatWhile(/[\\w\\d_\\-]/);\n            return \"atom\";\n        }\n        var word = stream.current();\n        if ($ccae78e1558e7fe0$var$funcs.test(word)) return \"builtin\";\n        if ($ccae78e1558e7fe0$var$preds.test(word)) return \"def\";\n        if ($ccae78e1558e7fe0$var$keywords.test(word) || $ccae78e1558e7fe0$var$systemKeywords.test(word)) return \"keyword\";\n        return \"variable\";\n    }\n};\nvar $ccae78e1558e7fe0$var$pushContext = function(state, type, col) {\n    return state.context = {\n        prev: state.context,\n        indent: state.indent,\n        col: col,\n        type: type\n    };\n};\nvar $ccae78e1558e7fe0$var$popContext = function(state) {\n    state.indent = state.context.indent;\n    return state.context = state.context.prev;\n};\nvar $ccae78e1558e7fe0$var$curPunc;\nvar $ccae78e1558e7fe0$var$funcs = $ccae78e1558e7fe0$var$wordRegexp([\n    \"abs\",\n    \"acos\",\n    \"allShortestPaths\",\n    \"asin\",\n    \"atan\",\n    \"atan2\",\n    \"avg\",\n    \"ceil\",\n    \"coalesce\",\n    \"collect\",\n    \"cos\",\n    \"cot\",\n    \"count\",\n    \"degrees\",\n    \"e\",\n    \"endnode\",\n    \"exp\",\n    \"extract\",\n    \"filter\",\n    \"floor\",\n    \"haversin\",\n    \"head\",\n    \"id\",\n    \"keys\",\n    \"labels\",\n    \"last\",\n    \"left\",\n    \"length\",\n    \"log\",\n    \"log10\",\n    \"lower\",\n    \"ltrim\",\n    \"max\",\n    \"min\",\n    \"node\",\n    \"nodes\",\n    \"percentileCont\",\n    \"percentileDisc\",\n    \"pi\",\n    \"radians\",\n    \"rand\",\n    \"range\",\n    \"reduce\",\n    \"rel\",\n    \"relationship\",\n    \"relationships\",\n    \"replace\",\n    \"reverse\",\n    \"right\",\n    \"round\",\n    \"rtrim\",\n    \"shortestPath\",\n    \"sign\",\n    \"sin\",\n    \"size\",\n    \"split\",\n    \"sqrt\",\n    \"startnode\",\n    \"stdev\",\n    \"stdevp\",\n    \"str\",\n    \"substring\",\n    \"sum\",\n    \"tail\",\n    \"tan\",\n    \"timestamp\",\n    \"toFloat\",\n    \"toInt\",\n    \"toString\",\n    \"trim\",\n    \"type\",\n    \"upper\"\n]);\nvar $ccae78e1558e7fe0$var$preds = $ccae78e1558e7fe0$var$wordRegexp([\n    \"all\",\n    \"and\",\n    \"any\",\n    \"contains\",\n    \"exists\",\n    \"has\",\n    \"in\",\n    \"none\",\n    \"not\",\n    \"or\",\n    \"single\",\n    \"xor\"\n]);\nvar $ccae78e1558e7fe0$var$keywords = $ccae78e1558e7fe0$var$wordRegexp([\n    \"as\",\n    \"asc\",\n    \"ascending\",\n    \"assert\",\n    \"by\",\n    \"case\",\n    \"commit\",\n    \"constraint\",\n    \"create\",\n    \"csv\",\n    \"cypher\",\n    \"delete\",\n    \"desc\",\n    \"descending\",\n    \"detach\",\n    \"distinct\",\n    \"drop\",\n    \"else\",\n    \"end\",\n    \"ends\",\n    \"explain\",\n    \"false\",\n    \"fieldterminator\",\n    \"foreach\",\n    \"from\",\n    \"headers\",\n    \"in\",\n    \"index\",\n    \"is\",\n    \"join\",\n    \"limit\",\n    \"load\",\n    \"match\",\n    \"merge\",\n    \"null\",\n    \"on\",\n    \"optional\",\n    \"order\",\n    \"periodic\",\n    \"profile\",\n    \"remove\",\n    \"return\",\n    \"scan\",\n    \"set\",\n    \"skip\",\n    \"start\",\n    \"starts\",\n    \"then\",\n    \"true\",\n    \"union\",\n    \"unique\",\n    \"unwind\",\n    \"using\",\n    \"when\",\n    \"where\",\n    \"with\",\n    \"call\",\n    \"yield\"\n]);\nvar $ccae78e1558e7fe0$var$systemKeywords = $ccae78e1558e7fe0$var$wordRegexp([\n    \"access\",\n    \"active\",\n    \"assign\",\n    \"all\",\n    \"alter\",\n    \"as\",\n    \"catalog\",\n    \"change\",\n    \"copy\",\n    \"create\",\n    \"constraint\",\n    \"constraints\",\n    \"current\",\n    \"database\",\n    \"databases\",\n    \"dbms\",\n    \"default\",\n    \"deny\",\n    \"drop\",\n    \"element\",\n    \"elements\",\n    \"exists\",\n    \"from\",\n    \"grant\",\n    \"graph\",\n    \"graphs\",\n    \"if\",\n    \"index\",\n    \"indexes\",\n    \"label\",\n    \"labels\",\n    \"management\",\n    \"match\",\n    \"name\",\n    \"names\",\n    \"new\",\n    \"node\",\n    \"nodes\",\n    \"not\",\n    \"of\",\n    \"on\",\n    \"or\",\n    \"password\",\n    \"populated\",\n    \"privileges\",\n    \"property\",\n    \"read\",\n    \"relationship\",\n    \"relationships\",\n    \"remove\",\n    \"replace\",\n    \"required\",\n    \"revoke\",\n    \"role\",\n    \"roles\",\n    \"set\",\n    \"show\",\n    \"start\",\n    \"status\",\n    \"stop\",\n    \"suspended\",\n    \"to\",\n    \"traverse\",\n    \"type\",\n    \"types\",\n    \"user\",\n    \"users\",\n    \"with\",\n    \"write\"\n]);\nvar $ccae78e1558e7fe0$var$operatorChars = /[*+\\-<>=&|~%^]/;\nconst $ccae78e1558e7fe0$export$ce02b35bc792b83 = {\n    name: \"cypher\",\n    startState: function() {\n        return {\n            tokenize: $ccae78e1558e7fe0$var$tokenBase,\n            context: null,\n            indent: 0,\n            col: 0\n        };\n    },\n    token: function(stream, state) {\n        if (stream.sol()) {\n            if (state.context && state.context.align == null) state.context.align = false;\n            state.indent = stream.indentation();\n        }\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        if (style !== \"comment\" && state.context && state.context.align == null && state.context.type !== \"pattern\") state.context.align = true;\n        if ($ccae78e1558e7fe0$var$curPunc === \"(\") $ccae78e1558e7fe0$var$pushContext(state, \")\", stream.column());\n        else if ($ccae78e1558e7fe0$var$curPunc === \"[\") $ccae78e1558e7fe0$var$pushContext(state, \"]\", stream.column());\n        else if ($ccae78e1558e7fe0$var$curPunc === \"{\") $ccae78e1558e7fe0$var$pushContext(state, \"}\", stream.column());\n        else if (/[\\]\\}\\)]/.test($ccae78e1558e7fe0$var$curPunc)) {\n            while(state.context && state.context.type === \"pattern\")$ccae78e1558e7fe0$var$popContext(state);\n            if (state.context && $ccae78e1558e7fe0$var$curPunc === state.context.type) $ccae78e1558e7fe0$var$popContext(state);\n        } else if ($ccae78e1558e7fe0$var$curPunc === \".\" && state.context && state.context.type === \"pattern\") $ccae78e1558e7fe0$var$popContext(state);\n        else if (/atom|string|variable/.test(style) && state.context) {\n            if (/[\\}\\]]/.test(state.context.type)) $ccae78e1558e7fe0$var$pushContext(state, \"pattern\", stream.column());\n            else if (state.context.type === \"pattern\" && !state.context.align) {\n                state.context.align = true;\n                state.context.col = stream.column();\n            }\n        }\n        return style;\n    },\n    indent: function(state, textAfter, cx) {\n        var firstChar = textAfter && textAfter.charAt(0);\n        var context = state.context;\n        if (/[\\]\\}]/.test(firstChar)) while(context && context.type === \"pattern\")context = context.prev;\n        var closing = context && firstChar === context.type;\n        if (!context) return 0;\n        if (context.type === \"keywords\") return null;\n        if (context.align) return context.col + (closing ? 0 : 1);\n        return context.indent + (closing ? 0 : cx.unit);\n    }\n};\n\n});\n\n\n//# sourceMappingURL=cypher.a36805e7.js.map\n","var wordRegexp = function(words) {\n  return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n};\n\nvar tokenBase = function(stream/*, state*/) {\n  curPunc = null;\n  var ch = stream.next();\n  if (ch ==='\"') {\n    stream.match(/^.*?\"/);\n    return \"string\";\n  }\n  if (ch === \"'\") {\n    stream.match(/^.*?'/);\n    return \"string\";\n  }\n  if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n    curPunc = ch;\n    return \"punctuation\";\n  } else if (ch === \"/\" && stream.eat(\"/\")) {\n    stream.skipToEnd();\n    return \"comment\";\n  } else if (operatorChars.test(ch)) {\n    stream.eatWhile(operatorChars);\n    return null;\n  } else {\n    stream.eatWhile(/[_\\w\\d]/);\n    if (stream.eat(\":\")) {\n      stream.eatWhile(/[\\w\\d_\\-]/);\n      return \"atom\";\n    }\n    var word = stream.current();\n    if (funcs.test(word)) return \"builtin\";\n    if (preds.test(word)) return \"def\";\n    if (keywords.test(word) || systemKeywords.test(word)) return \"keyword\";\n    return \"variable\";\n  }\n};\nvar pushContext = function(state, type, col) {\n  return state.context = {\n    prev: state.context,\n    indent: state.indent,\n    col: col,\n    type: type\n  };\n};\nvar popContext = function(state) {\n  state.indent = state.context.indent;\n  return state.context = state.context.prev;\n};\nvar curPunc;\nvar funcs = wordRegexp([\"abs\", \"acos\", \"allShortestPaths\", \"asin\", \"atan\", \"atan2\", \"avg\", \"ceil\", \"coalesce\", \"collect\", \"cos\", \"cot\", \"count\", \"degrees\", \"e\", \"endnode\", \"exp\", \"extract\", \"filter\", \"floor\", \"haversin\", \"head\", \"id\", \"keys\", \"labels\", \"last\", \"left\", \"length\", \"log\", \"log10\", \"lower\", \"ltrim\", \"max\", \"min\", \"node\", \"nodes\", \"percentileCont\", \"percentileDisc\", \"pi\", \"radians\", \"rand\", \"range\", \"reduce\", \"rel\", \"relationship\", \"relationships\", \"replace\", \"reverse\", \"right\", \"round\", \"rtrim\", \"shortestPath\", \"sign\", \"sin\", \"size\", \"split\", \"sqrt\", \"startnode\", \"stdev\", \"stdevp\", \"str\", \"substring\", \"sum\", \"tail\", \"tan\", \"timestamp\", \"toFloat\", \"toInt\", \"toString\", \"trim\", \"type\", \"upper\"]);\nvar preds = wordRegexp([\"all\", \"and\", \"any\", \"contains\", \"exists\", \"has\", \"in\", \"none\", \"not\", \"or\", \"single\", \"xor\"]);\nvar keywords = wordRegexp([\"as\", \"asc\", \"ascending\", \"assert\", \"by\", \"case\", \"commit\", \"constraint\", \"create\", \"csv\", \"cypher\", \"delete\", \"desc\", \"descending\", \"detach\", \"distinct\", \"drop\", \"else\", \"end\", \"ends\", \"explain\", \"false\", \"fieldterminator\", \"foreach\", \"from\", \"headers\", \"in\", \"index\", \"is\", \"join\", \"limit\", \"load\", \"match\", \"merge\", \"null\", \"on\", \"optional\", \"order\", \"periodic\", \"profile\", \"remove\", \"return\", \"scan\", \"set\", \"skip\", \"start\", \"starts\", \"then\", \"true\", \"union\", \"unique\", \"unwind\", \"using\", \"when\", \"where\", \"with\", \"call\", \"yield\"]);\nvar systemKeywords = wordRegexp([\"access\", \"active\", \"assign\", \"all\", \"alter\", \"as\", \"catalog\", \"change\", \"copy\", \"create\", \"constraint\", \"constraints\", \"current\", \"database\", \"databases\", \"dbms\", \"default\", \"deny\", \"drop\", \"element\", \"elements\", \"exists\", \"from\", \"grant\", \"graph\", \"graphs\", \"if\", \"index\", \"indexes\", \"label\", \"labels\", \"management\", \"match\", \"name\", \"names\", \"new\", \"node\", \"nodes\", \"not\", \"of\", \"on\", \"or\", \"password\", \"populated\", \"privileges\", \"property\", \"read\", \"relationship\", \"relationships\", \"remove\", \"replace\", \"required\", \"revoke\", \"role\", \"roles\", \"set\", \"show\", \"start\", \"status\", \"stop\", \"suspended\", \"to\", \"traverse\", \"type\", \"types\", \"user\", \"users\", \"with\", \"write\"]);\nvar operatorChars = /[*+\\-<>=&|~%^]/;\n\nexport const cypher = {\n  name: \"cypher\",\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      context: null,\n      indent: 0,\n      col: 0\n    };\n  },\n  token: function(stream, state) {\n    if (stream.sol()) {\n      if (state.context && (state.context.align == null)) {\n        state.context.align = false;\n      }\n      state.indent = stream.indentation();\n    }\n    if (stream.eatSpace()) {\n      return null;\n    }\n    var style = state.tokenize(stream, state);\n    if (style !== \"comment\" && state.context && (state.context.align == null) && state.context.type !== \"pattern\") {\n      state.context.align = true;\n    }\n    if (curPunc === \"(\") {\n      pushContext(state, \")\", stream.column());\n    } else if (curPunc === \"[\") {\n      pushContext(state, \"]\", stream.column());\n    } else if (curPunc === \"{\") {\n      pushContext(state, \"}\", stream.column());\n    } else if (/[\\]\\}\\)]/.test(curPunc)) {\n      while (state.context && state.context.type === \"pattern\") {\n        popContext(state);\n      }\n      if (state.context && curPunc === state.context.type) {\n        popContext(state);\n      }\n    } else if (curPunc === \".\" && state.context && state.context.type === \"pattern\") {\n      popContext(state);\n    } else if (/atom|string|variable/.test(style) && state.context) {\n      if (/[\\}\\]]/.test(state.context.type)) {\n        pushContext(state, \"pattern\", stream.column());\n      } else if (state.context.type === \"pattern\" && !state.context.align) {\n        state.context.align = true;\n        state.context.col = stream.column();\n      }\n    }\n    return style;\n  },\n  indent: function(state, textAfter, cx) {\n    var firstChar = textAfter && textAfter.charAt(0);\n    var context = state.context;\n    if (/[\\]\\}]/.test(firstChar)) {\n      while (context && context.type === \"pattern\") {\n        context = context.prev;\n      }\n    }\n    var closing = context && firstChar === context.type;\n    if (!context) return 0;\n    if (context.type === \"keywords\") return null\n    if (context.align) return context.col + (closing ? 0 : 1);\n    return context.indent + (closing ? 0 : cx.unit);\n  }\n};\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","Object","defineProperty","get","$ccae78e1558e7fe0$export$ce02b35bc792b83","set","s","enumerable","configurable","$ccae78e1558e7fe0$var$curPunc","$ccae78e1558e7fe0$var$wordRegexp","words","RegExp","join","$ccae78e1558e7fe0$var$tokenBase","stream","ch","next","match","test","eat","skipToEnd","$ccae78e1558e7fe0$var$operatorChars","eatWhile","word","current","$ccae78e1558e7fe0$var$funcs","$ccae78e1558e7fe0$var$preds","$ccae78e1558e7fe0$var$keywords","$ccae78e1558e7fe0$var$systemKeywords","$ccae78e1558e7fe0$var$pushContext","state","type","col","context","prev","indent","$ccae78e1558e7fe0$var$popContext","name","startState","tokenize","token","sol","align","indentation","eatSpace","style","column","textAfter","cx","firstChar","charAt","closing","unit"],"version":3,"file":"cypher.a36805e7.js.map"}