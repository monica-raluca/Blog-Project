{"mappings":"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","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/ruby.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"bUNBA\", function(module, exports) {\n\n$parcel$export(module.exports, \"ruby\", () => $8acb673e3be3ad8b$export$f2b283820b448b35);\nfunction $8acb673e3be3ad8b$var$wordObj(words) {\n    var o = {};\n    for(var i = 0, e = words.length; i < e; ++i)o[words[i]] = true;\n    return o;\n}\nvar $8acb673e3be3ad8b$var$keywordList = [\n    \"alias\",\n    \"and\",\n    \"BEGIN\",\n    \"begin\",\n    \"break\",\n    \"case\",\n    \"class\",\n    \"def\",\n    \"defined?\",\n    \"do\",\n    \"else\",\n    \"elsif\",\n    \"END\",\n    \"end\",\n    \"ensure\",\n    \"false\",\n    \"for\",\n    \"if\",\n    \"in\",\n    \"module\",\n    \"next\",\n    \"not\",\n    \"or\",\n    \"redo\",\n    \"rescue\",\n    \"retry\",\n    \"return\",\n    \"self\",\n    \"super\",\n    \"then\",\n    \"true\",\n    \"undef\",\n    \"unless\",\n    \"until\",\n    \"when\",\n    \"while\",\n    \"yield\",\n    \"nil\",\n    \"raise\",\n    \"throw\",\n    \"catch\",\n    \"fail\",\n    \"loop\",\n    \"callcc\",\n    \"caller\",\n    \"lambda\",\n    \"proc\",\n    \"public\",\n    \"protected\",\n    \"private\",\n    \"require\",\n    \"load\",\n    \"require_relative\",\n    \"extend\",\n    \"autoload\",\n    \"__END__\",\n    \"__FILE__\",\n    \"__LINE__\",\n    \"__dir__\"\n], $8acb673e3be3ad8b$var$keywords = $8acb673e3be3ad8b$var$wordObj($8acb673e3be3ad8b$var$keywordList);\nvar $8acb673e3be3ad8b$var$indentWords = $8acb673e3be3ad8b$var$wordObj([\n    \"def\",\n    \"class\",\n    \"case\",\n    \"for\",\n    \"while\",\n    \"until\",\n    \"module\",\n    \"catch\",\n    \"loop\",\n    \"proc\",\n    \"begin\"\n]);\nvar $8acb673e3be3ad8b$var$dedentWords = $8acb673e3be3ad8b$var$wordObj([\n    \"end\",\n    \"until\"\n]);\nvar $8acb673e3be3ad8b$var$opening = {\n    \"[\": \"]\",\n    \"{\": \"}\",\n    \"(\": \")\"\n};\nvar $8acb673e3be3ad8b$var$closing = {\n    \"]\": \"[\",\n    \"}\": \"{\",\n    \")\": \"(\"\n};\nvar $8acb673e3be3ad8b$var$curPunc;\nfunction $8acb673e3be3ad8b$var$chain(newtok, stream, state) {\n    state.tokenize.push(newtok);\n    return newtok(stream, state);\n}\nfunction $8acb673e3be3ad8b$var$tokenBase(stream, state) {\n    if (stream.sol() && stream.match(\"=begin\") && stream.eol()) {\n        state.tokenize.push($8acb673e3be3ad8b$var$readBlockComment);\n        return \"comment\";\n    }\n    if (stream.eatSpace()) return null;\n    var ch = stream.next(), m;\n    if (ch == \"`\" || ch == \"'\" || ch == '\"') return $8acb673e3be3ad8b$var$chain($8acb673e3be3ad8b$var$readQuoted(ch, \"string\", ch == '\"' || ch == \"`\"), stream, state);\n    else if (ch == \"/\") {\n        if ($8acb673e3be3ad8b$var$regexpAhead(stream)) return $8acb673e3be3ad8b$var$chain($8acb673e3be3ad8b$var$readQuoted(ch, \"string.special\", true), stream, state);\n        else return \"operator\";\n    } else if (ch == \"%\") {\n        var style = \"string\", embed = true;\n        if (stream.eat(\"s\")) style = \"atom\";\n        else if (stream.eat(/[WQ]/)) style = \"string\";\n        else if (stream.eat(/[r]/)) style = \"string.special\";\n        else if (stream.eat(/[wxq]/)) {\n            style = \"string\";\n            embed = false;\n        }\n        var delim = stream.eat(/[^\\w\\s=]/);\n        if (!delim) return \"operator\";\n        if ($8acb673e3be3ad8b$var$opening.propertyIsEnumerable(delim)) delim = $8acb673e3be3ad8b$var$opening[delim];\n        return $8acb673e3be3ad8b$var$chain($8acb673e3be3ad8b$var$readQuoted(delim, style, embed, true), stream, state);\n    } else if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n    } else if (ch == \"<\" && (m = stream.match(/^<([-~])[\\`\\\"\\']?([a-zA-Z_?]\\w*)[\\`\\\"\\']?(?:;|$)/))) return $8acb673e3be3ad8b$var$chain($8acb673e3be3ad8b$var$readHereDoc(m[2], m[1]), stream, state);\n    else if (ch == \"0\") {\n        if (stream.eat(\"x\")) stream.eatWhile(/[\\da-fA-F]/);\n        else if (stream.eat(\"b\")) stream.eatWhile(/[01]/);\n        else stream.eatWhile(/[0-7]/);\n        return \"number\";\n    } else if (/\\d/.test(ch)) {\n        stream.match(/^[\\d_]*(?:\\.[\\d_]+)?(?:[eE][+\\-]?[\\d_]+)?/);\n        return \"number\";\n    } else if (ch == \"?\") {\n        while(stream.match(/^\\\\[CM]-/));\n        if (stream.eat(\"\\\\\")) stream.eatWhile(/\\w/);\n        else stream.next();\n        return \"string\";\n    } else if (ch == \":\") {\n        if (stream.eat(\"'\")) return $8acb673e3be3ad8b$var$chain($8acb673e3be3ad8b$var$readQuoted(\"'\", \"atom\", false), stream, state);\n        if (stream.eat('\"')) return $8acb673e3be3ad8b$var$chain($8acb673e3be3ad8b$var$readQuoted('\"', \"atom\", true), stream, state);\n        // :> :>> :< :<< are valid symbols\n        if (stream.eat(/[\\<\\>]/)) {\n            stream.eat(/[\\<\\>]/);\n            return \"atom\";\n        }\n        // :+ :- :/ :* :| :& :! are valid symbols\n        if (stream.eat(/[\\+\\-\\*\\/\\&\\|\\:\\!]/)) return \"atom\";\n        // Symbols can't start by a digit\n        if (stream.eat(/[a-zA-Z$@_\\xa1-\\uffff]/)) {\n            stream.eatWhile(/[\\w$\\xa1-\\uffff]/);\n            // Only one ? ! = is allowed and only as the last character\n            stream.eat(/[\\?\\!\\=]/);\n            return \"atom\";\n        }\n        return \"operator\";\n    } else if (ch == \"@\" && stream.match(/^@?[a-zA-Z_\\xa1-\\uffff]/)) {\n        stream.eat(\"@\");\n        stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n        return \"propertyName\";\n    } else if (ch == \"$\") {\n        if (stream.eat(/[a-zA-Z_]/)) stream.eatWhile(/[\\w]/);\n        else if (stream.eat(/\\d/)) stream.eat(/\\d/);\n        else stream.next(); // Must be a special global like $: or $!\n        return \"variableName.special\";\n    } else if (/[a-zA-Z_\\xa1-\\uffff]/.test(ch)) {\n        stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n        stream.eat(/[\\?\\!]/);\n        if (stream.eat(\":\")) return \"atom\";\n        return \"variable\";\n    } else if (ch == \"|\" && (state.varList || state.lastTok == \"{\" || state.lastTok == \"do\")) {\n        $8acb673e3be3ad8b$var$curPunc = \"|\";\n        return null;\n    } else if (/[\\(\\)\\[\\]{}\\\\;]/.test(ch)) {\n        $8acb673e3be3ad8b$var$curPunc = ch;\n        return null;\n    } else if (ch == \"-\" && stream.eat(\">\")) return \"operator\";\n    else if (/[=+\\-\\/*:\\.^%<>~|]/.test(ch)) {\n        var more = stream.eatWhile(/[=+\\-\\/*:\\.^%<>~|]/);\n        if (ch == \".\" && !more) $8acb673e3be3ad8b$var$curPunc = \".\";\n        return \"operator\";\n    } else return null;\n}\nfunction $8acb673e3be3ad8b$var$regexpAhead(stream) {\n    var start = stream.pos, depth = 0, next, found = false, escaped = false;\n    while((next = stream.next()) != null)if (!escaped) {\n        if (\"[{(\".indexOf(next) > -1) depth++;\n        else if (\"]})\".indexOf(next) > -1) {\n            depth--;\n            if (depth < 0) break;\n        } else if (next == \"/\" && depth == 0) {\n            found = true;\n            break;\n        }\n        escaped = next == \"\\\\\";\n    } else escaped = false;\n    stream.backUp(stream.pos - start);\n    return found;\n}\nfunction $8acb673e3be3ad8b$var$tokenBaseUntilBrace(depth) {\n    if (!depth) depth = 1;\n    return function(stream, state) {\n        if (stream.peek() == \"}\") {\n            if (depth == 1) {\n                state.tokenize.pop();\n                return state.tokenize[state.tokenize.length - 1](stream, state);\n            } else state.tokenize[state.tokenize.length - 1] = $8acb673e3be3ad8b$var$tokenBaseUntilBrace(depth - 1);\n        } else if (stream.peek() == \"{\") state.tokenize[state.tokenize.length - 1] = $8acb673e3be3ad8b$var$tokenBaseUntilBrace(depth + 1);\n        return $8acb673e3be3ad8b$var$tokenBase(stream, state);\n    };\n}\nfunction $8acb673e3be3ad8b$var$tokenBaseOnce() {\n    var alreadyCalled = false;\n    return function(stream, state) {\n        if (alreadyCalled) {\n            state.tokenize.pop();\n            return state.tokenize[state.tokenize.length - 1](stream, state);\n        }\n        alreadyCalled = true;\n        return $8acb673e3be3ad8b$var$tokenBase(stream, state);\n    };\n}\nfunction $8acb673e3be3ad8b$var$readQuoted(quote, style, embed, unescaped) {\n    return function(stream, state) {\n        var escaped = false, ch;\n        if (state.context.type === 'read-quoted-paused') {\n            state.context = state.context.prev;\n            stream.eat(\"}\");\n        }\n        while((ch = stream.next()) != null){\n            if (ch == quote && (unescaped || !escaped)) {\n                state.tokenize.pop();\n                break;\n            }\n            if (embed && ch == \"#\" && !escaped) {\n                if (stream.eat(\"{\")) {\n                    if (quote == \"}\") state.context = {\n                        prev: state.context,\n                        type: 'read-quoted-paused'\n                    };\n                    state.tokenize.push($8acb673e3be3ad8b$var$tokenBaseUntilBrace());\n                    break;\n                } else if (/[@\\$]/.test(stream.peek())) {\n                    state.tokenize.push($8acb673e3be3ad8b$var$tokenBaseOnce());\n                    break;\n                }\n            }\n            escaped = !escaped && ch == \"\\\\\";\n        }\n        return style;\n    };\n}\nfunction $8acb673e3be3ad8b$var$readHereDoc(phrase, mayIndent) {\n    return function(stream, state) {\n        if (mayIndent) stream.eatSpace();\n        if (stream.match(phrase)) state.tokenize.pop();\n        else stream.skipToEnd();\n        return \"string\";\n    };\n}\nfunction $8acb673e3be3ad8b$var$readBlockComment(stream, state) {\n    if (stream.sol() && stream.match(\"=end\") && stream.eol()) state.tokenize.pop();\n    stream.skipToEnd();\n    return \"comment\";\n}\nconst $8acb673e3be3ad8b$export$f2b283820b448b35 = {\n    name: \"ruby\",\n    startState: function(indentUnit) {\n        return {\n            tokenize: [\n                $8acb673e3be3ad8b$var$tokenBase\n            ],\n            indented: 0,\n            context: {\n                type: \"top\",\n                indented: -indentUnit\n            },\n            continuedLine: false,\n            lastTok: null,\n            varList: false\n        };\n    },\n    token: function(stream, state) {\n        $8acb673e3be3ad8b$var$curPunc = null;\n        if (stream.sol()) state.indented = stream.indentation();\n        var style = state.tokenize[state.tokenize.length - 1](stream, state), kwtype;\n        var thisTok = $8acb673e3be3ad8b$var$curPunc;\n        if (style == \"variable\") {\n            var word = stream.current();\n            style = state.lastTok == \".\" ? \"property\" : $8acb673e3be3ad8b$var$keywords.propertyIsEnumerable(stream.current()) ? \"keyword\" : /^[A-Z]/.test(word) ? \"tag\" : state.lastTok == \"def\" || state.lastTok == \"class\" || state.varList ? \"def\" : \"variable\";\n            if (style == \"keyword\") {\n                thisTok = word;\n                if ($8acb673e3be3ad8b$var$indentWords.propertyIsEnumerable(word)) kwtype = \"indent\";\n                else if ($8acb673e3be3ad8b$var$dedentWords.propertyIsEnumerable(word)) kwtype = \"dedent\";\n                else if ((word == \"if\" || word == \"unless\") && stream.column() == stream.indentation()) kwtype = \"indent\";\n                else if (word == \"do\" && state.context.indented < state.indented) kwtype = \"indent\";\n            }\n        }\n        if ($8acb673e3be3ad8b$var$curPunc || style && style != \"comment\") state.lastTok = thisTok;\n        if ($8acb673e3be3ad8b$var$curPunc == \"|\") state.varList = !state.varList;\n        if (kwtype == \"indent\" || /[\\(\\[\\{]/.test($8acb673e3be3ad8b$var$curPunc)) state.context = {\n            prev: state.context,\n            type: $8acb673e3be3ad8b$var$curPunc || style,\n            indented: state.indented\n        };\n        else if ((kwtype == \"dedent\" || /[\\)\\]\\}]/.test($8acb673e3be3ad8b$var$curPunc)) && state.context.prev) state.context = state.context.prev;\n        if (stream.eol()) state.continuedLine = $8acb673e3be3ad8b$var$curPunc == \"\\\\\" || style == \"operator\";\n        return style;\n    },\n    indent: function(state, textAfter, cx) {\n        if (state.tokenize[state.tokenize.length - 1] != $8acb673e3be3ad8b$var$tokenBase) return null;\n        var firstChar = textAfter && textAfter.charAt(0);\n        var ct = state.context;\n        var closed = ct.type == $8acb673e3be3ad8b$var$closing[firstChar] || ct.type == \"keyword\" && /^(?:end|until|else|elsif|when|rescue)\\b/.test(textAfter);\n        return ct.indented + (closed ? 0 : cx.unit) + (state.continuedLine ? cx.unit : 0);\n    },\n    languageData: {\n        indentOnInput: /^\\s*(?:end|rescue|elsif|else|\\})$/,\n        commentTokens: {\n            line: \"#\"\n        },\n        autocomplete: $8acb673e3be3ad8b$var$keywordList\n    }\n};\n\n});\n\n\n//# sourceMappingURL=ruby.d9176653.js.map\n","function wordObj(words) {\n  var o = {};\n  for (var i = 0, e = words.length; i < e; ++i) o[words[i]] = true;\n  return o;\n}\n\nvar keywordList = [\n  \"alias\", \"and\", \"BEGIN\", \"begin\", \"break\", \"case\", \"class\", \"def\", \"defined?\", \"do\", \"else\",\n  \"elsif\", \"END\", \"end\", \"ensure\", \"false\", \"for\", \"if\", \"in\", \"module\", \"next\", \"not\", \"or\",\n  \"redo\", \"rescue\", \"retry\", \"return\", \"self\", \"super\", \"then\", \"true\", \"undef\", \"unless\",\n  \"until\", \"when\", \"while\", \"yield\", \"nil\", \"raise\", \"throw\", \"catch\", \"fail\", \"loop\", \"callcc\",\n  \"caller\", \"lambda\", \"proc\", \"public\", \"protected\", \"private\", \"require\", \"load\",\n  \"require_relative\", \"extend\", \"autoload\", \"__END__\", \"__FILE__\", \"__LINE__\", \"__dir__\"\n], keywords = wordObj(keywordList);\n\nvar indentWords = wordObj([\"def\", \"class\", \"case\", \"for\", \"while\", \"until\", \"module\",\n                           \"catch\", \"loop\", \"proc\", \"begin\"]);\nvar dedentWords = wordObj([\"end\", \"until\"]);\nvar opening = {\"[\": \"]\", \"{\": \"}\", \"(\": \")\"};\nvar closing = {\"]\": \"[\", \"}\": \"{\", \")\": \"(\"};\n\nvar curPunc;\n\nfunction chain(newtok, stream, state) {\n  state.tokenize.push(newtok);\n  return newtok(stream, state);\n}\n\nfunction tokenBase(stream, state) {\n  if (stream.sol() && stream.match(\"=begin\") && stream.eol()) {\n    state.tokenize.push(readBlockComment);\n    return \"comment\";\n  }\n  if (stream.eatSpace()) return null;\n  var ch = stream.next(), m;\n  if (ch == \"`\" || ch == \"'\" || ch == '\"') {\n    return chain(readQuoted(ch, \"string\", ch == '\"' || ch == \"`\"), stream, state);\n  } else if (ch == \"/\") {\n    if (regexpAhead(stream))\n      return chain(readQuoted(ch, \"string.special\", true), stream, state);\n    else\n      return \"operator\";\n  } else if (ch == \"%\") {\n    var style = \"string\", embed = true;\n    if (stream.eat(\"s\")) style = \"atom\";\n    else if (stream.eat(/[WQ]/)) style = \"string\";\n    else if (stream.eat(/[r]/)) style = \"string.special\";\n    else if (stream.eat(/[wxq]/)) { style = \"string\"; embed = false; }\n    var delim = stream.eat(/[^\\w\\s=]/);\n    if (!delim) return \"operator\";\n    if (opening.propertyIsEnumerable(delim)) delim = opening[delim];\n    return chain(readQuoted(delim, style, embed, true), stream, state);\n  } else if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  } else if (ch == \"<\" && (m = stream.match(/^<([-~])[\\`\\\"\\']?([a-zA-Z_?]\\w*)[\\`\\\"\\']?(?:;|$)/))) {\n    return chain(readHereDoc(m[2], m[1]), stream, state);\n  } else if (ch == \"0\") {\n    if (stream.eat(\"x\")) stream.eatWhile(/[\\da-fA-F]/);\n    else if (stream.eat(\"b\")) stream.eatWhile(/[01]/);\n    else stream.eatWhile(/[0-7]/);\n    return \"number\";\n  } else if (/\\d/.test(ch)) {\n    stream.match(/^[\\d_]*(?:\\.[\\d_]+)?(?:[eE][+\\-]?[\\d_]+)?/);\n    return \"number\";\n  } else if (ch == \"?\") {\n    while (stream.match(/^\\\\[CM]-/)) {}\n    if (stream.eat(\"\\\\\")) stream.eatWhile(/\\w/);\n    else stream.next();\n    return \"string\";\n  } else if (ch == \":\") {\n    if (stream.eat(\"'\")) return chain(readQuoted(\"'\", \"atom\", false), stream, state);\n    if (stream.eat('\"')) return chain(readQuoted('\"', \"atom\", true), stream, state);\n\n    // :> :>> :< :<< are valid symbols\n    if (stream.eat(/[\\<\\>]/)) {\n      stream.eat(/[\\<\\>]/);\n      return \"atom\";\n    }\n\n    // :+ :- :/ :* :| :& :! are valid symbols\n    if (stream.eat(/[\\+\\-\\*\\/\\&\\|\\:\\!]/)) {\n      return \"atom\";\n    }\n\n    // Symbols can't start by a digit\n    if (stream.eat(/[a-zA-Z$@_\\xa1-\\uffff]/)) {\n      stream.eatWhile(/[\\w$\\xa1-\\uffff]/);\n      // Only one ? ! = is allowed and only as the last character\n      stream.eat(/[\\?\\!\\=]/);\n      return \"atom\";\n    }\n    return \"operator\";\n  } else if (ch == \"@\" && stream.match(/^@?[a-zA-Z_\\xa1-\\uffff]/)) {\n    stream.eat(\"@\");\n    stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n    return \"propertyName\";\n  } else if (ch == \"$\") {\n    if (stream.eat(/[a-zA-Z_]/)) {\n      stream.eatWhile(/[\\w]/);\n    } else if (stream.eat(/\\d/)) {\n      stream.eat(/\\d/);\n    } else {\n      stream.next(); // Must be a special global like $: or $!\n    }\n    return \"variableName.special\";\n  } else if (/[a-zA-Z_\\xa1-\\uffff]/.test(ch)) {\n    stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n    stream.eat(/[\\?\\!]/);\n    if (stream.eat(\":\")) return \"atom\";\n    return \"variable\";\n  } else if (ch == \"|\" && (state.varList || state.lastTok == \"{\" || state.lastTok == \"do\")) {\n    curPunc = \"|\";\n    return null;\n  } else if (/[\\(\\)\\[\\]{}\\\\;]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  } else if (ch == \"-\" && stream.eat(\">\")) {\n    return \"operator\";\n  } else if (/[=+\\-\\/*:\\.^%<>~|]/.test(ch)) {\n    var more = stream.eatWhile(/[=+\\-\\/*:\\.^%<>~|]/);\n    if (ch == \".\" && !more) curPunc = \".\";\n    return \"operator\";\n  } else {\n    return null;\n  }\n}\n\nfunction regexpAhead(stream) {\n  var start = stream.pos, depth = 0, next, found = false, escaped = false\n  while ((next = stream.next()) != null) {\n    if (!escaped) {\n      if (\"[{(\".indexOf(next) > -1) {\n        depth++\n      } else if (\"]})\".indexOf(next) > -1) {\n        depth--\n        if (depth < 0) break\n      } else if (next == \"/\" && depth == 0) {\n        found = true\n        break\n      }\n      escaped = next == \"\\\\\"\n    } else {\n      escaped = false\n    }\n  }\n  stream.backUp(stream.pos - start)\n  return found\n}\n\nfunction tokenBaseUntilBrace(depth) {\n  if (!depth) depth = 1;\n  return function(stream, state) {\n    if (stream.peek() == \"}\") {\n      if (depth == 1) {\n        state.tokenize.pop();\n        return state.tokenize[state.tokenize.length-1](stream, state);\n      } else {\n        state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth - 1);\n      }\n    } else if (stream.peek() == \"{\") {\n      state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth + 1);\n    }\n    return tokenBase(stream, state);\n  };\n}\nfunction tokenBaseOnce() {\n  var alreadyCalled = false;\n  return function(stream, state) {\n    if (alreadyCalled) {\n      state.tokenize.pop();\n      return state.tokenize[state.tokenize.length-1](stream, state);\n    }\n    alreadyCalled = true;\n    return tokenBase(stream, state);\n  };\n}\nfunction readQuoted(quote, style, embed, unescaped) {\n  return function(stream, state) {\n    var escaped = false, ch;\n\n    if (state.context.type === 'read-quoted-paused') {\n      state.context = state.context.prev;\n      stream.eat(\"}\");\n    }\n\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && (unescaped || !escaped)) {\n        state.tokenize.pop();\n        break;\n      }\n      if (embed && ch == \"#\" && !escaped) {\n        if (stream.eat(\"{\")) {\n          if (quote == \"}\") {\n            state.context = {prev: state.context, type: 'read-quoted-paused'};\n          }\n          state.tokenize.push(tokenBaseUntilBrace());\n          break;\n        } else if (/[@\\$]/.test(stream.peek())) {\n          state.tokenize.push(tokenBaseOnce());\n          break;\n        }\n      }\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    return style;\n  };\n}\nfunction readHereDoc(phrase, mayIndent) {\n  return function(stream, state) {\n    if (mayIndent) stream.eatSpace()\n    if (stream.match(phrase)) state.tokenize.pop();\n    else stream.skipToEnd();\n    return \"string\";\n  };\n}\nfunction readBlockComment(stream, state) {\n  if (stream.sol() && stream.match(\"=end\") && stream.eol())\n    state.tokenize.pop();\n  stream.skipToEnd();\n  return \"comment\";\n}\n\nexport const ruby = {\n  name: \"ruby\",\n  startState: function(indentUnit) {\n    return {tokenize: [tokenBase],\n            indented: 0,\n            context: {type: \"top\", indented: -indentUnit},\n            continuedLine: false,\n            lastTok: null,\n            varList: false};\n  },\n\n  token: function(stream, state) {\n    curPunc = null;\n    if (stream.sol()) state.indented = stream.indentation();\n    var style = state.tokenize[state.tokenize.length-1](stream, state), kwtype;\n    var thisTok = curPunc;\n    if (style == \"variable\") {\n      var word = stream.current();\n      style = state.lastTok == \".\" ? \"property\"\n        : keywords.propertyIsEnumerable(stream.current()) ? \"keyword\"\n        : /^[A-Z]/.test(word) ? \"tag\"\n        : (state.lastTok == \"def\" || state.lastTok == \"class\" || state.varList) ? \"def\"\n        : \"variable\";\n      if (style == \"keyword\") {\n        thisTok = word;\n        if (indentWords.propertyIsEnumerable(word)) kwtype = \"indent\";\n        else if (dedentWords.propertyIsEnumerable(word)) kwtype = \"dedent\";\n        else if ((word == \"if\" || word == \"unless\") && stream.column() == stream.indentation())\n          kwtype = \"indent\";\n        else if (word == \"do\" && state.context.indented < state.indented)\n          kwtype = \"indent\";\n      }\n    }\n    if (curPunc || (style && style != \"comment\")) state.lastTok = thisTok;\n    if (curPunc == \"|\") state.varList = !state.varList;\n\n    if (kwtype == \"indent\" || /[\\(\\[\\{]/.test(curPunc))\n      state.context = {prev: state.context, type: curPunc || style, indented: state.indented};\n    else if ((kwtype == \"dedent\" || /[\\)\\]\\}]/.test(curPunc)) && state.context.prev)\n      state.context = state.context.prev;\n\n    if (stream.eol())\n      state.continuedLine = (curPunc == \"\\\\\" || style == \"operator\");\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    if (state.tokenize[state.tokenize.length-1] != tokenBase) return null;\n    var firstChar = textAfter && textAfter.charAt(0);\n    var ct = state.context;\n    var closed = ct.type == closing[firstChar] ||\n        ct.type == \"keyword\" && /^(?:end|until|else|elsif|when|rescue)\\b/.test(textAfter);\n    return ct.indented + (closed ? 0 : cx.unit) +\n      (state.continuedLine ? cx.unit : 0);\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*(?:end|rescue|elsif|else|\\})$/,\n    commentTokens: {line: \"#\"},\n    autocomplete: keywordList\n  }\n};\n\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","$8acb673e3be3ad8b$var$wordObj","words","o","i","e","length","Object","defineProperty","get","$8acb673e3be3ad8b$export$f2b283820b448b35","set","s","enumerable","configurable","$8acb673e3be3ad8b$var$curPunc","$8acb673e3be3ad8b$var$keywordList","$8acb673e3be3ad8b$var$keywords","$8acb673e3be3ad8b$var$indentWords","$8acb673e3be3ad8b$var$dedentWords","$8acb673e3be3ad8b$var$opening","$8acb673e3be3ad8b$var$closing","$8acb673e3be3ad8b$var$chain","newtok","stream","state","tokenize","push","$8acb673e3be3ad8b$var$tokenBase","sol","match","eol","$8acb673e3be3ad8b$var$readBlockComment","eatSpace","phrase","mayIndent","m","ch","next","$8acb673e3be3ad8b$var$readQuoted","$8acb673e3be3ad8b$var$regexpAhead","start","pos","depth","found","escaped","indexOf","backUp","style","embed","eat","delim","propertyIsEnumerable","skipToEnd","pop","eatWhile","test","varList","lastTok","more","quote","unescaped","context","type","prev","$8acb673e3be3ad8b$var$tokenBaseUntilBrace","peek","$8acb673e3be3ad8b$var$tokenBaseOnce","alreadyCalled","name","startState","indentUnit","indented","continuedLine","token","indentation","kwtype","thisTok","word","current","column","indent","textAfter","cx","firstChar","charAt","ct","closed","unit","languageData","indentOnInput","commentTokens","line","autocomplete"],"version":3,"file":"ruby.d9176653.js.map"}