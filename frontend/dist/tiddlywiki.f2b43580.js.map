{"mappings":"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","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/tiddlywiki.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"grYiy\", function(module, exports) {\n\n$parcel$export(module.exports, \"tiddlyWiki\", () => $bf9df0eddc373e61$export$7c248d1aa464526a);\n// Tokenizer\nvar $bf9df0eddc373e61$var$textwords = {};\nvar $bf9df0eddc373e61$var$keywords = {\n    \"allTags\": true,\n    \"closeAll\": true,\n    \"list\": true,\n    \"newJournal\": true,\n    \"newTiddler\": true,\n    \"permaview\": true,\n    \"saveChanges\": true,\n    \"search\": true,\n    \"slider\": true,\n    \"tabs\": true,\n    \"tag\": true,\n    \"tagging\": true,\n    \"tags\": true,\n    \"tiddler\": true,\n    \"timeline\": true,\n    \"today\": true,\n    \"version\": true,\n    \"option\": true,\n    \"with\": true,\n    \"filter\": true\n};\nvar $bf9df0eddc373e61$var$isSpaceName = /[\\w_\\-]/i, $bf9df0eddc373e61$var$reHR = /^\\-\\-\\-\\-+$/, $bf9df0eddc373e61$var$reWikiCommentStart = /^\\/\\*\\*\\*$/, $bf9df0eddc373e61$var$reWikiCommentStop = /^\\*\\*\\*\\/$/, $bf9df0eddc373e61$var$reBlockQuote = /^<<<$/, $bf9df0eddc373e61$var$reJsCodeStart = /^\\/\\/\\{\\{\\{$/, $bf9df0eddc373e61$var$reJsCodeStop = /^\\/\\/\\}\\}\\}$/, $bf9df0eddc373e61$var$reXmlCodeStart = /^<!--\\{\\{\\{-->$/, $bf9df0eddc373e61$var$reXmlCodeStop = /^<!--\\}\\}\\}-->$/, $bf9df0eddc373e61$var$reCodeBlockStart = /^\\{\\{\\{$/, $bf9df0eddc373e61$var$reCodeBlockStop = /^\\}\\}\\}$/, $bf9df0eddc373e61$var$reUntilCodeStop = /.*?\\}\\}\\}/;\nfunction $bf9df0eddc373e61$var$chain(stream, state, f) {\n    state.tokenize = f;\n    return f(stream, state);\n}\nfunction $bf9df0eddc373e61$var$tokenBase(stream, state) {\n    var sol = stream.sol(), ch = stream.peek();\n    state.block = false; // indicates the start of a code block.\n    // check start of  blocks\n    if (sol && /[<\\/\\*{}\\-]/.test(ch)) {\n        if (stream.match($bf9df0eddc373e61$var$reCodeBlockStart)) {\n            state.block = true;\n            return $bf9df0eddc373e61$var$chain(stream, state, $bf9df0eddc373e61$var$twTokenCode);\n        }\n        if (stream.match($bf9df0eddc373e61$var$reBlockQuote)) return 'quote';\n        if (stream.match($bf9df0eddc373e61$var$reWikiCommentStart) || stream.match($bf9df0eddc373e61$var$reWikiCommentStop)) return 'comment';\n        if (stream.match($bf9df0eddc373e61$var$reJsCodeStart) || stream.match($bf9df0eddc373e61$var$reJsCodeStop) || stream.match($bf9df0eddc373e61$var$reXmlCodeStart) || stream.match($bf9df0eddc373e61$var$reXmlCodeStop)) return 'comment';\n        if (stream.match($bf9df0eddc373e61$var$reHR)) return 'contentSeparator';\n    }\n    stream.next();\n    if (sol && /[\\/\\*!#;:>|]/.test(ch)) {\n        if (ch == \"!\") {\n            stream.skipToEnd();\n            return \"header\";\n        }\n        if (ch == \"*\") {\n            stream.eatWhile('*');\n            return \"comment\";\n        }\n        if (ch == \"#\") {\n            stream.eatWhile('#');\n            return \"comment\";\n        }\n        if (ch == \";\") {\n            stream.eatWhile(';');\n            return \"comment\";\n        }\n        if (ch == \":\") {\n            stream.eatWhile(':');\n            return \"comment\";\n        }\n        if (ch == \">\") {\n            stream.eatWhile(\">\");\n            return \"quote\";\n        }\n        if (ch == '|') return 'header';\n    }\n    if (ch == '{' && stream.match('{{')) return $bf9df0eddc373e61$var$chain(stream, state, $bf9df0eddc373e61$var$twTokenCode);\n    // rudimentary html:// file:// link matching. TW knows much more ...\n    if (/[hf]/i.test(ch) && /[ti]/i.test(stream.peek()) && stream.match(/\\b(ttps?|tp|ile):\\/\\/[\\-A-Z0-9+&@#\\/%?=~_|$!:,.;]*[A-Z0-9+&@#\\/%=~_|$]/i)) return \"link\";\n    // just a little string indicator, don't want to have the whole string covered\n    if (ch == '\"') return 'string';\n    if (ch == '~') return 'brace';\n    if (/[\\[\\]]/.test(ch) && stream.match(ch)) return 'brace';\n    if (ch == \"@\") {\n        stream.eatWhile($bf9df0eddc373e61$var$isSpaceName);\n        return \"link\";\n    }\n    if (/\\d/.test(ch)) {\n        stream.eatWhile(/\\d/);\n        return \"number\";\n    }\n    if (ch == \"/\") {\n        if (stream.eat(\"%\")) return $bf9df0eddc373e61$var$chain(stream, state, $bf9df0eddc373e61$var$twTokenComment);\n        else if (stream.eat(\"/\")) return $bf9df0eddc373e61$var$chain(stream, state, $bf9df0eddc373e61$var$twTokenEm);\n    }\n    if (ch == \"_\" && stream.eat(\"_\")) return $bf9df0eddc373e61$var$chain(stream, state, $bf9df0eddc373e61$var$twTokenUnderline);\n    // strikethrough and mdash handling\n    if (ch == \"-\" && stream.eat(\"-\")) {\n        // if strikethrough looks ugly, change CSS.\n        if (stream.peek() != ' ') return $bf9df0eddc373e61$var$chain(stream, state, $bf9df0eddc373e61$var$twTokenStrike);\n        // mdash\n        if (stream.peek() == ' ') return 'brace';\n    }\n    if (ch == \"'\" && stream.eat(\"'\")) return $bf9df0eddc373e61$var$chain(stream, state, $bf9df0eddc373e61$var$twTokenStrong);\n    if (ch == \"<\" && stream.eat(\"<\")) return $bf9df0eddc373e61$var$chain(stream, state, $bf9df0eddc373e61$var$twTokenMacro);\n    // core macro handling\n    stream.eatWhile(/[\\w\\$_]/);\n    return $bf9df0eddc373e61$var$textwords.propertyIsEnumerable(stream.current()) ? \"keyword\" : null;\n}\n// tw invisible comment\nfunction $bf9df0eddc373e61$var$twTokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while(ch = stream.next()){\n        if (ch == \"/\" && maybeEnd) {\n            state.tokenize = $bf9df0eddc373e61$var$tokenBase;\n            break;\n        }\n        maybeEnd = ch == \"%\";\n    }\n    return \"comment\";\n}\n// tw strong / bold\nfunction $bf9df0eddc373e61$var$twTokenStrong(stream, state) {\n    var maybeEnd = false, ch;\n    while(ch = stream.next()){\n        if (ch == \"'\" && maybeEnd) {\n            state.tokenize = $bf9df0eddc373e61$var$tokenBase;\n            break;\n        }\n        maybeEnd = ch == \"'\";\n    }\n    return \"strong\";\n}\n// tw code\nfunction $bf9df0eddc373e61$var$twTokenCode(stream, state) {\n    var sb = state.block;\n    if (sb && stream.current()) return \"comment\";\n    if (!sb && stream.match($bf9df0eddc373e61$var$reUntilCodeStop)) {\n        state.tokenize = $bf9df0eddc373e61$var$tokenBase;\n        return \"comment\";\n    }\n    if (sb && stream.sol() && stream.match($bf9df0eddc373e61$var$reCodeBlockStop)) {\n        state.tokenize = $bf9df0eddc373e61$var$tokenBase;\n        return \"comment\";\n    }\n    stream.next();\n    return \"comment\";\n}\n// tw em / italic\nfunction $bf9df0eddc373e61$var$twTokenEm(stream, state) {\n    var maybeEnd = false, ch;\n    while(ch = stream.next()){\n        if (ch == \"/\" && maybeEnd) {\n            state.tokenize = $bf9df0eddc373e61$var$tokenBase;\n            break;\n        }\n        maybeEnd = ch == \"/\";\n    }\n    return \"emphasis\";\n}\n// tw underlined text\nfunction $bf9df0eddc373e61$var$twTokenUnderline(stream, state) {\n    var maybeEnd = false, ch;\n    while(ch = stream.next()){\n        if (ch == \"_\" && maybeEnd) {\n            state.tokenize = $bf9df0eddc373e61$var$tokenBase;\n            break;\n        }\n        maybeEnd = ch == \"_\";\n    }\n    return \"link\";\n}\n// tw strike through text looks ugly\n// change CSS if needed\nfunction $bf9df0eddc373e61$var$twTokenStrike(stream, state) {\n    var maybeEnd = false, ch;\n    while(ch = stream.next()){\n        if (ch == \"-\" && maybeEnd) {\n            state.tokenize = $bf9df0eddc373e61$var$tokenBase;\n            break;\n        }\n        maybeEnd = ch == \"-\";\n    }\n    return \"deleted\";\n}\n// macro\nfunction $bf9df0eddc373e61$var$twTokenMacro(stream, state) {\n    if (stream.current() == '<<') return 'meta';\n    var ch = stream.next();\n    if (!ch) {\n        state.tokenize = $bf9df0eddc373e61$var$tokenBase;\n        return null;\n    }\n    if (ch == \">\") {\n        if (stream.peek() == '>') {\n            stream.next();\n            state.tokenize = $bf9df0eddc373e61$var$tokenBase;\n            return \"meta\";\n        }\n    }\n    stream.eatWhile(/[\\w\\$_]/);\n    return $bf9df0eddc373e61$var$keywords.propertyIsEnumerable(stream.current()) ? \"keyword\" : null;\n}\nconst $bf9df0eddc373e61$export$7c248d1aa464526a = {\n    name: \"tiddlywiki\",\n    startState: function() {\n        return {\n            tokenize: $bf9df0eddc373e61$var$tokenBase\n        };\n    },\n    token: function(stream, state) {\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        return style;\n    }\n};\n\n});\n\n\n//# sourceMappingURL=tiddlywiki.f2b43580.js.map\n","// Tokenizer\nvar textwords = {};\n\nvar keywords = {\n  \"allTags\": true, \"closeAll\": true, \"list\": true,\n  \"newJournal\": true, \"newTiddler\": true,\n  \"permaview\": true, \"saveChanges\": true,\n  \"search\": true, \"slider\": true, \"tabs\": true,\n  \"tag\": true, \"tagging\": true, \"tags\": true,\n  \"tiddler\": true, \"timeline\": true,\n  \"today\": true, \"version\": true, \"option\": true,\n  \"with\": true, \"filter\": true\n};\n\nvar isSpaceName = /[\\w_\\-]/i,\n    reHR = /^\\-\\-\\-\\-+$/,                                 // <hr>\n    reWikiCommentStart = /^\\/\\*\\*\\*$/,            // /***\n    reWikiCommentStop = /^\\*\\*\\*\\/$/,             // ***/\n    reBlockQuote = /^<<<$/,\n\n    reJsCodeStart = /^\\/\\/\\{\\{\\{$/,                       // //{{{ js block start\n    reJsCodeStop = /^\\/\\/\\}\\}\\}$/,                        // //}}} js stop\n    reXmlCodeStart = /^<!--\\{\\{\\{-->$/,           // xml block start\n    reXmlCodeStop = /^<!--\\}\\}\\}-->$/,            // xml stop\n\n    reCodeBlockStart = /^\\{\\{\\{$/,                        // {{{ TW text div block start\n    reCodeBlockStop = /^\\}\\}\\}$/,                 // }}} TW text stop\n\n    reUntilCodeStop = /.*?\\}\\}\\}/;\n\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\n\nfunction tokenBase(stream, state) {\n  var sol = stream.sol(), ch = stream.peek();\n\n  state.block = false;        // indicates the start of a code block.\n\n  // check start of  blocks\n  if (sol && /[<\\/\\*{}\\-]/.test(ch)) {\n    if (stream.match(reCodeBlockStart)) {\n      state.block = true;\n      return chain(stream, state, twTokenCode);\n    }\n    if (stream.match(reBlockQuote))\n      return 'quote';\n    if (stream.match(reWikiCommentStart) || stream.match(reWikiCommentStop))\n      return 'comment';\n    if (stream.match(reJsCodeStart) || stream.match(reJsCodeStop) || stream.match(reXmlCodeStart) || stream.match(reXmlCodeStop))\n      return 'comment';\n    if (stream.match(reHR))\n      return 'contentSeparator';\n  }\n\n  stream.next();\n  if (sol && /[\\/\\*!#;:>|]/.test(ch)) {\n    if (ch == \"!\") { // tw header\n      stream.skipToEnd();\n      return \"header\";\n    }\n    if (ch == \"*\") { // tw list\n      stream.eatWhile('*');\n      return \"comment\";\n    }\n    if (ch == \"#\") { // tw numbered list\n      stream.eatWhile('#');\n      return \"comment\";\n    }\n    if (ch == \";\") { // definition list, term\n      stream.eatWhile(';');\n      return \"comment\";\n    }\n    if (ch == \":\") { // definition list, description\n      stream.eatWhile(':');\n      return \"comment\";\n    }\n    if (ch == \">\") { // single line quote\n      stream.eatWhile(\">\");\n      return \"quote\";\n    }\n    if (ch == '|')\n      return 'header';\n  }\n\n  if (ch == '{' && stream.match('{{'))\n    return chain(stream, state, twTokenCode);\n\n  // rudimentary html:// file:// link matching. TW knows much more ...\n  if (/[hf]/i.test(ch) &&\n      /[ti]/i.test(stream.peek()) &&\n      stream.match(/\\b(ttps?|tp|ile):\\/\\/[\\-A-Z0-9+&@#\\/%?=~_|$!:,.;]*[A-Z0-9+&@#\\/%=~_|$]/i))\n    return \"link\";\n\n  // just a little string indicator, don't want to have the whole string covered\n  if (ch == '\"')\n    return 'string';\n\n  if (ch == '~')    // _no_ CamelCase indicator should be bold\n    return 'brace';\n\n  if (/[\\[\\]]/.test(ch) && stream.match(ch)) // check for [[..]]\n    return 'brace';\n\n  if (ch == \"@\") {    // check for space link. TODO fix @@...@@ highlighting\n    stream.eatWhile(isSpaceName);\n    return \"link\";\n  }\n\n  if (/\\d/.test(ch)) {        // numbers\n    stream.eatWhile(/\\d/);\n    return \"number\";\n  }\n\n  if (ch == \"/\") { // tw invisible comment\n    if (stream.eat(\"%\")) {\n      return chain(stream, state, twTokenComment);\n    } else if (stream.eat(\"/\")) { //\n      return chain(stream, state, twTokenEm);\n    }\n  }\n\n  if (ch == \"_\" && stream.eat(\"_\")) // tw underline\n    return chain(stream, state, twTokenUnderline);\n\n  // strikethrough and mdash handling\n  if (ch == \"-\" && stream.eat(\"-\")) {\n    // if strikethrough looks ugly, change CSS.\n    if (stream.peek() != ' ')\n      return chain(stream, state, twTokenStrike);\n    // mdash\n    if (stream.peek() == ' ')\n      return 'brace';\n  }\n\n  if (ch == \"'\" && stream.eat(\"'\")) // tw bold\n    return chain(stream, state, twTokenStrong);\n\n  if (ch == \"<\" && stream.eat(\"<\")) // tw macro\n    return chain(stream, state, twTokenMacro);\n\n  // core macro handling\n  stream.eatWhile(/[\\w\\$_]/);\n  return textwords.propertyIsEnumerable(stream.current()) ? \"keyword\" : null\n}\n\n// tw invisible comment\nfunction twTokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"%\");\n  }\n  return \"comment\";\n}\n\n// tw strong / bold\nfunction twTokenStrong(stream, state) {\n  var maybeEnd = false,\n      ch;\n  while (ch = stream.next()) {\n    if (ch == \"'\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"'\");\n  }\n  return \"strong\";\n}\n\n// tw code\nfunction twTokenCode(stream, state) {\n  var sb = state.block;\n\n  if (sb && stream.current()) {\n    return \"comment\";\n  }\n\n  if (!sb && stream.match(reUntilCodeStop)) {\n    state.tokenize = tokenBase;\n    return \"comment\";\n  }\n\n  if (sb && stream.sol() && stream.match(reCodeBlockStop)) {\n    state.tokenize = tokenBase;\n    return \"comment\";\n  }\n\n  stream.next();\n  return \"comment\";\n}\n\n// tw em / italic\nfunction twTokenEm(stream, state) {\n  var maybeEnd = false,\n      ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"/\");\n  }\n  return \"emphasis\";\n}\n\n// tw underlined text\nfunction twTokenUnderline(stream, state) {\n  var maybeEnd = false,\n      ch;\n  while (ch = stream.next()) {\n    if (ch == \"_\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"_\");\n  }\n  return \"link\";\n}\n\n// tw strike through text looks ugly\n// change CSS if needed\nfunction twTokenStrike(stream, state) {\n  var maybeEnd = false, ch;\n\n  while (ch = stream.next()) {\n    if (ch == \"-\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"-\");\n  }\n  return \"deleted\";\n}\n\n// macro\nfunction twTokenMacro(stream, state) {\n  if (stream.current() == '<<') {\n    return 'meta';\n  }\n\n  var ch = stream.next();\n  if (!ch) {\n    state.tokenize = tokenBase;\n    return null;\n  }\n  if (ch == \">\") {\n    if (stream.peek() == '>') {\n      stream.next();\n      state.tokenize = tokenBase;\n      return \"meta\";\n    }\n  }\n\n  stream.eatWhile(/[\\w\\$_]/);\n  return keywords.propertyIsEnumerable(stream.current()) ? \"keyword\" : null\n}\n\n// Interface\nexport const tiddlyWiki = {\n  name: \"tiddlywiki\",\n\n  startState: function () {\n    return {tokenize: tokenBase};\n  },\n\n  token: function (stream, state) {\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n    return style;\n  }\n};\n\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","Object","defineProperty","get","$bf9df0eddc373e61$export$7c248d1aa464526a","set","s","enumerable","configurable","$bf9df0eddc373e61$var$textwords","$bf9df0eddc373e61$var$keywords","$bf9df0eddc373e61$var$isSpaceName","$bf9df0eddc373e61$var$reHR","$bf9df0eddc373e61$var$reWikiCommentStart","$bf9df0eddc373e61$var$reWikiCommentStop","$bf9df0eddc373e61$var$reBlockQuote","$bf9df0eddc373e61$var$reJsCodeStart","$bf9df0eddc373e61$var$reJsCodeStop","$bf9df0eddc373e61$var$reXmlCodeStart","$bf9df0eddc373e61$var$reXmlCodeStop","$bf9df0eddc373e61$var$reCodeBlockStart","$bf9df0eddc373e61$var$reCodeBlockStop","$bf9df0eddc373e61$var$reUntilCodeStop","$bf9df0eddc373e61$var$chain","stream","state","f","tokenize","$bf9df0eddc373e61$var$tokenBase","sol","ch","peek","block","test","match","$bf9df0eddc373e61$var$twTokenCode","next","skipToEnd","eatWhile","eat","$bf9df0eddc373e61$var$twTokenComment","$bf9df0eddc373e61$var$twTokenEm","$bf9df0eddc373e61$var$twTokenUnderline","$bf9df0eddc373e61$var$twTokenStrike","$bf9df0eddc373e61$var$twTokenStrong","$bf9df0eddc373e61$var$twTokenMacro","propertyIsEnumerable","current","maybeEnd","sb","name","startState","token","eatSpace"],"version":3,"file":"tiddlywiki.f2b43580.js.map"}