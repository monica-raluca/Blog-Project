{"mappings":"A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,c,C,I,I,E,I,K,E,W,C,E,a,C,C,GCCA,IAAI,EAAa,6BAEb,EAAa,+BAEb,EAAa,YAAY,EAAO,MAGhC,EAAoB,AAAI,OAAO,mDAAmC,EAAW,2BAC7E,EAAoB,AAAI,OAAO,MAAQ,EAAS,EAAa,0BAC7D,EAAoB,AAAI,OAAO,YAAc,EAAa,WAAa,EAAa,aAExF,SAAS,EAAU,CAAM,CAAE,CAAK,EAC9B,IAAI,QAMJ,AAAI,AAAO,MAHX,CAAA,EAAK,EAAO,IAAI,EAAhB,GAIE,EAAM,QAAQ,CAAG,EACV,EAAM,QAAQ,CAAC,EAAQ,IAI5B,AAAO,MAAP,GACE,EAAO,GAAG,CAAC,MACb,EAAM,YAAY,GAClB,EAAM,QAAQ,CAAG,EACV,EAAM,QAAQ,CAAC,EAAQ,KAKlC,EAAO,MAAM,CAAC,GAIV,EAAO,KAAK,CAAC,EAAY,CAAA,EAAM,CAAA,IAM/B,EAAO,KAAK,CAAC,EAAa,CAAA,EAAM,CAAA,IAL3B,SAUL,EAAO,KAAK,CAAC,uBAAwB,CAAA,EAAM,CAAA,GACtC,OAIL,EAAO,KAAK,CAAC,wDAAyD,CAAA,EAAM,CAAA,GACvE,OAIL,EAAO,KAAK,CAAC,6EAA8E,CAAA,EAAM,CAAA,GAC5F,iBAKL,EAAO,KAAK,CAAC,kGAAmG,CAAA,EAAM,CAAA,IAOtH,EAAO,KAAK,CAAC,qDAAsD,CAAA,EAAM,CAAA,IAGzE,EAAO,KAAK,CAAC,6BAA8B,CAAA,EAAM,CAAA,IAGjD,EAAO,KAAK,CAAC,6BAA8B,CAAA,EAAM,CAAA,GAZ5C,uBAiBL,EAAO,KAAK,CAAC,iCAAkC,CAAA,EAAM,CAAA,GAChD,YAIL,EAAO,KAAK,CAAC,sBAAuB,CAAA,EAAM,CAAA,GACrC,UAKL,EAAO,KAAK,CAAC,yCAA0C,CAAA,EAAM,CAAA,GACxD,wBAIL,EAAO,KAAK,CAAC,EAAe,CAAA,EAAM,CAAA,GAC7B,UAIL,EAAO,KAAK,CAAC,6DAA8D,CAAA,EAAM,CAAA,GAC5E,YAIT,EAAO,IAAI,GACJ,QACT,CAEA,SAAS,EAAY,CAAM,CAAE,CAAK,EAEhC,IADA,IAAI,EAAM,EAAM,CAAA,EAAO,EAAU,CAAA,EACzB,AAAyB,MAAzB,CAAA,EAAO,EAAO,IAAI,EAAA,GAAa,CACrC,GAAI,AAAS,MAAT,GAAgB,CAAC,EAAS,CAC5B,EAAM,CAAA,EACN,KACF,CACA,EAAU,CAAC,GAAW,AAAS,OAAT,CACxB,CAIA,OAHI,GAAO,CAAC,GACV,CAAA,EAAM,QAAQ,CAAG,CADnB,EAGO,QACT,CAEA,SAAS,EAAa,CAAM,CAAE,CAAK,EAEjC,IADA,IAAI,EAAM,EACJ,EAAM,YAAY,CAAG,GAAK,AAA0B,MAAzB,CAAA,EAAO,EAAO,IAAI,EAAA,GAC7C,AAAS,MAAT,GAAgB,AAAS,MAAT,GAAc,EAAM,YAAY,GAChD,AAAS,MAAT,GAAgB,AAAS,MAAT,GAAc,EAAM,YAAY,GACpD,EAAO,EAKT,OAHI,EAAM,YAAY,EAAI,GACxB,CAAA,EAAM,QAAQ,CAAG,CADnB,EAGO,SACT,CAEO,IAAM,EAAc,CACzB,KAAM,cACN,WAAY,WAAY,MAAO,CAAC,SAAU,EAAW,aAAc,CAAC,CAAE,EACtE,MAAO,SAAS,CAAM,CAAE,CAAK,SAC3B,AAAI,EAAO,QAAQ,GAAW,KACvB,EAAM,QAAQ,CAAC,EAAQ,EAChC,EACA,aAAc,CACZ,cAAe,CAAC,MAAO,CAAC,KAAM,KAAM,MAAO,IAAI,CAAC,CAClD,CACF,C","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/mathematica.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"j8A0q\", function(module, exports) {\n\n$parcel$export(module.exports, \"mathematica\", () => $deeab1b1e7bbfe88$export$96b9f50eed9956f0);\n// used pattern building blocks\nvar $deeab1b1e7bbfe88$var$Identifier = '[a-zA-Z\\\\$][a-zA-Z0-9\\\\$]*';\nvar $deeab1b1e7bbfe88$var$pBase = \"(?:\\\\d+)\";\nvar $deeab1b1e7bbfe88$var$pFloat = \"(?:\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)\";\nvar $deeab1b1e7bbfe88$var$pFloatBase = \"(?:\\\\.\\\\w+|\\\\w+\\\\.\\\\w*|\\\\w+)\";\nvar $deeab1b1e7bbfe88$var$pPrecision = \"(?:`(?:`?\" + $deeab1b1e7bbfe88$var$pFloat + \")?)\";\n// regular expressions\nvar $deeab1b1e7bbfe88$var$reBaseForm = new RegExp('(?:' + $deeab1b1e7bbfe88$var$pBase + '(?:\\\\^\\\\^' + $deeab1b1e7bbfe88$var$pFloatBase + $deeab1b1e7bbfe88$var$pPrecision + '?(?:\\\\*\\\\^[+-]?\\\\d+)?))');\nvar $deeab1b1e7bbfe88$var$reFloatForm = new RegExp('(?:' + $deeab1b1e7bbfe88$var$pFloat + $deeab1b1e7bbfe88$var$pPrecision + '?(?:\\\\*\\\\^[+-]?\\\\d+)?)');\nvar $deeab1b1e7bbfe88$var$reIdInContext = new RegExp('(?:`?)(?:' + $deeab1b1e7bbfe88$var$Identifier + ')(?:`(?:' + $deeab1b1e7bbfe88$var$Identifier + '))*(?:`?)');\nfunction $deeab1b1e7bbfe88$var$tokenBase(stream, state) {\n    var ch;\n    // get next character\n    ch = stream.next();\n    // string\n    if (ch === '\"') {\n        state.tokenize = $deeab1b1e7bbfe88$var$tokenString;\n        return state.tokenize(stream, state);\n    }\n    // comment\n    if (ch === '(') {\n        if (stream.eat('*')) {\n            state.commentLevel++;\n            state.tokenize = $deeab1b1e7bbfe88$var$tokenComment;\n            return state.tokenize(stream, state);\n        }\n    }\n    // go back one character\n    stream.backUp(1);\n    // look for numbers\n    // Numbers in a baseform\n    if (stream.match($deeab1b1e7bbfe88$var$reBaseForm, true, false)) return 'number';\n    // Mathematica numbers. Floats (1.2, .2, 1.) can have optionally a precision (`float) or an accuracy definition\n    // (``float). Note: while 1.2` is possible 1.2`` is not. At the end an exponent (float*^+12) can follow.\n    if (stream.match($deeab1b1e7bbfe88$var$reFloatForm, true, false)) return 'number';\n    /* In[23] and Out[34] */ if (stream.match(/(?:In|Out)\\[[0-9]*\\]/, true, false)) return 'atom';\n    // usage\n    if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::usage)/, true, false)) return 'meta';\n    // message\n    if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::[a-zA-Z\\$][a-zA-Z0-9\\$]*):?/, true, false)) return 'string.special';\n    // this makes a look-ahead match for something like variable:{_Integer}\n    // the match is then forwarded to the mma-patterns tokenizer.\n    if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*\\s*:)(?:(?:[a-zA-Z\\$][a-zA-Z0-9\\$]*)|(?:[^:=>~@\\^\\&\\*\\)\\[\\]'\\?,\\|])).*/, true, false)) return 'variableName.special';\n    // catch variables which are used together with Blank (_), BlankSequence (__) or BlankNullSequence (___)\n    // Cannot start with a number, but can have numbers at any other position. Examples\n    // blub__Integer, a1_, b34_Integer32\n    if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) return 'variableName.special';\n    if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+/, true, false)) return 'variableName.special';\n    if (stream.match(/_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) return 'variableName.special';\n    // Named characters in Mathematica, like \\[Gamma].\n    if (stream.match(/\\\\\\[[a-zA-Z\\$][a-zA-Z0-9\\$]*\\]/, true, false)) return 'character';\n    // Match all braces separately\n    if (stream.match(/(?:\\[|\\]|{|}|\\(|\\))/, true, false)) return 'bracket';\n    // Catch Slots (#, ##, #3, ##9 and the V10 named slots #name). I have never seen someone using more than one digit after #, so we match\n    // only one.\n    if (stream.match(/(?:#[a-zA-Z\\$][a-zA-Z0-9\\$]*|#+[0-9]?)/, true, false)) return 'variableName.constant';\n    // Literals like variables, keywords, functions\n    if (stream.match($deeab1b1e7bbfe88$var$reIdInContext, true, false)) return 'keyword';\n    // operators. Note that operators like @@ or /; are matched separately for each symbol.\n    if (stream.match(/(?:\\\\|\\+|\\-|\\*|\\/|,|;|\\.|:|@|~|=|>|<|&|\\||_|`|'|\\^|\\?|!|%)/, true, false)) return 'operator';\n    // everything else is an error\n    stream.next(); // advance the stream.\n    return 'error';\n}\nfunction $deeab1b1e7bbfe88$var$tokenString(stream, state) {\n    var next, end = false, escaped = false;\n    while((next = stream.next()) != null){\n        if (next === '\"' && !escaped) {\n            end = true;\n            break;\n        }\n        escaped = !escaped && next === '\\\\';\n    }\n    if (end && !escaped) state.tokenize = $deeab1b1e7bbfe88$var$tokenBase;\n    return 'string';\n}\nfunction $deeab1b1e7bbfe88$var$tokenComment(stream, state) {\n    var prev, next;\n    while(state.commentLevel > 0 && (next = stream.next()) != null){\n        if (prev === '(' && next === '*') state.commentLevel++;\n        if (prev === '*' && next === ')') state.commentLevel--;\n        prev = next;\n    }\n    if (state.commentLevel <= 0) state.tokenize = $deeab1b1e7bbfe88$var$tokenBase;\n    return 'comment';\n}\nconst $deeab1b1e7bbfe88$export$96b9f50eed9956f0 = {\n    name: \"mathematica\",\n    startState: function() {\n        return {\n            tokenize: $deeab1b1e7bbfe88$var$tokenBase,\n            commentLevel: 0\n        };\n    },\n    token: function(stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n    },\n    languageData: {\n        commentTokens: {\n            block: {\n                open: \"(*\",\n                close: \"*)\"\n            }\n        }\n    }\n};\n\n});\n\n\n//# sourceMappingURL=mathematica.e003e5a6.js.map\n","// used pattern building blocks\nvar Identifier = '[a-zA-Z\\\\$][a-zA-Z0-9\\\\$]*';\nvar pBase      = \"(?:\\\\d+)\";\nvar pFloat     = \"(?:\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)\";\nvar pFloatBase = \"(?:\\\\.\\\\w+|\\\\w+\\\\.\\\\w*|\\\\w+)\";\nvar pPrecision = \"(?:`(?:`?\"+pFloat+\")?)\";\n\n// regular expressions\nvar reBaseForm        = new RegExp('(?:'+pBase+'(?:\\\\^\\\\^'+pFloatBase+pPrecision+'?(?:\\\\*\\\\^[+-]?\\\\d+)?))');\nvar reFloatForm       = new RegExp('(?:' + pFloat + pPrecision + '?(?:\\\\*\\\\^[+-]?\\\\d+)?)');\nvar reIdInContext     = new RegExp('(?:`?)(?:' + Identifier + ')(?:`(?:' + Identifier + '))*(?:`?)');\n\nfunction tokenBase(stream, state) {\n  var ch;\n\n  // get next character\n  ch = stream.next();\n\n  // string\n  if (ch === '\"') {\n    state.tokenize = tokenString;\n    return state.tokenize(stream, state);\n  }\n\n  // comment\n  if (ch === '(') {\n    if (stream.eat('*')) {\n      state.commentLevel++;\n      state.tokenize = tokenComment;\n      return state.tokenize(stream, state);\n    }\n  }\n\n  // go back one character\n  stream.backUp(1);\n\n  // look for numbers\n  // Numbers in a baseform\n  if (stream.match(reBaseForm, true, false)) {\n    return 'number';\n  }\n\n  // Mathematica numbers. Floats (1.2, .2, 1.) can have optionally a precision (`float) or an accuracy definition\n  // (``float). Note: while 1.2` is possible 1.2`` is not. At the end an exponent (float*^+12) can follow.\n  if (stream.match(reFloatForm, true, false)) {\n    return 'number';\n  }\n\n  /* In[23] and Out[34] */\n  if (stream.match(/(?:In|Out)\\[[0-9]*\\]/, true, false)) {\n    return 'atom';\n  }\n\n  // usage\n  if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::usage)/, true, false)) {\n    return 'meta';\n  }\n\n  // message\n  if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::[a-zA-Z\\$][a-zA-Z0-9\\$]*):?/, true, false)) {\n    return 'string.special';\n  }\n\n  // this makes a look-ahead match for something like variable:{_Integer}\n  // the match is then forwarded to the mma-patterns tokenizer.\n  if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*\\s*:)(?:(?:[a-zA-Z\\$][a-zA-Z0-9\\$]*)|(?:[^:=>~@\\^\\&\\*\\)\\[\\]'\\?,\\|])).*/, true, false)) {\n    return 'variableName.special';\n  }\n\n  // catch variables which are used together with Blank (_), BlankSequence (__) or BlankNullSequence (___)\n  // Cannot start with a number, but can have numbers at any other position. Examples\n  // blub__Integer, a1_, b34_Integer32\n  if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n    return 'variableName.special';\n  }\n  if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+/, true, false)) {\n    return 'variableName.special';\n  }\n  if (stream.match(/_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n    return 'variableName.special';\n  }\n\n  // Named characters in Mathematica, like \\[Gamma].\n  if (stream.match(/\\\\\\[[a-zA-Z\\$][a-zA-Z0-9\\$]*\\]/, true, false)) {\n    return 'character';\n  }\n\n  // Match all braces separately\n  if (stream.match(/(?:\\[|\\]|{|}|\\(|\\))/, true, false)) {\n    return 'bracket';\n  }\n\n  // Catch Slots (#, ##, #3, ##9 and the V10 named slots #name). I have never seen someone using more than one digit after #, so we match\n  // only one.\n  if (stream.match(/(?:#[a-zA-Z\\$][a-zA-Z0-9\\$]*|#+[0-9]?)/, true, false)) {\n    return 'variableName.constant';\n  }\n\n  // Literals like variables, keywords, functions\n  if (stream.match(reIdInContext, true, false)) {\n    return 'keyword';\n  }\n\n  // operators. Note that operators like @@ or /; are matched separately for each symbol.\n  if (stream.match(/(?:\\\\|\\+|\\-|\\*|\\/|,|;|\\.|:|@|~|=|>|<|&|\\||_|`|'|\\^|\\?|!|%)/, true, false)) {\n    return 'operator';\n  }\n\n  // everything else is an error\n  stream.next(); // advance the stream.\n  return 'error';\n}\n\nfunction tokenString(stream, state) {\n  var next, end = false, escaped = false;\n  while ((next = stream.next()) != null) {\n    if (next === '\"' && !escaped) {\n      end = true;\n      break;\n    }\n    escaped = !escaped && next === '\\\\';\n  }\n  if (end && !escaped) {\n    state.tokenize = tokenBase;\n  }\n  return 'string';\n};\n\nfunction tokenComment(stream, state) {\n  var prev, next;\n  while(state.commentLevel > 0 && (next = stream.next()) != null) {\n    if (prev === '(' && next === '*') state.commentLevel++;\n    if (prev === '*' && next === ')') state.commentLevel--;\n    prev = next;\n  }\n  if (state.commentLevel <= 0) {\n    state.tokenize = tokenBase;\n  }\n  return 'comment';\n}\n\nexport const mathematica = {\n  name: \"mathematica\",\n  startState: function() {return {tokenize: tokenBase, commentLevel: 0};},\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  },\n  languageData: {\n    commentTokens: {block: {open: \"(*\", close: \"*)\"}}\n  }\n}\n\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","Object","defineProperty","get","$deeab1b1e7bbfe88$export$96b9f50eed9956f0","set","s","enumerable","configurable","$deeab1b1e7bbfe88$var$Identifier","$deeab1b1e7bbfe88$var$pFloat","$deeab1b1e7bbfe88$var$pPrecision","$deeab1b1e7bbfe88$var$reBaseForm","RegExp","$deeab1b1e7bbfe88$var$reFloatForm","$deeab1b1e7bbfe88$var$reIdInContext","$deeab1b1e7bbfe88$var$tokenBase","stream","state","ch","next","tokenize","$deeab1b1e7bbfe88$var$tokenString","eat","commentLevel","$deeab1b1e7bbfe88$var$tokenComment","backUp","match","end","escaped","prev","name","startState","token","eatSpace","languageData","commentTokens","block","open","close"],"version":3,"file":"mathematica.e003e5a6.js.map"}