{"mappings":"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","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/erlang.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"ixqaI\", function(module, exports) {\n\n$parcel$export(module.exports, \"erlang\", () => $d7ef9c41588f665a$export$33bd282e45df82b);\n/////////////////////////////////////////////////////////////////////////////\n// constants\nvar $d7ef9c41588f665a$var$typeWords = [\n    \"-type\",\n    \"-spec\",\n    \"-export_type\",\n    \"-opaque\"\n];\nvar $d7ef9c41588f665a$var$keywordWords = [\n    \"after\",\n    \"begin\",\n    \"catch\",\n    \"case\",\n    \"cond\",\n    \"end\",\n    \"fun\",\n    \"if\",\n    \"let\",\n    \"of\",\n    \"query\",\n    \"receive\",\n    \"try\",\n    \"when\"\n];\nvar $d7ef9c41588f665a$var$separatorRE = /[\\->,;]/;\nvar $d7ef9c41588f665a$var$separatorWords = [\n    \"->\",\n    \";\",\n    \",\"\n];\nvar $d7ef9c41588f665a$var$operatorAtomWords = [\n    \"and\",\n    \"andalso\",\n    \"band\",\n    \"bnot\",\n    \"bor\",\n    \"bsl\",\n    \"bsr\",\n    \"bxor\",\n    \"div\",\n    \"not\",\n    \"or\",\n    \"orelse\",\n    \"rem\",\n    \"xor\"\n];\nvar $d7ef9c41588f665a$var$operatorSymbolRE = /[\\+\\-\\*\\/<>=\\|:!]/;\nvar $d7ef9c41588f665a$var$operatorSymbolWords = [\n    \"=\",\n    \"+\",\n    \"-\",\n    \"*\",\n    \"/\",\n    \">\",\n    \">=\",\n    \"<\",\n    \"=<\",\n    \"=:=\",\n    \"==\",\n    \"=/=\",\n    \"/=\",\n    \"||\",\n    \"<-\",\n    \"!\"\n];\nvar $d7ef9c41588f665a$var$openParenRE = /[<\\(\\[\\{]/;\nvar $d7ef9c41588f665a$var$openParenWords = [\n    \"<<\",\n    \"(\",\n    \"[\",\n    \"{\"\n];\nvar $d7ef9c41588f665a$var$closeParenRE = /[>\\)\\]\\}]/;\nvar $d7ef9c41588f665a$var$closeParenWords = [\n    \"}\",\n    \"]\",\n    \")\",\n    \">>\"\n];\nvar $d7ef9c41588f665a$var$guardWords = [\n    \"is_atom\",\n    \"is_binary\",\n    \"is_bitstring\",\n    \"is_boolean\",\n    \"is_float\",\n    \"is_function\",\n    \"is_integer\",\n    \"is_list\",\n    \"is_number\",\n    \"is_pid\",\n    \"is_port\",\n    \"is_record\",\n    \"is_reference\",\n    \"is_tuple\",\n    \"atom\",\n    \"binary\",\n    \"bitstring\",\n    \"boolean\",\n    \"function\",\n    \"integer\",\n    \"list\",\n    \"number\",\n    \"pid\",\n    \"port\",\n    \"record\",\n    \"reference\",\n    \"tuple\"\n];\nvar $d7ef9c41588f665a$var$bifWords = [\n    \"abs\",\n    \"adler32\",\n    \"adler32_combine\",\n    \"alive\",\n    \"apply\",\n    \"atom_to_binary\",\n    \"atom_to_list\",\n    \"binary_to_atom\",\n    \"binary_to_existing_atom\",\n    \"binary_to_list\",\n    \"binary_to_term\",\n    \"bit_size\",\n    \"bitstring_to_list\",\n    \"byte_size\",\n    \"check_process_code\",\n    \"contact_binary\",\n    \"crc32\",\n    \"crc32_combine\",\n    \"date\",\n    \"decode_packet\",\n    \"delete_module\",\n    \"disconnect_node\",\n    \"element\",\n    \"erase\",\n    \"exit\",\n    \"float\",\n    \"float_to_list\",\n    \"garbage_collect\",\n    \"get\",\n    \"get_keys\",\n    \"group_leader\",\n    \"halt\",\n    \"hd\",\n    \"integer_to_list\",\n    \"internal_bif\",\n    \"iolist_size\",\n    \"iolist_to_binary\",\n    \"is_alive\",\n    \"is_atom\",\n    \"is_binary\",\n    \"is_bitstring\",\n    \"is_boolean\",\n    \"is_float\",\n    \"is_function\",\n    \"is_integer\",\n    \"is_list\",\n    \"is_number\",\n    \"is_pid\",\n    \"is_port\",\n    \"is_process_alive\",\n    \"is_record\",\n    \"is_reference\",\n    \"is_tuple\",\n    \"length\",\n    \"link\",\n    \"list_to_atom\",\n    \"list_to_binary\",\n    \"list_to_bitstring\",\n    \"list_to_existing_atom\",\n    \"list_to_float\",\n    \"list_to_integer\",\n    \"list_to_pid\",\n    \"list_to_tuple\",\n    \"load_module\",\n    \"make_ref\",\n    \"module_loaded\",\n    \"monitor_node\",\n    \"node\",\n    \"node_link\",\n    \"node_unlink\",\n    \"nodes\",\n    \"notalive\",\n    \"now\",\n    \"open_port\",\n    \"pid_to_list\",\n    \"port_close\",\n    \"port_command\",\n    \"port_connect\",\n    \"port_control\",\n    \"pre_loaded\",\n    \"process_flag\",\n    \"process_info\",\n    \"processes\",\n    \"purge_module\",\n    \"put\",\n    \"register\",\n    \"registered\",\n    \"round\",\n    \"self\",\n    \"setelement\",\n    \"size\",\n    \"spawn\",\n    \"spawn_link\",\n    \"spawn_monitor\",\n    \"spawn_opt\",\n    \"split_binary\",\n    \"statistics\",\n    \"term_to_binary\",\n    \"time\",\n    \"throw\",\n    \"tl\",\n    \"trunc\",\n    \"tuple_size\",\n    \"tuple_to_list\",\n    \"unlink\",\n    \"unregister\",\n    \"whereis\"\n];\n// upper case: [A-Z] [Ø-Þ] [À-Ö]\n// lower case: [a-z] [ß-ö] [ø-ÿ]\nvar $d7ef9c41588f665a$var$anumRE = /[\\w@Ø-ÞÀ-Öß-öø-ÿ]/;\nvar $d7ef9c41588f665a$var$escapesRE = /[0-7]{1,3}|[bdefnrstv\\\\\"']|\\^[a-zA-Z]|x[0-9a-zA-Z]{2}|x{[0-9a-zA-Z]+}/;\n/////////////////////////////////////////////////////////////////////////////\n// tokenizer\nfunction $d7ef9c41588f665a$var$tokenizer(stream, state) {\n    // in multi-line string\n    if (state.in_string) {\n        state.in_string = !$d7ef9c41588f665a$var$doubleQuote(stream);\n        return $d7ef9c41588f665a$var$rval(state, stream, \"string\");\n    }\n    // in multi-line atom\n    if (state.in_atom) {\n        state.in_atom = !$d7ef9c41588f665a$var$singleQuote(stream);\n        return $d7ef9c41588f665a$var$rval(state, stream, \"atom\");\n    }\n    // whitespace\n    if (stream.eatSpace()) return $d7ef9c41588f665a$var$rval(state, stream, \"whitespace\");\n    // attributes and type specs\n    if (!$d7ef9c41588f665a$var$peekToken(state) && stream.match(/-\\s*[a-zß-öø-ÿ][\\wØ-ÞÀ-Öß-öø-ÿ]*/)) {\n        if ($d7ef9c41588f665a$var$is_member(stream.current(), $d7ef9c41588f665a$var$typeWords)) return $d7ef9c41588f665a$var$rval(state, stream, \"type\");\n        else return $d7ef9c41588f665a$var$rval(state, stream, \"attribute\");\n    }\n    var ch = stream.next();\n    // comment\n    if (ch == '%') {\n        stream.skipToEnd();\n        return $d7ef9c41588f665a$var$rval(state, stream, \"comment\");\n    }\n    // colon\n    if (ch == \":\") return $d7ef9c41588f665a$var$rval(state, stream, \"colon\");\n    // macro\n    if (ch == '?') {\n        stream.eatSpace();\n        stream.eatWhile($d7ef9c41588f665a$var$anumRE);\n        return $d7ef9c41588f665a$var$rval(state, stream, \"macro\");\n    }\n    // record\n    if (ch == \"#\") {\n        stream.eatSpace();\n        stream.eatWhile($d7ef9c41588f665a$var$anumRE);\n        return $d7ef9c41588f665a$var$rval(state, stream, \"record\");\n    }\n    // dollar escape\n    if (ch == \"$\") {\n        if (stream.next() == \"\\\\\" && !stream.match($d7ef9c41588f665a$var$escapesRE)) return $d7ef9c41588f665a$var$rval(state, stream, \"error\");\n        return $d7ef9c41588f665a$var$rval(state, stream, \"number\");\n    }\n    // dot\n    if (ch == \".\") return $d7ef9c41588f665a$var$rval(state, stream, \"dot\");\n    // quoted atom\n    if (ch == '\\'') {\n        if (!(state.in_atom = !$d7ef9c41588f665a$var$singleQuote(stream))) {\n            if (stream.match(/\\s*\\/\\s*[0-9]/, false)) {\n                stream.match(/\\s*\\/\\s*[0-9]/, true);\n                return $d7ef9c41588f665a$var$rval(state, stream, \"fun\"); // 'f'/0 style fun\n            }\n            if (stream.match(/\\s*\\(/, false) || stream.match(/\\s*:/, false)) return $d7ef9c41588f665a$var$rval(state, stream, \"function\");\n        }\n        return $d7ef9c41588f665a$var$rval(state, stream, \"atom\");\n    }\n    // string\n    if (ch == '\"') {\n        state.in_string = !$d7ef9c41588f665a$var$doubleQuote(stream);\n        return $d7ef9c41588f665a$var$rval(state, stream, \"string\");\n    }\n    // variable\n    if (/[A-Z_Ø-ÞÀ-Ö]/.test(ch)) {\n        stream.eatWhile($d7ef9c41588f665a$var$anumRE);\n        return $d7ef9c41588f665a$var$rval(state, stream, \"variable\");\n    }\n    // atom/keyword/BIF/function\n    if (/[a-z_ß-öø-ÿ]/.test(ch)) {\n        stream.eatWhile($d7ef9c41588f665a$var$anumRE);\n        if (stream.match(/\\s*\\/\\s*[0-9]/, false)) {\n            stream.match(/\\s*\\/\\s*[0-9]/, true);\n            return $d7ef9c41588f665a$var$rval(state, stream, \"fun\"); // f/0 style fun\n        }\n        var w = stream.current();\n        if ($d7ef9c41588f665a$var$is_member(w, $d7ef9c41588f665a$var$keywordWords)) return $d7ef9c41588f665a$var$rval(state, stream, \"keyword\");\n        else if ($d7ef9c41588f665a$var$is_member(w, $d7ef9c41588f665a$var$operatorAtomWords)) return $d7ef9c41588f665a$var$rval(state, stream, \"operator\");\n        else if (stream.match(/\\s*\\(/, false)) {\n            // 'put' and 'erlang:put' are bifs, 'foo:put' is not\n            if ($d7ef9c41588f665a$var$is_member(w, $d7ef9c41588f665a$var$bifWords) && ($d7ef9c41588f665a$var$peekToken(state).token != \":\" || $d7ef9c41588f665a$var$peekToken(state, 2).token == \"erlang\")) return $d7ef9c41588f665a$var$rval(state, stream, \"builtin\");\n            else if ($d7ef9c41588f665a$var$is_member(w, $d7ef9c41588f665a$var$guardWords)) return $d7ef9c41588f665a$var$rval(state, stream, \"guard\");\n            else return $d7ef9c41588f665a$var$rval(state, stream, \"function\");\n        } else if ($d7ef9c41588f665a$var$lookahead(stream) == \":\") {\n            if (w == \"erlang\") return $d7ef9c41588f665a$var$rval(state, stream, \"builtin\");\n            else return $d7ef9c41588f665a$var$rval(state, stream, \"function\");\n        } else if ($d7ef9c41588f665a$var$is_member(w, [\n            \"true\",\n            \"false\"\n        ])) return $d7ef9c41588f665a$var$rval(state, stream, \"boolean\");\n        else return $d7ef9c41588f665a$var$rval(state, stream, \"atom\");\n    }\n    // number\n    var digitRE = /[0-9]/;\n    var radixRE = /[0-9a-zA-Z]/; // 36#zZ style int\n    if (digitRE.test(ch)) {\n        stream.eatWhile(digitRE);\n        if (stream.eat('#')) {\n            if (!stream.eatWhile(radixRE)) stream.backUp(1); //\"36#\" - syntax error\n        } else if (stream.eat('.')) {\n            if (!stream.eatWhile(digitRE)) stream.backUp(1); // \"3.\" - probably end of function\n            else if (stream.eat(/[eE]/)) {\n                if (stream.eat(/[-+]/)) {\n                    if (!stream.eatWhile(digitRE)) stream.backUp(2); // \"2e-\" - syntax error\n                } else if (!stream.eatWhile(digitRE)) stream.backUp(1); // \"2e\" - syntax error\n            }\n        }\n        return $d7ef9c41588f665a$var$rval(state, stream, \"number\"); // normal integer\n    }\n    // open parens\n    if ($d7ef9c41588f665a$var$nongreedy(stream, $d7ef9c41588f665a$var$openParenRE, $d7ef9c41588f665a$var$openParenWords)) return $d7ef9c41588f665a$var$rval(state, stream, \"open_paren\");\n    // close parens\n    if ($d7ef9c41588f665a$var$nongreedy(stream, $d7ef9c41588f665a$var$closeParenRE, $d7ef9c41588f665a$var$closeParenWords)) return $d7ef9c41588f665a$var$rval(state, stream, \"close_paren\");\n    // separators\n    if ($d7ef9c41588f665a$var$greedy(stream, $d7ef9c41588f665a$var$separatorRE, $d7ef9c41588f665a$var$separatorWords)) return $d7ef9c41588f665a$var$rval(state, stream, \"separator\");\n    // operators\n    if ($d7ef9c41588f665a$var$greedy(stream, $d7ef9c41588f665a$var$operatorSymbolRE, $d7ef9c41588f665a$var$operatorSymbolWords)) return $d7ef9c41588f665a$var$rval(state, stream, \"operator\");\n    return $d7ef9c41588f665a$var$rval(state, stream, null);\n}\n/////////////////////////////////////////////////////////////////////////////\n// utilities\nfunction $d7ef9c41588f665a$var$nongreedy(stream, re, words) {\n    if (stream.current().length == 1 && re.test(stream.current())) {\n        stream.backUp(1);\n        while(re.test(stream.peek())){\n            stream.next();\n            if ($d7ef9c41588f665a$var$is_member(stream.current(), words)) return true;\n        }\n        stream.backUp(stream.current().length - 1);\n    }\n    return false;\n}\nfunction $d7ef9c41588f665a$var$greedy(stream, re, words) {\n    if (stream.current().length == 1 && re.test(stream.current())) {\n        while(re.test(stream.peek()))stream.next();\n        while(0 < stream.current().length){\n            if ($d7ef9c41588f665a$var$is_member(stream.current(), words)) return true;\n            else stream.backUp(1);\n        }\n        stream.next();\n    }\n    return false;\n}\nfunction $d7ef9c41588f665a$var$doubleQuote(stream) {\n    return $d7ef9c41588f665a$var$quote(stream, '\"', '\\\\');\n}\nfunction $d7ef9c41588f665a$var$singleQuote(stream) {\n    return $d7ef9c41588f665a$var$quote(stream, '\\'', '\\\\');\n}\nfunction $d7ef9c41588f665a$var$quote(stream, quoteChar, escapeChar) {\n    while(!stream.eol()){\n        var ch = stream.next();\n        if (ch == quoteChar) return true;\n        else if (ch == escapeChar) stream.next();\n    }\n    return false;\n}\nfunction $d7ef9c41588f665a$var$lookahead(stream) {\n    var m = stream.match(/^\\s*([^\\s%])/, false);\n    return m ? m[1] : \"\";\n}\nfunction $d7ef9c41588f665a$var$is_member(element, list) {\n    return -1 < list.indexOf(element);\n}\nfunction $d7ef9c41588f665a$var$rval(state, stream, type) {\n    // parse stack\n    $d7ef9c41588f665a$var$pushToken(state, $d7ef9c41588f665a$var$realToken(type, stream));\n    // map erlang token type to CodeMirror style class\n    //     erlang             -> CodeMirror tag\n    switch(type){\n        case \"atom\":\n            return \"atom\";\n        case \"attribute\":\n            return \"attribute\";\n        case \"boolean\":\n            return \"atom\";\n        case \"builtin\":\n            return \"builtin\";\n        case \"close_paren\":\n            return null;\n        case \"colon\":\n            return null;\n        case \"comment\":\n            return \"comment\";\n        case \"dot\":\n            return null;\n        case \"error\":\n            return \"error\";\n        case \"fun\":\n            return \"meta\";\n        case \"function\":\n            return \"tag\";\n        case \"guard\":\n            return \"property\";\n        case \"keyword\":\n            return \"keyword\";\n        case \"macro\":\n            return \"macroName\";\n        case \"number\":\n            return \"number\";\n        case \"open_paren\":\n            return null;\n        case \"operator\":\n            return \"operator\";\n        case \"record\":\n            return \"bracket\";\n        case \"separator\":\n            return null;\n        case \"string\":\n            return \"string\";\n        case \"type\":\n            return \"def\";\n        case \"variable\":\n            return \"variable\";\n        default:\n            return null;\n    }\n}\nfunction $d7ef9c41588f665a$var$aToken(tok, col, ind, typ) {\n    return {\n        token: tok,\n        column: col,\n        indent: ind,\n        type: typ\n    };\n}\nfunction $d7ef9c41588f665a$var$realToken(type, stream) {\n    return $d7ef9c41588f665a$var$aToken(stream.current(), stream.column(), stream.indentation(), type);\n}\nfunction $d7ef9c41588f665a$var$fakeToken(type) {\n    return $d7ef9c41588f665a$var$aToken(type, 0, 0, type);\n}\nfunction $d7ef9c41588f665a$var$peekToken(state, depth) {\n    var len = state.tokenStack.length;\n    var dep = depth ? depth : 1;\n    if (len < dep) return false;\n    else return state.tokenStack[len - dep];\n}\nfunction $d7ef9c41588f665a$var$pushToken(state, token) {\n    if (!(token.type == \"comment\" || token.type == \"whitespace\")) {\n        state.tokenStack = $d7ef9c41588f665a$var$maybe_drop_pre(state.tokenStack, token);\n        state.tokenStack = $d7ef9c41588f665a$var$maybe_drop_post(state.tokenStack);\n    }\n}\nfunction $d7ef9c41588f665a$var$maybe_drop_pre(s, token) {\n    var last = s.length - 1;\n    if (0 < last && s[last].type === \"record\" && token.type === \"dot\") s.pop();\n    else if (0 < last && s[last].type === \"group\") {\n        s.pop();\n        s.push(token);\n    } else s.push(token);\n    return s;\n}\nfunction $d7ef9c41588f665a$var$maybe_drop_post(s) {\n    if (!s.length) return s;\n    var last = s.length - 1;\n    if (s[last].type === \"dot\") return [];\n    if (last > 1 && s[last].type === \"fun\" && s[last - 1].token === \"fun\") return s.slice(0, last - 1);\n    switch(s[last].token){\n        case \"}\":\n            return $d7ef9c41588f665a$var$d(s, {\n                g: [\n                    \"{\"\n                ]\n            });\n        case \"]\":\n            return $d7ef9c41588f665a$var$d(s, {\n                i: [\n                    \"[\"\n                ]\n            });\n        case \")\":\n            return $d7ef9c41588f665a$var$d(s, {\n                i: [\n                    \"(\"\n                ]\n            });\n        case \">>\":\n            return $d7ef9c41588f665a$var$d(s, {\n                i: [\n                    \"<<\"\n                ]\n            });\n        case \"end\":\n            return $d7ef9c41588f665a$var$d(s, {\n                i: [\n                    \"begin\",\n                    \"case\",\n                    \"fun\",\n                    \"if\",\n                    \"receive\",\n                    \"try\"\n                ]\n            });\n        case \",\":\n            return $d7ef9c41588f665a$var$d(s, {\n                e: [\n                    \"begin\",\n                    \"try\",\n                    \"when\",\n                    \"->\",\n                    \",\",\n                    \"(\",\n                    \"[\",\n                    \"{\",\n                    \"<<\"\n                ]\n            });\n        case \"->\":\n            return $d7ef9c41588f665a$var$d(s, {\n                r: [\n                    \"when\"\n                ],\n                m: [\n                    \"try\",\n                    \"if\",\n                    \"case\",\n                    \"receive\"\n                ]\n            });\n        case \";\":\n            return $d7ef9c41588f665a$var$d(s, {\n                E: [\n                    \"case\",\n                    \"fun\",\n                    \"if\",\n                    \"receive\",\n                    \"try\",\n                    \"when\"\n                ]\n            });\n        case \"catch\":\n            return $d7ef9c41588f665a$var$d(s, {\n                e: [\n                    \"try\"\n                ]\n            });\n        case \"of\":\n            return $d7ef9c41588f665a$var$d(s, {\n                e: [\n                    \"case\"\n                ]\n            });\n        case \"after\":\n            return $d7ef9c41588f665a$var$d(s, {\n                e: [\n                    \"receive\",\n                    \"try\"\n                ]\n            });\n        default:\n            return s;\n    }\n}\nfunction $d7ef9c41588f665a$var$d(stack, tt) {\n    // stack is a stack of Token objects.\n    // tt is an object; {type:tokens}\n    // type is a char, tokens is a list of token strings.\n    // The function returns (possibly truncated) stack.\n    // It will descend the stack, looking for a Token such that Token.token\n    //  is a member of tokens. If it does not find that, it will normally (but\n    //  see \"E\" below) return stack. If it does find a match, it will remove\n    //  all the Tokens between the top and the matched Token.\n    // If type is \"m\", that is all it does.\n    // If type is \"i\", it will also remove the matched Token and the top Token.\n    // If type is \"g\", like \"i\", but add a fake \"group\" token at the top.\n    // If type is \"r\", it will remove the matched Token, but not the top Token.\n    // If type is \"e\", it will keep the matched Token but not the top Token.\n    // If type is \"E\", it behaves as for type \"e\", except if there is no match,\n    //  in which case it will return an empty stack.\n    for(var type in tt){\n        var len = stack.length - 1;\n        var tokens = tt[type];\n        for(var i = len - 1; -1 < i; i--)if ($d7ef9c41588f665a$var$is_member(stack[i].token, tokens)) {\n            var ss = stack.slice(0, i);\n            switch(type){\n                case \"m\":\n                    return ss.concat(stack[i]).concat(stack[len]);\n                case \"r\":\n                    return ss.concat(stack[len]);\n                case \"i\":\n                    return ss;\n                case \"g\":\n                    return ss.concat($d7ef9c41588f665a$var$fakeToken(\"group\"));\n                case \"E\":\n                    return ss.concat(stack[i]);\n                case \"e\":\n                    return ss.concat(stack[i]);\n            }\n        }\n    }\n    return type == \"E\" ? [] : stack;\n}\n/////////////////////////////////////////////////////////////////////////////\n// indenter\nfunction $d7ef9c41588f665a$var$indenter(state, textAfter, cx) {\n    var t;\n    var wordAfter = $d7ef9c41588f665a$var$wordafter(textAfter);\n    var currT = $d7ef9c41588f665a$var$peekToken(state, 1);\n    var prevT = $d7ef9c41588f665a$var$peekToken(state, 2);\n    if (state.in_string || state.in_atom) return null;\n    else if (!prevT) return 0;\n    else if (currT.token == \"when\") return currT.column + cx.unit;\n    else if (wordAfter === \"when\" && prevT.type === \"function\") return prevT.indent + cx.unit;\n    else if (wordAfter === \"(\" && currT.token === \"fun\") return currT.column + 3;\n    else if (wordAfter === \"catch\" && (t = $d7ef9c41588f665a$var$getToken(state, [\n        \"try\"\n    ]))) return t.column;\n    else if ($d7ef9c41588f665a$var$is_member(wordAfter, [\n        \"end\",\n        \"after\",\n        \"of\"\n    ])) {\n        t = $d7ef9c41588f665a$var$getToken(state, [\n            \"begin\",\n            \"case\",\n            \"fun\",\n            \"if\",\n            \"receive\",\n            \"try\"\n        ]);\n        return t ? t.column : null;\n    } else if ($d7ef9c41588f665a$var$is_member(wordAfter, $d7ef9c41588f665a$var$closeParenWords)) {\n        t = $d7ef9c41588f665a$var$getToken(state, $d7ef9c41588f665a$var$openParenWords);\n        return t ? t.column : null;\n    } else if ($d7ef9c41588f665a$var$is_member(currT.token, [\n        \",\",\n        \"|\",\n        \"||\"\n    ]) || $d7ef9c41588f665a$var$is_member(wordAfter, [\n        \",\",\n        \"|\",\n        \"||\"\n    ])) {\n        t = $d7ef9c41588f665a$var$postcommaToken(state);\n        return t ? t.column + t.token.length : cx.unit;\n    } else if (currT.token == \"->\") {\n        if ($d7ef9c41588f665a$var$is_member(prevT.token, [\n            \"receive\",\n            \"case\",\n            \"if\",\n            \"try\"\n        ])) return prevT.column + cx.unit + cx.unit;\n        else return prevT.column + cx.unit;\n    } else if ($d7ef9c41588f665a$var$is_member(currT.token, $d7ef9c41588f665a$var$openParenWords)) return currT.column + currT.token.length;\n    else {\n        t = $d7ef9c41588f665a$var$defaultToken(state);\n        return $d7ef9c41588f665a$var$truthy(t) ? t.column + cx.unit : 0;\n    }\n}\nfunction $d7ef9c41588f665a$var$wordafter(str) {\n    var m = str.match(/,|[a-z]+|\\}|\\]|\\)|>>|\\|+|\\(/);\n    return $d7ef9c41588f665a$var$truthy(m) && m.index === 0 ? m[0] : \"\";\n}\nfunction $d7ef9c41588f665a$var$postcommaToken(state) {\n    var objs = state.tokenStack.slice(0, -1);\n    var i = $d7ef9c41588f665a$var$getTokenIndex(objs, \"type\", [\n        \"open_paren\"\n    ]);\n    return $d7ef9c41588f665a$var$truthy(objs[i]) ? objs[i] : false;\n}\nfunction $d7ef9c41588f665a$var$defaultToken(state) {\n    var objs = state.tokenStack;\n    var stop = $d7ef9c41588f665a$var$getTokenIndex(objs, \"type\", [\n        \"open_paren\",\n        \"separator\",\n        \"keyword\"\n    ]);\n    var oper = $d7ef9c41588f665a$var$getTokenIndex(objs, \"type\", [\n        \"operator\"\n    ]);\n    if ($d7ef9c41588f665a$var$truthy(stop) && $d7ef9c41588f665a$var$truthy(oper) && stop < oper) return objs[stop + 1];\n    else if ($d7ef9c41588f665a$var$truthy(stop)) return objs[stop];\n    else return false;\n}\nfunction $d7ef9c41588f665a$var$getToken(state, tokens) {\n    var objs = state.tokenStack;\n    var i = $d7ef9c41588f665a$var$getTokenIndex(objs, \"token\", tokens);\n    return $d7ef9c41588f665a$var$truthy(objs[i]) ? objs[i] : false;\n}\nfunction $d7ef9c41588f665a$var$getTokenIndex(objs, propname, propvals) {\n    for(var i = objs.length - 1; -1 < i; i--){\n        if ($d7ef9c41588f665a$var$is_member(objs[i][propname], propvals)) return i;\n    }\n    return false;\n}\nfunction $d7ef9c41588f665a$var$truthy(x) {\n    return x !== false && x != null;\n}\nconst $d7ef9c41588f665a$export$33bd282e45df82b = {\n    name: \"erlang\",\n    startState () {\n        return {\n            tokenStack: [],\n            in_string: false,\n            in_atom: false\n        };\n    },\n    token: $d7ef9c41588f665a$var$tokenizer,\n    indent: $d7ef9c41588f665a$var$indenter,\n    languageData: {\n        commentTokens: {\n            line: \"%\"\n        }\n    }\n};\n\n});\n\n\n//# sourceMappingURL=erlang.c589d421.js.map\n","/////////////////////////////////////////////////////////////////////////////\n// constants\n\nvar typeWords = [\n  \"-type\", \"-spec\", \"-export_type\", \"-opaque\"];\n\nvar keywordWords = [\n  \"after\",\"begin\",\"catch\",\"case\",\"cond\",\"end\",\"fun\",\"if\",\n  \"let\",\"of\",\"query\",\"receive\",\"try\",\"when\"];\n\nvar separatorRE    = /[\\->,;]/;\nvar separatorWords = [\n  \"->\",\";\",\",\"];\n\nvar operatorAtomWords = [\n  \"and\",\"andalso\",\"band\",\"bnot\",\"bor\",\"bsl\",\"bsr\",\"bxor\",\n  \"div\",\"not\",\"or\",\"orelse\",\"rem\",\"xor\"];\n\nvar operatorSymbolRE    = /[\\+\\-\\*\\/<>=\\|:!]/;\nvar operatorSymbolWords = [\n  \"=\",\"+\",\"-\",\"*\",\"/\",\">\",\">=\",\"<\",\"=<\",\"=:=\",\"==\",\"=/=\",\"/=\",\"||\",\"<-\",\"!\"];\n\nvar openParenRE    = /[<\\(\\[\\{]/;\nvar openParenWords = [\n  \"<<\",\"(\",\"[\",\"{\"];\n\nvar closeParenRE    = /[>\\)\\]\\}]/;\nvar closeParenWords = [\n  \"}\",\"]\",\")\",\">>\"];\n\nvar guardWords = [\n  \"is_atom\",\"is_binary\",\"is_bitstring\",\"is_boolean\",\"is_float\",\n  \"is_function\",\"is_integer\",\"is_list\",\"is_number\",\"is_pid\",\n  \"is_port\",\"is_record\",\"is_reference\",\"is_tuple\",\n  \"atom\",\"binary\",\"bitstring\",\"boolean\",\"function\",\"integer\",\"list\",\n  \"number\",\"pid\",\"port\",\"record\",\"reference\",\"tuple\"];\n\nvar bifWords = [\n  \"abs\",\"adler32\",\"adler32_combine\",\"alive\",\"apply\",\"atom_to_binary\",\n  \"atom_to_list\",\"binary_to_atom\",\"binary_to_existing_atom\",\n  \"binary_to_list\",\"binary_to_term\",\"bit_size\",\"bitstring_to_list\",\n  \"byte_size\",\"check_process_code\",\"contact_binary\",\"crc32\",\n  \"crc32_combine\",\"date\",\"decode_packet\",\"delete_module\",\n  \"disconnect_node\",\"element\",\"erase\",\"exit\",\"float\",\"float_to_list\",\n  \"garbage_collect\",\"get\",\"get_keys\",\"group_leader\",\"halt\",\"hd\",\n  \"integer_to_list\",\"internal_bif\",\"iolist_size\",\"iolist_to_binary\",\n  \"is_alive\",\"is_atom\",\"is_binary\",\"is_bitstring\",\"is_boolean\",\n  \"is_float\",\"is_function\",\"is_integer\",\"is_list\",\"is_number\",\"is_pid\",\n  \"is_port\",\"is_process_alive\",\"is_record\",\"is_reference\",\"is_tuple\",\n  \"length\",\"link\",\"list_to_atom\",\"list_to_binary\",\"list_to_bitstring\",\n  \"list_to_existing_atom\",\"list_to_float\",\"list_to_integer\",\n  \"list_to_pid\",\"list_to_tuple\",\"load_module\",\"make_ref\",\"module_loaded\",\n  \"monitor_node\",\"node\",\"node_link\",\"node_unlink\",\"nodes\",\"notalive\",\n  \"now\",\"open_port\",\"pid_to_list\",\"port_close\",\"port_command\",\n  \"port_connect\",\"port_control\",\"pre_loaded\",\"process_flag\",\n  \"process_info\",\"processes\",\"purge_module\",\"put\",\"register\",\n  \"registered\",\"round\",\"self\",\"setelement\",\"size\",\"spawn\",\"spawn_link\",\n  \"spawn_monitor\",\"spawn_opt\",\"split_binary\",\"statistics\",\n  \"term_to_binary\",\"time\",\"throw\",\"tl\",\"trunc\",\"tuple_size\",\n  \"tuple_to_list\",\"unlink\",\"unregister\",\"whereis\"];\n\n// upper case: [A-Z] [Ø-Þ] [À-Ö]\n// lower case: [a-z] [ß-ö] [ø-ÿ]\nvar anumRE       = /[\\w@Ø-ÞÀ-Öß-öø-ÿ]/;\nvar escapesRE    =\n    /[0-7]{1,3}|[bdefnrstv\\\\\"']|\\^[a-zA-Z]|x[0-9a-zA-Z]{2}|x{[0-9a-zA-Z]+}/;\n\n/////////////////////////////////////////////////////////////////////////////\n// tokenizer\n\nfunction tokenizer(stream,state) {\n  // in multi-line string\n  if (state.in_string) {\n    state.in_string = (!doubleQuote(stream));\n    return rval(state,stream,\"string\");\n  }\n\n  // in multi-line atom\n  if (state.in_atom) {\n    state.in_atom = (!singleQuote(stream));\n    return rval(state,stream,\"atom\");\n  }\n\n  // whitespace\n  if (stream.eatSpace()) {\n    return rval(state,stream,\"whitespace\");\n  }\n\n  // attributes and type specs\n  if (!peekToken(state) &&\n      stream.match(/-\\s*[a-zß-öø-ÿ][\\wØ-ÞÀ-Öß-öø-ÿ]*/)) {\n    if (is_member(stream.current(),typeWords)) {\n      return rval(state,stream,\"type\");\n    }else{\n      return rval(state,stream,\"attribute\");\n    }\n  }\n\n  var ch = stream.next();\n\n  // comment\n  if (ch == '%') {\n    stream.skipToEnd();\n    return rval(state,stream,\"comment\");\n  }\n\n  // colon\n  if (ch == \":\") {\n    return rval(state,stream,\"colon\");\n  }\n\n  // macro\n  if (ch == '?') {\n    stream.eatSpace();\n    stream.eatWhile(anumRE);\n    return rval(state,stream,\"macro\");\n  }\n\n  // record\n  if (ch == \"#\") {\n    stream.eatSpace();\n    stream.eatWhile(anumRE);\n    return rval(state,stream,\"record\");\n  }\n\n  // dollar escape\n  if (ch == \"$\") {\n    if (stream.next() == \"\\\\\" && !stream.match(escapesRE)) {\n      return rval(state,stream,\"error\");\n    }\n    return rval(state,stream,\"number\");\n  }\n\n  // dot\n  if (ch == \".\") {\n    return rval(state,stream,\"dot\");\n  }\n\n  // quoted atom\n  if (ch == '\\'') {\n    if (!(state.in_atom = (!singleQuote(stream)))) {\n      if (stream.match(/\\s*\\/\\s*[0-9]/,false)) {\n        stream.match(/\\s*\\/\\s*[0-9]/,true);\n        return rval(state,stream,\"fun\");      // 'f'/0 style fun\n      }\n      if (stream.match(/\\s*\\(/,false) || stream.match(/\\s*:/,false)) {\n        return rval(state,stream,\"function\");\n      }\n    }\n    return rval(state,stream,\"atom\");\n  }\n\n  // string\n  if (ch == '\"') {\n    state.in_string = (!doubleQuote(stream));\n    return rval(state,stream,\"string\");\n  }\n\n  // variable\n  if (/[A-Z_Ø-ÞÀ-Ö]/.test(ch)) {\n    stream.eatWhile(anumRE);\n    return rval(state,stream,\"variable\");\n  }\n\n  // atom/keyword/BIF/function\n  if (/[a-z_ß-öø-ÿ]/.test(ch)) {\n    stream.eatWhile(anumRE);\n\n    if (stream.match(/\\s*\\/\\s*[0-9]/,false)) {\n      stream.match(/\\s*\\/\\s*[0-9]/,true);\n      return rval(state,stream,\"fun\");      // f/0 style fun\n    }\n\n    var w = stream.current();\n\n    if (is_member(w,keywordWords)) {\n      return rval(state,stream,\"keyword\");\n    }else if (is_member(w,operatorAtomWords)) {\n      return rval(state,stream,\"operator\");\n    }else if (stream.match(/\\s*\\(/,false)) {\n      // 'put' and 'erlang:put' are bifs, 'foo:put' is not\n      if (is_member(w,bifWords) &&\n          ((peekToken(state).token != \":\") ||\n           (peekToken(state,2).token == \"erlang\"))) {\n        return rval(state,stream,\"builtin\");\n      }else if (is_member(w,guardWords)) {\n        return rval(state,stream,\"guard\");\n      }else{\n        return rval(state,stream,\"function\");\n      }\n    }else if (lookahead(stream) == \":\") {\n      if (w == \"erlang\") {\n        return rval(state,stream,\"builtin\");\n      } else {\n        return rval(state,stream,\"function\");\n      }\n    }else if (is_member(w,[\"true\",\"false\"])) {\n      return rval(state,stream,\"boolean\");\n    }else{\n      return rval(state,stream,\"atom\");\n    }\n  }\n\n  // number\n  var digitRE      = /[0-9]/;\n  var radixRE      = /[0-9a-zA-Z]/;         // 36#zZ style int\n  if (digitRE.test(ch)) {\n    stream.eatWhile(digitRE);\n    if (stream.eat('#')) {                // 36#aZ  style integer\n      if (!stream.eatWhile(radixRE)) {\n        stream.backUp(1);                 //\"36#\" - syntax error\n      }\n    } else if (stream.eat('.')) {       // float\n      if (!stream.eatWhile(digitRE)) {\n        stream.backUp(1);        // \"3.\" - probably end of function\n      } else {\n        if (stream.eat(/[eE]/)) {        // float with exponent\n          if (stream.eat(/[-+]/)) {\n            if (!stream.eatWhile(digitRE)) {\n              stream.backUp(2);            // \"2e-\" - syntax error\n            }\n          } else {\n            if (!stream.eatWhile(digitRE)) {\n              stream.backUp(1);            // \"2e\" - syntax error\n            }\n          }\n        }\n      }\n    }\n    return rval(state,stream,\"number\");   // normal integer\n  }\n\n  // open parens\n  if (nongreedy(stream,openParenRE,openParenWords)) {\n    return rval(state,stream,\"open_paren\");\n  }\n\n  // close parens\n  if (nongreedy(stream,closeParenRE,closeParenWords)) {\n    return rval(state,stream,\"close_paren\");\n  }\n\n  // separators\n  if (greedy(stream,separatorRE,separatorWords)) {\n    return rval(state,stream,\"separator\");\n  }\n\n  // operators\n  if (greedy(stream,operatorSymbolRE,operatorSymbolWords)) {\n    return rval(state,stream,\"operator\");\n  }\n\n  return rval(state,stream,null);\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// utilities\nfunction nongreedy(stream,re,words) {\n  if (stream.current().length == 1 && re.test(stream.current())) {\n    stream.backUp(1);\n    while (re.test(stream.peek())) {\n      stream.next();\n      if (is_member(stream.current(),words)) {\n        return true;\n      }\n    }\n    stream.backUp(stream.current().length-1);\n  }\n  return false;\n}\n\nfunction greedy(stream,re,words) {\n  if (stream.current().length == 1 && re.test(stream.current())) {\n    while (re.test(stream.peek())) {\n      stream.next();\n    }\n    while (0 < stream.current().length) {\n      if (is_member(stream.current(),words)) {\n        return true;\n      }else{\n        stream.backUp(1);\n      }\n    }\n    stream.next();\n  }\n  return false;\n}\n\nfunction doubleQuote(stream) {\n  return quote(stream, '\"', '\\\\');\n}\n\nfunction singleQuote(stream) {\n  return quote(stream,'\\'','\\\\');\n}\n\nfunction quote(stream,quoteChar,escapeChar) {\n  while (!stream.eol()) {\n    var ch = stream.next();\n    if (ch == quoteChar) {\n      return true;\n    }else if (ch == escapeChar) {\n      stream.next();\n    }\n  }\n  return false;\n}\n\nfunction lookahead(stream) {\n  var m = stream.match(/^\\s*([^\\s%])/, false)\n  return m ? m[1] : \"\";\n}\n\nfunction is_member(element,list) {\n  return (-1 < list.indexOf(element));\n}\n\nfunction rval(state,stream,type) {\n\n  // parse stack\n  pushToken(state,realToken(type,stream));\n\n  // map erlang token type to CodeMirror style class\n  //     erlang             -> CodeMirror tag\n  switch (type) {\n  case \"atom\":        return \"atom\";\n  case \"attribute\":   return \"attribute\";\n  case \"boolean\":     return \"atom\";\n  case \"builtin\":     return \"builtin\";\n  case \"close_paren\": return null;\n  case \"colon\":       return null;\n  case \"comment\":     return \"comment\";\n  case \"dot\":         return null;\n  case \"error\":       return \"error\";\n  case \"fun\":         return \"meta\";\n  case \"function\":    return \"tag\";\n  case \"guard\":       return \"property\";\n  case \"keyword\":     return \"keyword\";\n  case \"macro\":       return \"macroName\";\n  case \"number\":      return \"number\";\n  case \"open_paren\":  return null;\n  case \"operator\":    return \"operator\";\n  case \"record\":      return \"bracket\";\n  case \"separator\":   return null;\n  case \"string\":      return \"string\";\n  case \"type\":        return \"def\";\n  case \"variable\":    return \"variable\";\n  default:            return null;\n  }\n}\n\nfunction aToken(tok,col,ind,typ) {\n  return {token:  tok,\n          column: col,\n          indent: ind,\n          type:   typ};\n}\n\nfunction realToken(type,stream) {\n  return aToken(stream.current(),\n                stream.column(),\n                stream.indentation(),\n                type);\n}\n\nfunction fakeToken(type) {\n  return aToken(type,0,0,type);\n}\n\nfunction peekToken(state,depth) {\n  var len = state.tokenStack.length;\n  var dep = (depth ? depth : 1);\n\n  if (len < dep) {\n    return false;\n  }else{\n    return state.tokenStack[len-dep];\n  }\n}\n\nfunction pushToken(state,token) {\n\n  if (!(token.type == \"comment\" || token.type == \"whitespace\")) {\n    state.tokenStack = maybe_drop_pre(state.tokenStack,token);\n    state.tokenStack = maybe_drop_post(state.tokenStack);\n  }\n}\n\nfunction maybe_drop_pre(s,token) {\n  var last = s.length-1;\n\n  if (0 < last && s[last].type === \"record\" && token.type === \"dot\") {\n    s.pop();\n  }else if (0 < last && s[last].type === \"group\") {\n    s.pop();\n    s.push(token);\n  }else{\n    s.push(token);\n  }\n  return s;\n}\n\nfunction maybe_drop_post(s) {\n  if (!s.length) return s\n  var last = s.length-1;\n\n  if (s[last].type === \"dot\") {\n    return [];\n  }\n  if (last > 1 && s[last].type === \"fun\" && s[last-1].token === \"fun\") {\n    return s.slice(0,last-1);\n  }\n  switch (s[last].token) {\n  case \"}\":    return d(s,{g:[\"{\"]});\n  case \"]\":    return d(s,{i:[\"[\"]});\n  case \")\":    return d(s,{i:[\"(\"]});\n  case \">>\":   return d(s,{i:[\"<<\"]});\n  case \"end\":  return d(s,{i:[\"begin\",\"case\",\"fun\",\"if\",\"receive\",\"try\"]});\n  case \",\":    return d(s,{e:[\"begin\",\"try\",\"when\",\"->\",\n                              \",\",\"(\",\"[\",\"{\",\"<<\"]});\n  case \"->\":   return d(s,{r:[\"when\"],\n                           m:[\"try\",\"if\",\"case\",\"receive\"]});\n  case \";\":    return d(s,{E:[\"case\",\"fun\",\"if\",\"receive\",\"try\",\"when\"]});\n  case \"catch\":return d(s,{e:[\"try\"]});\n  case \"of\":   return d(s,{e:[\"case\"]});\n  case \"after\":return d(s,{e:[\"receive\",\"try\"]});\n  default:     return s;\n  }\n}\n\nfunction d(stack,tt) {\n  // stack is a stack of Token objects.\n  // tt is an object; {type:tokens}\n  // type is a char, tokens is a list of token strings.\n  // The function returns (possibly truncated) stack.\n  // It will descend the stack, looking for a Token such that Token.token\n  //  is a member of tokens. If it does not find that, it will normally (but\n  //  see \"E\" below) return stack. If it does find a match, it will remove\n  //  all the Tokens between the top and the matched Token.\n  // If type is \"m\", that is all it does.\n  // If type is \"i\", it will also remove the matched Token and the top Token.\n  // If type is \"g\", like \"i\", but add a fake \"group\" token at the top.\n  // If type is \"r\", it will remove the matched Token, but not the top Token.\n  // If type is \"e\", it will keep the matched Token but not the top Token.\n  // If type is \"E\", it behaves as for type \"e\", except if there is no match,\n  //  in which case it will return an empty stack.\n\n  for (var type in tt) {\n    var len = stack.length-1;\n    var tokens = tt[type];\n    for (var i = len-1; -1 < i ; i--) {\n      if (is_member(stack[i].token,tokens)) {\n        var ss = stack.slice(0,i);\n        switch (type) {\n        case \"m\": return ss.concat(stack[i]).concat(stack[len]);\n        case \"r\": return ss.concat(stack[len]);\n        case \"i\": return ss;\n        case \"g\": return ss.concat(fakeToken(\"group\"));\n        case \"E\": return ss.concat(stack[i]);\n        case \"e\": return ss.concat(stack[i]);\n        }\n      }\n    }\n  }\n  return (type == \"E\" ? [] : stack);\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// indenter\n\nfunction indenter(state, textAfter, cx) {\n  var t;\n  var wordAfter = wordafter(textAfter);\n  var currT = peekToken(state,1);\n  var prevT = peekToken(state,2);\n\n  if (state.in_string || state.in_atom) {\n    return null;\n  }else if (!prevT) {\n    return 0;\n  }else if (currT.token == \"when\") {\n    return currT.column + cx.unit;\n  }else if (wordAfter === \"when\" && prevT.type === \"function\") {\n    return prevT.indent+cx.unit;\n  }else if (wordAfter === \"(\" && currT.token === \"fun\") {\n    return  currT.column+3;\n  }else if (wordAfter === \"catch\" && (t = getToken(state,[\"try\"]))) {\n    return t.column;\n  }else if (is_member(wordAfter,[\"end\",\"after\",\"of\"])) {\n    t = getToken(state,[\"begin\",\"case\",\"fun\",\"if\",\"receive\",\"try\"]);\n    return t ? t.column : null;\n  }else if (is_member(wordAfter,closeParenWords)) {\n    t = getToken(state,openParenWords);\n    return t ? t.column : null;\n  }else if (is_member(currT.token,[\",\",\"|\",\"||\"]) ||\n            is_member(wordAfter,[\",\",\"|\",\"||\"])) {\n    t = postcommaToken(state);\n    return t ? t.column+t.token.length : cx.unit;\n  }else if (currT.token == \"->\") {\n    if (is_member(prevT.token, [\"receive\",\"case\",\"if\",\"try\"])) {\n      return prevT.column+cx.unit+cx.unit;\n    }else{\n      return prevT.column+cx.unit;\n    }\n  }else if (is_member(currT.token,openParenWords)) {\n    return currT.column+currT.token.length;\n  }else{\n    t = defaultToken(state);\n    return truthy(t) ? t.column+cx.unit : 0;\n  }\n}\n\nfunction wordafter(str) {\n  var m = str.match(/,|[a-z]+|\\}|\\]|\\)|>>|\\|+|\\(/);\n\n  return truthy(m) && (m.index === 0) ? m[0] : \"\";\n}\n\nfunction postcommaToken(state) {\n  var objs = state.tokenStack.slice(0,-1);\n  var i = getTokenIndex(objs,\"type\",[\"open_paren\"]);\n\n  return truthy(objs[i]) ? objs[i] : false;\n}\n\nfunction defaultToken(state) {\n  var objs = state.tokenStack;\n  var stop = getTokenIndex(objs,\"type\",[\"open_paren\",\"separator\",\"keyword\"]);\n  var oper = getTokenIndex(objs,\"type\",[\"operator\"]);\n\n  if (truthy(stop) && truthy(oper) && stop < oper) {\n    return objs[stop+1];\n  } else if (truthy(stop)) {\n    return objs[stop];\n  } else {\n    return false;\n  }\n}\n\nfunction getToken(state,tokens) {\n  var objs = state.tokenStack;\n  var i = getTokenIndex(objs,\"token\",tokens);\n\n  return truthy(objs[i]) ? objs[i] : false;\n}\n\nfunction getTokenIndex(objs,propname,propvals) {\n\n  for (var i = objs.length-1; -1 < i ; i--) {\n    if (is_member(objs[i][propname],propvals)) {\n      return i;\n    }\n  }\n  return false;\n}\n\nfunction truthy(x) {\n  return (x !== false) && (x != null);\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// this object defines the mode\n\nexport const erlang = {\n  name: \"erlang\",\n  startState() {\n    return {tokenStack: [],\n            in_string:  false,\n            in_atom:    false};\n  },\n\n  token: tokenizer,\n\n  indent: indenter,\n\n  languageData: {\n    commentTokens: {line: \"%\"}\n  }\n};\n\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","Object","defineProperty","get","$d7ef9c41588f665a$export$33bd282e45df82b","set","s","enumerable","configurable","$d7ef9c41588f665a$var$typeWords","$d7ef9c41588f665a$var$keywordWords","$d7ef9c41588f665a$var$separatorRE","$d7ef9c41588f665a$var$separatorWords","$d7ef9c41588f665a$var$operatorAtomWords","$d7ef9c41588f665a$var$operatorSymbolRE","$d7ef9c41588f665a$var$operatorSymbolWords","$d7ef9c41588f665a$var$openParenRE","$d7ef9c41588f665a$var$openParenWords","$d7ef9c41588f665a$var$closeParenRE","$d7ef9c41588f665a$var$closeParenWords","$d7ef9c41588f665a$var$guardWords","$d7ef9c41588f665a$var$bifWords","$d7ef9c41588f665a$var$anumRE","$d7ef9c41588f665a$var$escapesRE","$d7ef9c41588f665a$var$nongreedy","stream","re","words","current","length","test","backUp","peek","next","$d7ef9c41588f665a$var$is_member","$d7ef9c41588f665a$var$greedy","$d7ef9c41588f665a$var$doubleQuote","$d7ef9c41588f665a$var$quote","$d7ef9c41588f665a$var$singleQuote","quoteChar","escapeChar","eol","ch","element","list","indexOf","$d7ef9c41588f665a$var$rval","state","type","token","last","$d7ef9c41588f665a$var$aToken","column","indentation","tokenStack","pop","push","$d7ef9c41588f665a$var$maybe_drop_post","slice","$d7ef9c41588f665a$var$d","g","i","e","r","m","E","tok","col","ind","typ","indent","$d7ef9c41588f665a$var$peekToken","depth","len","dep","stack","tt","tokens","ss","concat","$d7ef9c41588f665a$var$getToken","objs","$d7ef9c41588f665a$var$getTokenIndex","$d7ef9c41588f665a$var$truthy","propname","propvals","x","name","startState","in_string","in_atom","eatSpace","match","skipToEnd","eatWhile","w","$d7ef9c41588f665a$var$lookahead","digitRE","eat","textAfter","cx","stop","oper","t","wordAfter","str","index","currT","prevT","unit","languageData","commentTokens","line"],"version":3,"file":"erlang.c589d421.js.map"}