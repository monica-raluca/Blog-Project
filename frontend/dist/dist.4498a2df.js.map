{"mappings":"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","sources":["<anon>","node_modules/@codemirror/lang-sql/dist/index.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"d3g9d\", function(module, exports) {\n\n$parcel$export(module.exports, \"SQLDialect\", () => $980814c1590cb610$export$cb7041a7779156a7);\n$parcel$export(module.exports, \"keywordCompletionSource\", () => $980814c1590cb610$export$3b2ae0de3f836403);\n$parcel$export(module.exports, \"schemaCompletionSource\", () => $980814c1590cb610$export$17bf40d4487b589f);\n$parcel$export(module.exports, \"StandardSQL\", () => $980814c1590cb610$export$4a7746173d1ef2e1);\n$parcel$export(module.exports, \"sql\", () => $980814c1590cb610$export$6e9c87fa17e36c5d);\n$parcel$export(module.exports, \"PostgreSQL\", () => $980814c1590cb610$export$b9f73592be0033d5);\n$parcel$export(module.exports, \"MySQL\", () => $980814c1590cb610$export$89bad9ac1f3785f8);\n$parcel$export(module.exports, \"MariaSQL\", () => $980814c1590cb610$export$3f21b786f95184f1);\n$parcel$export(module.exports, \"MSSQL\", () => $980814c1590cb610$export$6d6505b17ff77046);\n$parcel$export(module.exports, \"SQLite\", () => $980814c1590cb610$export$b5e94ff8bafecf74);\n$parcel$export(module.exports, \"Cassandra\", () => $980814c1590cb610$export$7a0261e5cc11a0c5);\n$parcel$export(module.exports, \"PLSQL\", () => $980814c1590cb610$export$fd3143eacf0ff224);\n\nvar $eyb1x = parcelRequire(\"eyb1x\");\n\nvar $dTUZ7 = parcelRequire(\"dTUZ7\");\n\nvar $cXi2l = parcelRequire(\"cXi2l\");\n\nvar $a586V = parcelRequire(\"a586V\");\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst $980814c1590cb610$var$whitespace = 36, $980814c1590cb610$var$LineComment = 1, $980814c1590cb610$var$BlockComment = 2, $980814c1590cb610$var$String$1 = 3, $980814c1590cb610$var$Number = 4, $980814c1590cb610$var$Bool = 5, $980814c1590cb610$var$Null = 6, $980814c1590cb610$var$ParenL = 7, $980814c1590cb610$var$ParenR = 8, $980814c1590cb610$var$BraceL = 9, $980814c1590cb610$var$BraceR = 10, $980814c1590cb610$var$BracketL = 11, $980814c1590cb610$var$BracketR = 12, $980814c1590cb610$var$Semi = 13, $980814c1590cb610$var$Dot = 14, $980814c1590cb610$var$Operator = 15, $980814c1590cb610$var$Punctuation = 16, $980814c1590cb610$var$SpecialVar = 17, $980814c1590cb610$var$Identifier = 18, $980814c1590cb610$var$QuotedIdentifier = 19, $980814c1590cb610$var$Keyword = 20, $980814c1590cb610$var$Type = 21, $980814c1590cb610$var$Bits = 22, $980814c1590cb610$var$Bytes = 23, $980814c1590cb610$var$Builtin = 24;\nfunction $980814c1590cb610$var$isAlpha(ch) {\n    return ch >= 65 /* Ch.A */  && ch <= 90 /* Ch.Z */  || ch >= 97 /* Ch.a */  && ch <= 122 /* Ch.z */  || ch >= 48 /* Ch._0 */  && ch <= 57 /* Ch._9 */ ;\n}\nfunction $980814c1590cb610$var$isHexDigit(ch) {\n    return ch >= 48 /* Ch._0 */  && ch <= 57 /* Ch._9 */  || ch >= 97 /* Ch.a */  && ch <= 102 /* Ch.f */  || ch >= 65 /* Ch.A */  && ch <= 70 /* Ch.F */ ;\n}\nfunction $980814c1590cb610$var$readLiteral(input, endQuote, backslashEscapes) {\n    for(let escaped = false;;){\n        if (input.next < 0) return;\n        if (input.next == endQuote && !escaped) {\n            input.advance();\n            return;\n        }\n        escaped = backslashEscapes && !escaped && input.next == 92 /* Ch.Backslash */ ;\n        input.advance();\n    }\n}\nfunction $980814c1590cb610$var$readDoubleDollarLiteral(input, tag) {\n    scan: for(;;){\n        if (input.next < 0) return;\n        if (input.next == 36 /* Ch.Dollar */ ) {\n            input.advance();\n            for(let i = 0; i < tag.length; i++){\n                if (input.next != tag.charCodeAt(i)) continue scan;\n                input.advance();\n            }\n            if (input.next == 36 /* Ch.Dollar */ ) {\n                input.advance();\n                return;\n            }\n        } else input.advance();\n    }\n}\nfunction $980814c1590cb610$var$readPLSQLQuotedLiteral(input, openDelim) {\n    let matchingDelim = \"[{<(\".indexOf(String.fromCharCode(openDelim));\n    let closeDelim = matchingDelim < 0 ? openDelim : \"]}>)\".charCodeAt(matchingDelim);\n    for(;;){\n        if (input.next < 0) return;\n        if (input.next == closeDelim && input.peek(1) == 39 /* Ch.SingleQuote */ ) {\n            input.advance(2);\n            return;\n        }\n        input.advance();\n    }\n}\nfunction $980814c1590cb610$var$readWord(input, result) {\n    for(;;){\n        if (input.next != 95 /* Ch.Underscore */  && !$980814c1590cb610$var$isAlpha(input.next)) break;\n        if (result != null) result += String.fromCharCode(input.next);\n        input.advance();\n    }\n    return result;\n}\nfunction $980814c1590cb610$var$readWordOrQuoted(input) {\n    if (input.next == 39 /* Ch.SingleQuote */  || input.next == 34 /* Ch.DoubleQuote */  || input.next == 96 /* Ch.Backtick */ ) {\n        let quote = input.next;\n        input.advance();\n        $980814c1590cb610$var$readLiteral(input, quote, false);\n    } else $980814c1590cb610$var$readWord(input);\n}\nfunction $980814c1590cb610$var$readBits(input, endQuote) {\n    while(input.next == 48 /* Ch._0 */  || input.next == 49 /* Ch._1 */ )input.advance();\n    if (endQuote && input.next == endQuote) input.advance();\n}\nfunction $980814c1590cb610$var$readNumber(input, sawDot) {\n    for(;;){\n        if (input.next == 46 /* Ch.Dot */ ) {\n            if (sawDot) break;\n            sawDot = true;\n        } else if (input.next < 48 /* Ch._0 */  || input.next > 57 /* Ch._9 */ ) break;\n        input.advance();\n    }\n    if (input.next == 69 /* Ch.E */  || input.next == 101 /* Ch.e */ ) {\n        input.advance();\n        if (input.next == 43 /* Ch.Plus */  || input.next == 45 /* Ch.Dash */ ) input.advance();\n        while(input.next >= 48 /* Ch._0 */  && input.next <= 57 /* Ch._9 */ )input.advance();\n    }\n}\nfunction $980814c1590cb610$var$eol(input) {\n    while(!(input.next < 0 || input.next == 10 /* Ch.Newline */ ))input.advance();\n}\nfunction $980814c1590cb610$var$inString(ch, str) {\n    for(let i = 0; i < str.length; i++)if (str.charCodeAt(i) == ch) return true;\n    return false;\n}\nconst $980814c1590cb610$var$Space = \" \\t\\r\\n\";\nfunction $980814c1590cb610$var$keywords(keywords, types, builtin) {\n    let result = Object.create(null);\n    result[\"true\"] = result[\"false\"] = $980814c1590cb610$var$Bool;\n    result[\"null\"] = result[\"unknown\"] = $980814c1590cb610$var$Null;\n    for (let kw of keywords.split(\" \"))if (kw) result[kw] = $980814c1590cb610$var$Keyword;\n    for (let tp of types.split(\" \"))if (tp) result[tp] = $980814c1590cb610$var$Type;\n    for (let kw of (builtin || \"\").split(\" \"))if (kw) result[kw] = $980814c1590cb610$var$Builtin;\n    return result;\n}\nconst $980814c1590cb610$var$SQLTypes = \"array binary bit boolean char character clob date decimal double float int integer interval large national nchar nclob numeric object precision real smallint time timestamp varchar varying \";\nconst $980814c1590cb610$var$SQLKeywords = \"absolute action add after all allocate alter and any are as asc assertion at authorization before begin between both breadth by call cascade cascaded case cast catalog check close collate collation column commit condition connect connection constraint constraints constructor continue corresponding count create cross cube current current_date current_default_transform_group current_transform_group_for_type current_path current_role current_time current_timestamp current_user cursor cycle data day deallocate declare default deferrable deferred delete depth deref desc describe descriptor deterministic diagnostics disconnect distinct do domain drop dynamic each else elseif end end-exec equals escape except exception exec execute exists exit external fetch first for foreign found from free full function general get global go goto grant group grouping handle having hold hour identity if immediate in indicator initially inner inout input insert intersect into is isolation join key language last lateral leading leave left level like limit local localtime localtimestamp locator loop map match method minute modifies module month names natural nesting new next no none not of old on only open option or order ordinality out outer output overlaps pad parameter partial path prepare preserve primary prior privileges procedure public read reads recursive redo ref references referencing relative release repeat resignal restrict result return returns revoke right role rollback rollup routine row rows savepoint schema scroll search second section select session session_user set sets signal similar size some space specific specifictype sql sqlexception sqlstate sqlwarning start state static system_user table temporary then timezone_hour timezone_minute to trailing transaction translation treat trigger under undo union unique unnest until update usage user using value values view when whenever where while with without work write year zone \";\nconst $980814c1590cb610$var$defaults = {\n    backslashEscapes: false,\n    hashComments: false,\n    spaceAfterDashes: false,\n    slashComments: false,\n    doubleQuotedStrings: false,\n    doubleDollarQuotedStrings: false,\n    unquotedBitLiterals: false,\n    treatBitsAsBytes: false,\n    charSetCasts: false,\n    plsqlQuotingMechanism: false,\n    operatorChars: \"*+\\-%<>!=&|~^/\",\n    specialVar: \"?\",\n    identifierQuotes: '\"',\n    caseInsensitiveIdentifiers: false,\n    words: /*@__PURE__*/ $980814c1590cb610$var$keywords($980814c1590cb610$var$SQLKeywords, $980814c1590cb610$var$SQLTypes)\n};\nfunction $980814c1590cb610$var$dialect(spec, kws, types, builtin) {\n    let dialect = {};\n    for(let prop in $980814c1590cb610$var$defaults)dialect[prop] = (spec.hasOwnProperty(prop) ? spec : $980814c1590cb610$var$defaults)[prop];\n    if (kws) dialect.words = $980814c1590cb610$var$keywords(kws, types || \"\", builtin);\n    return dialect;\n}\nfunction $980814c1590cb610$var$tokensFor(d) {\n    return new (0, $cXi2l.ExternalTokenizer)((input)=>{\n        var _a;\n        let { next: next } = input;\n        input.advance();\n        if ($980814c1590cb610$var$inString(next, $980814c1590cb610$var$Space)) {\n            while($980814c1590cb610$var$inString(input.next, $980814c1590cb610$var$Space))input.advance();\n            input.acceptToken($980814c1590cb610$var$whitespace);\n        } else if (next == 36 /* Ch.Dollar */  && d.doubleDollarQuotedStrings) {\n            let tag = $980814c1590cb610$var$readWord(input, \"\");\n            if (input.next == 36 /* Ch.Dollar */ ) {\n                input.advance();\n                $980814c1590cb610$var$readDoubleDollarLiteral(input, tag);\n                input.acceptToken($980814c1590cb610$var$String$1);\n            }\n        } else if (next == 39 /* Ch.SingleQuote */  || next == 34 /* Ch.DoubleQuote */  && d.doubleQuotedStrings) {\n            $980814c1590cb610$var$readLiteral(input, next, d.backslashEscapes);\n            input.acceptToken($980814c1590cb610$var$String$1);\n        } else if (next == 35 /* Ch.Hash */  && d.hashComments || next == 47 /* Ch.Slash */  && input.next == 47 /* Ch.Slash */  && d.slashComments) {\n            $980814c1590cb610$var$eol(input);\n            input.acceptToken($980814c1590cb610$var$LineComment);\n        } else if (next == 45 /* Ch.Dash */  && input.next == 45 /* Ch.Dash */  && (!d.spaceAfterDashes || input.peek(1) == 32 /* Ch.Space */ )) {\n            $980814c1590cb610$var$eol(input);\n            input.acceptToken($980814c1590cb610$var$LineComment);\n        } else if (next == 47 /* Ch.Slash */  && input.next == 42 /* Ch.Star */ ) {\n            input.advance();\n            for(let depth = 1;;){\n                let cur = input.next;\n                if (input.next < 0) break;\n                input.advance();\n                if (cur == 42 /* Ch.Star */  && input.next == 47 /* Ch.Slash */ ) {\n                    depth--;\n                    input.advance();\n                    if (!depth) break;\n                } else if (cur == 47 /* Ch.Slash */  && input.next == 42 /* Ch.Star */ ) {\n                    depth++;\n                    input.advance();\n                }\n            }\n            input.acceptToken($980814c1590cb610$var$BlockComment);\n        } else if ((next == 101 /* Ch.e */  || next == 69 /* Ch.E */ ) && input.next == 39 /* Ch.SingleQuote */ ) {\n            input.advance();\n            $980814c1590cb610$var$readLiteral(input, 39 /* Ch.SingleQuote */ , true);\n            input.acceptToken($980814c1590cb610$var$String$1);\n        } else if ((next == 110 /* Ch.n */  || next == 78 /* Ch.N */ ) && input.next == 39 /* Ch.SingleQuote */  && d.charSetCasts) {\n            input.advance();\n            $980814c1590cb610$var$readLiteral(input, 39 /* Ch.SingleQuote */ , d.backslashEscapes);\n            input.acceptToken($980814c1590cb610$var$String$1);\n        } else if (next == 95 /* Ch.Underscore */  && d.charSetCasts) for(let i = 0;; i++){\n            if (input.next == 39 /* Ch.SingleQuote */  && i > 1) {\n                input.advance();\n                $980814c1590cb610$var$readLiteral(input, 39 /* Ch.SingleQuote */ , d.backslashEscapes);\n                input.acceptToken($980814c1590cb610$var$String$1);\n                break;\n            }\n            if (!$980814c1590cb610$var$isAlpha(input.next)) break;\n            input.advance();\n        }\n        else if (d.plsqlQuotingMechanism && (next == 113 /* Ch.q */  || next == 81 /* Ch.Q */ ) && input.next == 39 /* Ch.SingleQuote */  && input.peek(1) > 0 && !$980814c1590cb610$var$inString(input.peek(1), $980814c1590cb610$var$Space)) {\n            let openDelim = input.peek(1);\n            input.advance(2);\n            $980814c1590cb610$var$readPLSQLQuotedLiteral(input, openDelim);\n            input.acceptToken($980814c1590cb610$var$String$1);\n        } else if (next == 40 /* Ch.ParenL */ ) input.acceptToken($980814c1590cb610$var$ParenL);\n        else if (next == 41 /* Ch.ParenR */ ) input.acceptToken($980814c1590cb610$var$ParenR);\n        else if (next == 123 /* Ch.BraceL */ ) input.acceptToken($980814c1590cb610$var$BraceL);\n        else if (next == 125 /* Ch.BraceR */ ) input.acceptToken($980814c1590cb610$var$BraceR);\n        else if (next == 91 /* Ch.BracketL */ ) input.acceptToken($980814c1590cb610$var$BracketL);\n        else if (next == 93 /* Ch.BracketR */ ) input.acceptToken($980814c1590cb610$var$BracketR);\n        else if (next == 59 /* Ch.Semi */ ) input.acceptToken($980814c1590cb610$var$Semi);\n        else if (d.unquotedBitLiterals && next == 48 /* Ch._0 */  && input.next == 98 /* Ch.b */ ) {\n            input.advance();\n            $980814c1590cb610$var$readBits(input);\n            input.acceptToken($980814c1590cb610$var$Bits);\n        } else if ((next == 98 /* Ch.b */  || next == 66 /* Ch.B */ ) && (input.next == 39 /* Ch.SingleQuote */  || input.next == 34 /* Ch.DoubleQuote */ )) {\n            const quoteStyle = input.next;\n            input.advance();\n            if (d.treatBitsAsBytes) {\n                $980814c1590cb610$var$readLiteral(input, quoteStyle, d.backslashEscapes);\n                input.acceptToken($980814c1590cb610$var$Bytes);\n            } else {\n                $980814c1590cb610$var$readBits(input, quoteStyle);\n                input.acceptToken($980814c1590cb610$var$Bits);\n            }\n        } else if (next == 48 /* Ch._0 */  && (input.next == 120 /* Ch.x */  || input.next == 88 /* Ch.X */ ) || (next == 120 /* Ch.x */  || next == 88 /* Ch.X */ ) && input.next == 39 /* Ch.SingleQuote */ ) {\n            let quoted = input.next == 39 /* Ch.SingleQuote */ ;\n            input.advance();\n            while($980814c1590cb610$var$isHexDigit(input.next))input.advance();\n            if (quoted && input.next == 39 /* Ch.SingleQuote */ ) input.advance();\n            input.acceptToken($980814c1590cb610$var$Number);\n        } else if (next == 46 /* Ch.Dot */  && input.next >= 48 /* Ch._0 */  && input.next <= 57 /* Ch._9 */ ) {\n            $980814c1590cb610$var$readNumber(input, true);\n            input.acceptToken($980814c1590cb610$var$Number);\n        } else if (next == 46 /* Ch.Dot */ ) input.acceptToken($980814c1590cb610$var$Dot);\n        else if (next >= 48 /* Ch._0 */  && next <= 57 /* Ch._9 */ ) {\n            $980814c1590cb610$var$readNumber(input, false);\n            input.acceptToken($980814c1590cb610$var$Number);\n        } else if ($980814c1590cb610$var$inString(next, d.operatorChars)) {\n            while($980814c1590cb610$var$inString(input.next, d.operatorChars))input.advance();\n            input.acceptToken($980814c1590cb610$var$Operator);\n        } else if ($980814c1590cb610$var$inString(next, d.specialVar)) {\n            if (input.next == next) input.advance();\n            $980814c1590cb610$var$readWordOrQuoted(input);\n            input.acceptToken($980814c1590cb610$var$SpecialVar);\n        } else if ($980814c1590cb610$var$inString(next, d.identifierQuotes)) {\n            $980814c1590cb610$var$readLiteral(input, next, false);\n            input.acceptToken($980814c1590cb610$var$QuotedIdentifier);\n        } else if (next == 58 /* Ch.Colon */  || next == 44 /* Ch.Comma */ ) input.acceptToken($980814c1590cb610$var$Punctuation);\n        else if ($980814c1590cb610$var$isAlpha(next)) {\n            let word = $980814c1590cb610$var$readWord(input, String.fromCharCode(next));\n            input.acceptToken(input.next == 46 /* Ch.Dot */  || input.peek(-word.length - 1) == 46 /* Ch.Dot */  ? $980814c1590cb610$var$Identifier : (_a = d.words[word.toLowerCase()]) !== null && _a !== void 0 ? _a : $980814c1590cb610$var$Identifier);\n        }\n    });\n}\nconst $980814c1590cb610$var$tokens = /*@__PURE__*/ $980814c1590cb610$var$tokensFor($980814c1590cb610$var$defaults);\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst $980814c1590cb610$var$parser$1 = /*@__PURE__*/ (0, $cXi2l.LRParser).deserialize({\n    version: 14,\n    states: \"%vQ]QQOOO#wQRO'#DSO$OQQO'#CwO%eQQO'#CxO%lQQO'#CyO%sQQO'#CzOOQQ'#DS'#DSOOQQ'#C}'#C}O'UQRO'#C{OOQQ'#Cv'#CvOOQQ'#C|'#C|Q]QQOOQOQQOOO'`QQO'#DOO(xQRO,59cO)PQQO,59cO)UQQO'#DSOOQQ,59d,59dO)cQQO,59dOOQQ,59e,59eO)jQQO,59eOOQQ,59f,59fO)qQQO,59fOOQQ-E6{-E6{OOQQ,59b,59bOOQQ-E6z-E6zOOQQ,59j,59jOOQQ-E6|-E6|O+VQRO1G.}O+^QQO,59cOOQQ1G/O1G/OOOQQ1G/P1G/POOQQ1G/Q1G/QP+kQQO'#C}O+rQQO1G.}O)PQQO,59cO,PQQO'#Cw\",\n    stateData: \",[~OtOSPOSQOS~ORUOSUOTUOUUOVROXSOZTO]XO^QO_UO`UOaPObPOcPOdUOeUOfUOgUOhUO~O^]ORvXSvXTvXUvXVvXXvXZvX]vX_vX`vXavXbvXcvXdvXevXfvXgvXhvX~OsvX~P!jOa_Ob_Oc_O~ORUOSUOTUOUUOVROXSOZTO^tO_UO`UOa`Ob`Oc`OdUOeUOfUOgUOhUO~OWaO~P$ZOYcO~P$ZO[eO~P$ZORUOSUOTUOUUOVROXSOZTO^QO_UO`UOaPObPOcPOdUOeUOfUOgUOhUO~O]hOsoX~P%zOajObjOcjO~O^]ORkaSkaTkaUkaVkaXkaZka]ka_ka`kaakabkackadkaekafkagkahka~Oska~P'kO^]O~OWvXYvX[vX~P!jOWnO~P$ZOYoO~P$ZO[pO~P$ZO^]ORkiSkiTkiUkiVkiXkiZki]ki_ki`kiakibkickidkiekifkigkihki~Oski~P)xOWkaYka[ka~P'kO]hO~P$ZOWkiYki[ki~P)xOasObsOcsO~O\",\n    goto: \"#hwPPPPPPPPPPPPPPPPPPPPPPPPPPx||||!Y!^!d!xPPP#[TYOZeUORSTWZbdfqT[OZQZORiZSWOZQbRQdSQfTZgWbdfqQ^PWk^lmrQl_Qm`RrseVORSTWZbdfq\",\n    nodeNames: \"\\u26A0 LineComment BlockComment String Number Bool Null ( ) { } [ ] ; . Operator Punctuation SpecialVar Identifier QuotedIdentifier Keyword Type Bits Bytes Builtin Script Statement CompositeIdentifier Parens Braces Brackets Statement\",\n    maxTerm: 38,\n    nodeProps: [\n        [\n            \"isolate\",\n            -4,\n            1,\n            2,\n            3,\n            19,\n            \"\"\n        ]\n    ],\n    skippedNodes: [\n        0,\n        1,\n        2\n    ],\n    repeatNodeCount: 3,\n    tokenData: \"RORO\",\n    tokenizers: [\n        0,\n        $980814c1590cb610$var$tokens\n    ],\n    topRules: {\n        \"Script\": [\n            0,\n            25\n        ]\n    },\n    tokenPrec: 0\n});\nfunction $980814c1590cb610$var$tokenBefore(tree) {\n    let cursor = tree.cursor().moveTo(tree.from, -1);\n    while(/Comment/.test(cursor.name))cursor.moveTo(cursor.from, -1);\n    return cursor.node;\n}\nfunction $980814c1590cb610$var$idName(doc, node) {\n    let text = doc.sliceString(node.from, node.to);\n    let quoted = /^([`'\"])(.*)\\1$/.exec(text);\n    return quoted ? quoted[2] : text;\n}\nfunction $980814c1590cb610$var$plainID(node) {\n    return node && (node.name == \"Identifier\" || node.name == \"QuotedIdentifier\");\n}\nfunction $980814c1590cb610$var$pathFor(doc, id) {\n    if (id.name == \"CompositeIdentifier\") {\n        let path = [];\n        for(let ch = id.firstChild; ch; ch = ch.nextSibling)if ($980814c1590cb610$var$plainID(ch)) path.push($980814c1590cb610$var$idName(doc, ch));\n        return path;\n    }\n    return [\n        $980814c1590cb610$var$idName(doc, id)\n    ];\n}\nfunction $980814c1590cb610$var$parentsFor(doc, node) {\n    for(let path = [];;){\n        if (!node || node.name != \".\") return path;\n        let name = $980814c1590cb610$var$tokenBefore(node);\n        if (!$980814c1590cb610$var$plainID(name)) return path;\n        path.unshift($980814c1590cb610$var$idName(doc, name));\n        node = $980814c1590cb610$var$tokenBefore(name);\n    }\n}\nfunction $980814c1590cb610$var$sourceContext(state, startPos) {\n    let pos = (0, $eyb1x.syntaxTree)(state).resolveInner(startPos, -1);\n    let aliases = $980814c1590cb610$var$getAliases(state.doc, pos);\n    if (pos.name == \"Identifier\" || pos.name == \"QuotedIdentifier\" || pos.name == \"Keyword\") return {\n        from: pos.from,\n        quoted: pos.name == \"QuotedIdentifier\" ? state.doc.sliceString(pos.from, pos.from + 1) : null,\n        parents: $980814c1590cb610$var$parentsFor(state.doc, $980814c1590cb610$var$tokenBefore(pos)),\n        aliases: aliases\n    };\n    if (pos.name == \".\") return {\n        from: startPos,\n        quoted: null,\n        parents: $980814c1590cb610$var$parentsFor(state.doc, pos),\n        aliases: aliases\n    };\n    else return {\n        from: startPos,\n        quoted: null,\n        parents: [],\n        empty: true,\n        aliases: aliases\n    };\n}\nconst $980814c1590cb610$var$EndFrom = /*@__PURE__*/ new Set(/*@__PURE__*/ \"where group having order union intersect except all distinct limit offset fetch for\".split(\" \"));\nfunction $980814c1590cb610$var$getAliases(doc, at) {\n    let statement;\n    for(let parent = at; !statement; parent = parent.parent){\n        if (!parent) return null;\n        if (parent.name == \"Statement\") statement = parent;\n    }\n    let aliases = null;\n    for(let scan = statement.firstChild, sawFrom = false, prevID = null; scan; scan = scan.nextSibling){\n        let kw = scan.name == \"Keyword\" ? doc.sliceString(scan.from, scan.to).toLowerCase() : null;\n        let alias = null;\n        if (!sawFrom) sawFrom = kw == \"from\";\n        else if (kw == \"as\" && prevID && $980814c1590cb610$var$plainID(scan.nextSibling)) alias = $980814c1590cb610$var$idName(doc, scan.nextSibling);\n        else if (kw && $980814c1590cb610$var$EndFrom.has(kw)) break;\n        else if (prevID && $980814c1590cb610$var$plainID(scan)) alias = $980814c1590cb610$var$idName(doc, scan);\n        if (alias) {\n            if (!aliases) aliases = Object.create(null);\n            aliases[alias] = $980814c1590cb610$var$pathFor(doc, prevID);\n        }\n        prevID = /Identifier$/.test(scan.name) ? scan : null;\n    }\n    return aliases;\n}\nfunction $980814c1590cb610$var$maybeQuoteCompletions(quote, completions) {\n    if (!quote) return completions;\n    return completions.map((c)=>({\n            ...c,\n            label: c.label[0] == quote ? c.label : quote + c.label + quote,\n            apply: undefined\n        }));\n}\nconst $980814c1590cb610$var$Span = /^\\w*$/, $980814c1590cb610$var$QuotedSpan = /^[`'\"]?\\w*[`'\"]?$/;\nfunction $980814c1590cb610$var$isSelfTag(namespace) {\n    return namespace.self && typeof namespace.self.label == \"string\";\n}\nclass $980814c1590cb610$var$CompletionLevel {\n    constructor(idQuote, idCaseInsensitive){\n        this.idQuote = idQuote;\n        this.idCaseInsensitive = idCaseInsensitive;\n        this.list = [];\n        this.children = undefined;\n    }\n    child(name) {\n        let children = this.children || (this.children = Object.create(null));\n        let found = children[name];\n        if (found) return found;\n        if (name && !this.list.some((c)=>c.label == name)) this.list.push($980814c1590cb610$var$nameCompletion(name, \"type\", this.idQuote, this.idCaseInsensitive));\n        return children[name] = new $980814c1590cb610$var$CompletionLevel(this.idQuote, this.idCaseInsensitive);\n    }\n    maybeChild(name) {\n        return this.children ? this.children[name] : null;\n    }\n    addCompletion(option) {\n        let found = this.list.findIndex((o)=>o.label == option.label);\n        if (found > -1) this.list[found] = option;\n        else this.list.push(option);\n    }\n    addCompletions(completions) {\n        for (let option of completions)this.addCompletion(typeof option == \"string\" ? $980814c1590cb610$var$nameCompletion(option, \"property\", this.idQuote, this.idCaseInsensitive) : option);\n    }\n    addNamespace(namespace) {\n        if (Array.isArray(namespace)) this.addCompletions(namespace);\n        else if ($980814c1590cb610$var$isSelfTag(namespace)) this.addNamespace(namespace.children);\n        else this.addNamespaceObject(namespace);\n    }\n    addNamespaceObject(namespace) {\n        for (let name of Object.keys(namespace)){\n            let children = namespace[name], self = null;\n            let parts = name.replace(/\\\\?\\./g, (p)=>p == \".\" ? \"\\0\" : p).split(\"\\0\");\n            let scope = this;\n            if ($980814c1590cb610$var$isSelfTag(children)) {\n                self = children.self;\n                children = children.children;\n            }\n            for(let i = 0; i < parts.length; i++){\n                if (self && i == parts.length - 1) scope.addCompletion(self);\n                scope = scope.child(parts[i].replace(/\\\\\\./g, \".\"));\n            }\n            scope.addNamespace(children);\n        }\n    }\n}\nfunction $980814c1590cb610$var$nameCompletion(label, type, idQuote, idCaseInsensitive) {\n    if (new RegExp(\"^[a-z_][a-z_\\\\d]*$\", idCaseInsensitive ? \"i\" : \"\").test(label)) return {\n        label: label,\n        type: type\n    };\n    return {\n        label: label,\n        type: type,\n        apply: idQuote + label + idQuote\n    };\n}\n// Some of this is more gnarly than it has to be because we're also\n// supporting the deprecated, not-so-well-considered style of\n// supplying the schema (dotted property names for schemas, separate\n// `tables` and `schemas` completions).\nfunction $980814c1590cb610$var$completeFromSchema(schema, tables, schemas, defaultTableName, defaultSchemaName, dialect) {\n    var _a;\n    let idQuote = ((_a = dialect === null || dialect === void 0 ? void 0 : dialect.spec.identifierQuotes) === null || _a === void 0 ? void 0 : _a[0]) || '\"';\n    let top = new $980814c1590cb610$var$CompletionLevel(idQuote, !!(dialect === null || dialect === void 0 ? void 0 : dialect.spec.caseInsensitiveIdentifiers));\n    let defaultSchema = defaultSchemaName ? top.child(defaultSchemaName) : null;\n    top.addNamespace(schema);\n    if (tables) (defaultSchema || top).addCompletions(tables);\n    if (schemas) top.addCompletions(schemas);\n    if (defaultSchema) top.addCompletions(defaultSchema.list);\n    if (defaultTableName) top.addCompletions((defaultSchema || top).child(defaultTableName).list);\n    return (context)=>{\n        let { parents: parents, from: from, quoted: quoted, empty: empty, aliases: aliases } = $980814c1590cb610$var$sourceContext(context.state, context.pos);\n        if (empty && !context.explicit) return null;\n        if (aliases && parents.length == 1) parents = aliases[parents[0]] || parents;\n        let level = top;\n        for (let name of parents){\n            while(!level.children || !level.children[name]){\n                if (level == top && defaultSchema) level = defaultSchema;\n                else if (level == defaultSchema && defaultTableName) level = level.child(defaultTableName);\n                else return null;\n            }\n            let next = level.maybeChild(name);\n            if (!next) return null;\n            level = next;\n        }\n        let quoteAfter = quoted && context.state.sliceDoc(context.pos, context.pos + 1) == quoted;\n        let options = level.list;\n        if (level == top && aliases) options = options.concat(Object.keys(aliases).map((name)=>({\n                label: name,\n                type: \"constant\"\n            })));\n        return {\n            from: from,\n            to: quoteAfter ? context.pos + 1 : undefined,\n            options: $980814c1590cb610$var$maybeQuoteCompletions(quoted, options),\n            validFor: quoted ? $980814c1590cb610$var$QuotedSpan : $980814c1590cb610$var$Span\n        };\n    };\n}\nfunction $980814c1590cb610$var$completionType(tokenType) {\n    return tokenType == $980814c1590cb610$var$Type ? \"type\" : tokenType == $980814c1590cb610$var$Keyword ? \"keyword\" : \"variable\";\n}\nfunction $980814c1590cb610$var$completeKeywords(keywords, upperCase, build) {\n    let completions = Object.keys(keywords).map((keyword)=>build(upperCase ? keyword.toUpperCase() : keyword, $980814c1590cb610$var$completionType(keywords[keyword])));\n    return (0, $a586V.ifNotIn)([\n        \"QuotedIdentifier\",\n        \"String\",\n        \"LineComment\",\n        \"BlockComment\",\n        \".\"\n    ], (0, $a586V.completeFromList)(completions));\n}\nlet $980814c1590cb610$var$parser = /*@__PURE__*/ $980814c1590cb610$var$parser$1.configure({\n    props: [\n        /*@__PURE__*/ (0, $eyb1x.indentNodeProp).add({\n            Statement: /*@__PURE__*/ (0, $eyb1x.continuedIndent)()\n        }),\n        /*@__PURE__*/ (0, $eyb1x.foldNodeProp).add({\n            Statement (tree, state) {\n                return {\n                    from: Math.min(tree.from + 100, state.doc.lineAt(tree.from).to),\n                    to: tree.to\n                };\n            },\n            BlockComment (tree) {\n                return {\n                    from: tree.from + 2,\n                    to: tree.to - 2\n                };\n            }\n        }),\n        /*@__PURE__*/ (0, $dTUZ7.styleTags)({\n            Keyword: (0, $dTUZ7.tags).keyword,\n            Type: (0, $dTUZ7.tags).typeName,\n            Builtin: /*@__PURE__*/ (0, $dTUZ7.tags).standard((0, $dTUZ7.tags).name),\n            Bits: (0, $dTUZ7.tags).number,\n            Bytes: (0, $dTUZ7.tags).string,\n            Bool: (0, $dTUZ7.tags).bool,\n            Null: (0, $dTUZ7.tags).null,\n            Number: (0, $dTUZ7.tags).number,\n            String: (0, $dTUZ7.tags).string,\n            Identifier: (0, $dTUZ7.tags).name,\n            QuotedIdentifier: /*@__PURE__*/ (0, $dTUZ7.tags).special((0, $dTUZ7.tags).string),\n            SpecialVar: /*@__PURE__*/ (0, $dTUZ7.tags).special((0, $dTUZ7.tags).name),\n            LineComment: (0, $dTUZ7.tags).lineComment,\n            BlockComment: (0, $dTUZ7.tags).blockComment,\n            Operator: (0, $dTUZ7.tags).operator,\n            \"Semi Punctuation\": (0, $dTUZ7.tags).punctuation,\n            \"( )\": (0, $dTUZ7.tags).paren,\n            \"{ }\": (0, $dTUZ7.tags).brace,\n            \"[ ]\": (0, $dTUZ7.tags).squareBracket\n        })\n    ]\n});\n/**\nRepresents an SQL dialect.\n*/ class $980814c1590cb610$export$cb7041a7779156a7 {\n    constructor(/**\n    @internal\n    */ dialect, /**\n    The language for this dialect.\n    */ language, /**\n    The spec used to define this dialect.\n    */ spec){\n        this.dialect = dialect;\n        this.language = language;\n        this.spec = spec;\n    }\n    /**\n    Returns the language for this dialect as an extension.\n    */ get extension() {\n        return this.language.extension;\n    }\n    /**\n    Reconfigure the parser used by this dialect. Returns a new\n    dialect object.\n    */ configureLanguage(options, name) {\n        return new $980814c1590cb610$export$cb7041a7779156a7(this.dialect, this.language.configure(options, name), this.spec);\n    }\n    /**\n    Define a new dialect.\n    */ static define(spec) {\n        let d = $980814c1590cb610$var$dialect(spec, spec.keywords, spec.types, spec.builtin);\n        let language = (0, $eyb1x.LRLanguage).define({\n            name: \"sql\",\n            parser: $980814c1590cb610$var$parser.configure({\n                tokenizers: [\n                    {\n                        from: $980814c1590cb610$var$tokens,\n                        to: $980814c1590cb610$var$tokensFor(d)\n                    }\n                ]\n            }),\n            languageData: {\n                commentTokens: {\n                    line: \"--\",\n                    block: {\n                        open: \"/*\",\n                        close: \"*/\"\n                    }\n                },\n                closeBrackets: {\n                    brackets: [\n                        \"(\",\n                        \"[\",\n                        \"{\",\n                        \"'\",\n                        '\"',\n                        \"`\"\n                    ]\n                }\n            }\n        });\n        return new $980814c1590cb610$export$cb7041a7779156a7(d, language, spec);\n    }\n}\nfunction $980814c1590cb610$var$defaultKeyword(label, type) {\n    return {\n        label: label,\n        type: type,\n        boost: -1\n    };\n}\n/**\nReturns a completion source that provides keyword completion for\nthe given SQL dialect.\n*/ function $980814c1590cb610$export$3b2ae0de3f836403(dialect, upperCase = false, build) {\n    return $980814c1590cb610$var$completeKeywords(dialect.dialect.words, upperCase, build || $980814c1590cb610$var$defaultKeyword);\n}\n/**\nReturns a completion sources that provides schema-based completion\nfor the given configuration.\n*/ function $980814c1590cb610$export$17bf40d4487b589f(config) {\n    return config.schema ? $980814c1590cb610$var$completeFromSchema(config.schema, config.tables, config.schemas, config.defaultTable, config.defaultSchema, config.dialect || $980814c1590cb610$export$4a7746173d1ef2e1) : ()=>null;\n}\nfunction $980814c1590cb610$var$schemaCompletion(config) {\n    return config.schema ? (config.dialect || $980814c1590cb610$export$4a7746173d1ef2e1).language.data.of({\n        autocomplete: $980814c1590cb610$export$17bf40d4487b589f(config)\n    }) : [];\n}\n/**\nSQL language support for the given SQL dialect, with keyword\ncompletion, and, if provided, schema-based completion as extra\nextensions.\n*/ function $980814c1590cb610$export$6e9c87fa17e36c5d(config = {}) {\n    let lang = config.dialect || $980814c1590cb610$export$4a7746173d1ef2e1;\n    return new (0, $eyb1x.LanguageSupport)(lang.language, [\n        $980814c1590cb610$var$schemaCompletion(config),\n        lang.language.data.of({\n            autocomplete: $980814c1590cb610$export$3b2ae0de3f836403(lang, config.upperCaseKeywords, config.keywordCompletion)\n        })\n    ]);\n}\n/**\nThe standard SQL dialect.\n*/ const $980814c1590cb610$export$4a7746173d1ef2e1 = /*@__PURE__*/ $980814c1590cb610$export$cb7041a7779156a7.define({});\n/**\nDialect for [PostgreSQL](https://www.postgresql.org).\n*/ const $980814c1590cb610$export$b9f73592be0033d5 = /*@__PURE__*/ $980814c1590cb610$export$cb7041a7779156a7.define({\n    charSetCasts: true,\n    doubleDollarQuotedStrings: true,\n    operatorChars: \"+-*/<>=~!@#%^&|`?\",\n    specialVar: \"\",\n    keywords: $980814c1590cb610$var$SQLKeywords + \"abort abs absent access according ada admin aggregate alias also always analyse analyze array_agg array_max_cardinality asensitive assert assignment asymmetric atomic attach attribute attributes avg backward base64 begin_frame begin_partition bernoulli bit_length blocked bom cache called cardinality catalog_name ceil ceiling chain char_length character_length character_set_catalog character_set_name character_set_schema characteristics characters checkpoint class class_origin cluster coalesce cobol collation_catalog collation_name collation_schema collect column_name columns command_function command_function_code comment comments committed concurrently condition_number configuration conflict connection_name constant constraint_catalog constraint_name constraint_schema contains content control conversion convert copy corr cost covar_pop covar_samp csv cume_dist current_catalog current_row current_schema cursor_name database datalink datatype datetime_interval_code datetime_interval_precision db debug defaults defined definer degree delimiter delimiters dense_rank depends derived detach detail dictionary disable discard dispatch dlnewcopy dlpreviouscopy dlurlcomplete dlurlcompleteonly dlurlcompletewrite dlurlpath dlurlpathonly dlurlpathwrite dlurlscheme dlurlserver dlvalue document dump dynamic_function dynamic_function_code element elsif empty enable encoding encrypted end_frame end_partition endexec enforced enum errcode error event every exclude excluding exclusive exp explain expression extension extract family file filter final first_value flag floor following force foreach fortran forward frame_row freeze fs functions fusion generated granted greatest groups handler header hex hierarchy hint id ignore ilike immediately immutable implementation implicit import include including increment indent index indexes info inherit inherits inline insensitive instance instantiable instead integrity intersection invoker isnull key_member key_type label lag last_value lead leakproof least length library like_regex link listen ln load location lock locked log logged lower mapping matched materialized max max_cardinality maxvalue member merge message message_length message_octet_length message_text min minvalue mod mode more move multiset mumps name namespace nfc nfd nfkc nfkd nil normalize normalized nothing notice notify notnull nowait nth_value ntile nullable nullif nulls number occurrences_regex octet_length octets off offset oids operator options ordering others over overlay overriding owned owner parallel parameter_mode parameter_name parameter_ordinal_position parameter_specific_catalog parameter_specific_name parameter_specific_schema parser partition pascal passing passthrough password percent percent_rank percentile_cont percentile_disc perform period permission pg_context pg_datatype_name pg_exception_context pg_exception_detail pg_exception_hint placing plans pli policy portion position position_regex power precedes preceding prepared print_strict_params procedural procedures program publication query quote raise range rank reassign recheck recovery refresh regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy regr_syy reindex rename repeatable replace replica requiring reset respect restart restore result_oid returned_cardinality returned_length returned_octet_length returned_sqlstate returning reverse routine_catalog routine_name routine_schema routines row_count row_number rowtype rule scale schema_name schemas scope scope_catalog scope_name scope_schema security selective self sensitive sequence sequences serializable server server_name setof share show simple skip slice snapshot source specific_name sqlcode sqlerror sqrt stable stacked standalone statement statistics stddev_pop stddev_samp stdin stdout storage strict strip structure style subclass_origin submultiset subscription substring substring_regex succeeds sum symmetric sysid system system_time table_name tables tablesample tablespace temp template ties token top_level_count transaction_active transactions_committed transactions_rolled_back transform transforms translate translate_regex trigger_catalog trigger_name trigger_schema trim trim_array truncate trusted type types uescape unbounded uncommitted unencrypted unlink unlisten unlogged unnamed untyped upper uri use_column use_variable user_defined_type_catalog user_defined_type_code user_defined_type_name user_defined_type_schema vacuum valid validate validator value_of var_pop var_samp varbinary variable_conflict variadic verbose version versioning views volatile warning whitespace width_bucket window within wrapper xmlagg xmlattributes xmlbinary xmlcast xmlcomment xmlconcat xmldeclaration xmldocument xmlelement xmlexists xmlforest xmliterate xmlnamespaces xmlparse xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltext xmlvalidate yes\",\n    types: $980814c1590cb610$var$SQLTypes + \"bigint int8 bigserial serial8 varbit bool box bytea cidr circle precision float8 inet int4 json jsonb line lseg macaddr macaddr8 money numeric pg_lsn point polygon float4 int2 smallserial serial2 serial serial4 text timetz timestamptz tsquery tsvector txid_snapshot uuid xml\"\n});\nconst $980814c1590cb610$var$MySQLKeywords = \"accessible algorithm analyze asensitive authors auto_increment autocommit avg avg_row_length binlog btree cache catalog_name chain change changed checkpoint checksum class_origin client_statistics coalesce code collations columns comment committed completion concurrent consistent contains contributors convert database databases day_hour day_microsecond day_minute day_second delay_key_write delayed delimiter des_key_file dev_pop dev_samp deviance directory disable discard distinctrow div dual dumpfile enable enclosed ends engine engines enum errors escaped even event events every explain extended fast field fields flush force found_rows fulltext grants handler hash high_priority hosts hour_microsecond hour_minute hour_second ignore ignore_server_ids import index index_statistics infile innodb insensitive insert_method install invoker iterate keys kill linear lines list load lock logs low_priority master master_heartbeat_period master_ssl_verify_server_cert masters max max_rows maxvalue message_text middleint migrate min min_rows minute_microsecond minute_second mod mode modify mutex mysql_errno no_write_to_binlog offline offset one online optimize optionally outfile pack_keys parser partition partitions password phase plugin plugins prev processlist profile profiles purge query quick range read_write rebuild recover regexp relaylog remove rename reorganize repair repeatable replace require resume rlike row_format rtree schedule schema_name schemas second_microsecond security sensitive separator serializable server share show slave slow snapshot soname spatial sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_no_cache sql_small_result ssl starting starts std stddev stddev_pop stddev_samp storage straight_join subclass_origin sum suspend table_name table_statistics tables tablespace terminated triggers truncate uncommitted uninstall unlock upgrade use use_frm user_resources user_statistics utc_date utc_time utc_timestamp variables views warnings xa xor year_month zerofill\";\nconst $980814c1590cb610$var$MySQLTypes = $980814c1590cb610$var$SQLTypes + \"bool blob long longblob longtext medium mediumblob mediumint mediumtext tinyblob tinyint tinytext text bigint int1 int2 int3 int4 int8 float4 float8 varbinary varcharacter precision datetime unsigned signed\";\nconst $980814c1590cb610$var$MySQLBuiltin = \"charset clear edit ego help nopager notee nowarning pager print prompt quit rehash source status system tee\";\n/**\n[MySQL](https://dev.mysql.com/) dialect.\n*/ const $980814c1590cb610$export$89bad9ac1f3785f8 = /*@__PURE__*/ $980814c1590cb610$export$cb7041a7779156a7.define({\n    operatorChars: \"*+-%<>!=&|^\",\n    charSetCasts: true,\n    doubleQuotedStrings: true,\n    unquotedBitLiterals: true,\n    hashComments: true,\n    spaceAfterDashes: true,\n    specialVar: \"@?\",\n    identifierQuotes: \"`\",\n    keywords: $980814c1590cb610$var$SQLKeywords + \"group_concat \" + $980814c1590cb610$var$MySQLKeywords,\n    types: $980814c1590cb610$var$MySQLTypes,\n    builtin: $980814c1590cb610$var$MySQLBuiltin\n});\n/**\nVariant of [`MySQL`](https://codemirror.net/6/docs/ref/#lang-sql.MySQL) for\n[MariaDB](https://mariadb.org/).\n*/ const $980814c1590cb610$export$3f21b786f95184f1 = /*@__PURE__*/ $980814c1590cb610$export$cb7041a7779156a7.define({\n    operatorChars: \"*+-%<>!=&|^\",\n    charSetCasts: true,\n    doubleQuotedStrings: true,\n    unquotedBitLiterals: true,\n    hashComments: true,\n    spaceAfterDashes: true,\n    specialVar: \"@?\",\n    identifierQuotes: \"`\",\n    keywords: $980814c1590cb610$var$SQLKeywords + \"always generated groupby_concat hard persistent shutdown soft virtual \" + $980814c1590cb610$var$MySQLKeywords,\n    types: $980814c1590cb610$var$MySQLTypes,\n    builtin: $980814c1590cb610$var$MySQLBuiltin\n});\nlet $980814c1590cb610$var$MSSQLBuiltin = // Aggregate https://msdn.microsoft.com/en-us/library/ms173454.aspx\n\"approx_count_distinct approx_percentile_cont approx_percentile_disc avg checksum_agg count count_big grouping grouping_id max min product stdev stdevp sum var varp ai_generate_embeddings ai_generate_chunks cume_dist first_value lag last_value lead percentile_cont percentile_disc percent_rank left_shift right_shift bit_count get_bit set_bit collationproperty tertiary_weights @@datefirst @@dbts @@langid @@language @@lock_timeout @@max_connections @@max_precision @@nestlevel @@options @@remserver @@servername @@servicename @@spid @@textsize @@version cast convert parse try_cast try_convert try_parse asymkey_id asymkeyproperty certproperty cert_id crypt_gen_random decryptbyasymkey decryptbycert decryptbykey decryptbykeyautoasymkey decryptbykeyautocert decryptbypassphrase encryptbyasymkey encryptbycert encryptbykey encryptbypassphrase hashbytes is_objectsigned key_guid key_id key_name signbyasymkey signbycert symkeyproperty verifysignedbycert verifysignedbyasymkey @@cursor_rows @@fetch_status cursor_status datalength ident_current ident_incr ident_seed identity sql_variant_property @@datefirst current_timestamp current_timezone current_timezone_id date_bucket dateadd datediff datediff_big datefromparts datename datepart datetime2fromparts datetimefromparts datetimeoffsetfromparts datetrunc day eomonth getdate getutcdate isdate month smalldatetimefromparts switchoffset sysdatetime sysdatetimeoffset sysutcdatetime timefromparts todatetimeoffset year edit_distance edit_distance_similarity jaro_winkler_distance jaro_winkler_similarity edge_id_from_parts graph_id_from_edge_id graph_id_from_node_id node_id_from_parts object_id_from_edge_id object_id_from_node_id json isjson json_array json_contains json_modify json_object json_path_exists json_query json_value regexp_like regexp_replace regexp_substr regexp_instr regexp_count regexp_matches regexp_split_to_table abs acos asin atan atn2 ceiling cos cot degrees exp floor log log10 pi power radians rand round sign sin sqrt square tan choose greatest iif least @@procid app_name applock_mode applock_test assemblyproperty col_length col_name columnproperty databasepropertyex db_id db_name file_id file_idex file_name filegroup_id filegroup_name filegroupproperty fileproperty filepropertyex fulltextcatalogproperty fulltextserviceproperty index_col indexkey_property indexproperty next value for object_definition object_id object_name object_schema_name objectproperty objectpropertyex original_db_name parsename schema_id schema_name scope_identity serverproperty stats_date type_id type_name typeproperty dense_rank ntile rank row_number publishingservername certenclosed certprivatekey current_user database_principal_id has_dbaccess has_perms_by_name is_member is_rolemember is_srvrolemember loginproperty original_login permissions pwdencrypt pwdcompare session_user sessionproperty suser_id suser_name suser_sid suser_sname system_user user user_id user_name ascii char charindex concat concat_ws difference format left len lower ltrim nchar patindex quotename replace replicate reverse right rtrim soundex space str string_agg string_escape stuff substring translate trim unicode upper $partition @@error @@identity @@pack_received @@rowcount @@trancount binary_checksum checksum compress connectionproperty context_info current_request_id current_transaction_id decompress error_line error_message error_number error_procedure error_severity error_state formatmessage get_filestream_transaction_context getansinull host_id host_name isnull isnumeric min_active_rowversion newid newsequentialid rowcount_big session_context xact_state @@connections @@cpu_busy @@idle @@io_busy @@pack_sent @@packet_errors @@timeticks @@total_errors @@total_read @@total_write textptr textvalid columns_updated eventdata trigger_nestlevel vector_distance vectorproperty vector_search generate_series opendatasource openjson openquery openrowset openxml predict string_split coalesce nullif apply catch filter force include keep keepfixed modify optimize parameterization parameters partition recompile sequence set\";\n/**\nSQL dialect for Microsoft [SQL\nServer](https://www.microsoft.com/en-us/sql-server).\n*/ const $980814c1590cb610$export$6d6505b17ff77046 = /*@__PURE__*/ $980814c1590cb610$export$cb7041a7779156a7.define({\n    keywords: $980814c1590cb610$var$SQLKeywords + // Reserved Keywords https://learn.microsoft.com/en-us/sql/t-sql/language-elements/reserved-keywords-transact-sql?view=sql-server-ver17\n    \"add external procedure all fetch public alter file raiserror and fillfactor read any for readtext as foreign reconfigure asc freetext references authorization freetexttable replication backup from restore begin full restrict between function return break goto revert browse grant revoke bulk group right by having rollback cascade holdlock rowcount case identity rowguidcol check identity_insert rule checkpoint identitycol save close if schema clustered in securityaudit coalesce index select collate inner semantickeyphrasetable column insert semanticsimilaritydetailstable commit intersect semanticsimilaritytable compute into session_user constraint is set contains join setuser containstable key shutdown continue kill some convert left statistics create like system_user cross lineno table current load tablesample current_date merge textsize current_time national then current_timestamp nocheck to current_user nonclustered top cursor not tran database null transaction dbcc nullif trigger deallocate of truncate declare off try_convert default offsets tsequal delete on union deny open unique desc opendatasource unpivot disk openquery update distinct openrowset updatetext distributed openxml use double option user drop or values dump order varying else outer view end over waitfor errlvl percent when escape pivot where except plan while exec precision with execute primary within group exists print writetext exit proc \" + // table hints https://learn.microsoft.com/en-us/sql/t-sql/queries/hints-transact-sql-table?view=sql-server-ver17\n    \"noexpand index forceseek forcescan holdlock nolock nowait paglock readcommitted readcommittedlock readpast readuncommitted repeatableread rowlock serializable snapshot spatial_window_max_cells tablock tablockx updlock xlock keepidentity keepdefaults ignore_constraints ignore_triggers\",\n    types: $980814c1590cb610$var$SQLTypes + \"smalldatetime datetimeoffset datetime2 datetime bigint smallint smallmoney tinyint money real text nvarchar ntext varbinary image hierarchyid uniqueidentifier sql_variant xml\",\n    builtin: $980814c1590cb610$var$MSSQLBuiltin,\n    operatorChars: \"*+-%<>!=^&|/\",\n    specialVar: \"@\"\n});\n/**\n[SQLite](https://sqlite.org/) dialect.\n*/ const $980814c1590cb610$export$b5e94ff8bafecf74 = /*@__PURE__*/ $980814c1590cb610$export$cb7041a7779156a7.define({\n    keywords: $980814c1590cb610$var$SQLKeywords + \"abort analyze attach autoincrement conflict database detach exclusive fail glob ignore index indexed instead isnull notnull offset plan pragma query raise regexp reindex rename replace temp vacuum virtual\",\n    types: $980814c1590cb610$var$SQLTypes + \"bool blob long longblob longtext medium mediumblob mediumint mediumtext tinyblob tinyint tinytext text bigint int2 int8 unsigned signed real\",\n    builtin: \"auth backup bail changes clone databases dbinfo dump echo eqp explain fullschema headers help import imposter indexes iotrace lint load log mode nullvalue once print prompt quit restore save scanstats separator shell show stats system tables testcase timeout timer trace vfsinfo vfslist vfsname width\",\n    operatorChars: \"*+-%<>!=&|/~\",\n    identifierQuotes: \"`\\\"\",\n    specialVar: \"@:?$\"\n});\n/**\nDialect for [Cassandra](https://cassandra.apache.org/)'s SQL-ish query language.\n*/ const $980814c1590cb610$export$7a0261e5cc11a0c5 = /*@__PURE__*/ $980814c1590cb610$export$cb7041a7779156a7.define({\n    keywords: \"add all allow alter and any apply as asc authorize batch begin by clustering columnfamily compact consistency count create custom delete desc distinct drop each_quorum exists filtering from grant if in index insert into key keyspace keyspaces level limit local_one local_quorum modify nan norecursive nosuperuser not of on one order password permission permissions primary quorum rename revoke schema select set storage superuser table three to token truncate ttl two type unlogged update use user users using values where with writetime infinity NaN\",\n    types: $980814c1590cb610$var$SQLTypes + \"ascii bigint blob counter frozen inet list map static text timeuuid tuple uuid varint\",\n    slashComments: true\n});\n/**\n[PL/SQL](https://en.wikipedia.org/wiki/PL/SQL) dialect.\n*/ const $980814c1590cb610$export$fd3143eacf0ff224 = /*@__PURE__*/ $980814c1590cb610$export$cb7041a7779156a7.define({\n    keywords: $980814c1590cb610$var$SQLKeywords + \"abort accept access add all alter and any arraylen as asc assert assign at attributes audit authorization avg base_table begin between binary_integer body by case cast char_base check close cluster clusters colauth column comment commit compress connected constant constraint crash create current currval cursor data_base database dba deallocate debugoff debugon declare default definition delay delete desc digits dispose distinct do drop else elseif elsif enable end entry exception exception_init exchange exclusive exists external fast fetch file for force form from function generic goto grant group having identified if immediate in increment index indexes indicator initial initrans insert interface intersect into is key level library like limited local lock log logging loop master maxextents maxtrans member minextents minus mislabel mode modify multiset new next no noaudit nocompress nologging noparallel not nowait number_base of off offline on online only option or order out package parallel partition pctfree pctincrease pctused pls_integer positive positiven pragma primary prior private privileges procedure public raise range raw rebuild record ref references refresh rename replace resource restrict return returning returns reverse revoke rollback row rowid rowlabel rownum rows run savepoint schema segment select separate set share snapshot some space split sql start statement storage subtype successful synonym tabauth table tables tablespace task terminate then to trigger truncate type union unique unlimited unrecoverable unusable update use using validate value values variable view views when whenever where while with work\",\n    builtin: \"appinfo arraysize autocommit autoprint autorecovery autotrace blockterminator break btitle cmdsep colsep compatibility compute concat copycommit copytypecheck define echo editfile embedded feedback flagger flush heading headsep instance linesize lno loboffset logsource longchunksize markup native newpage numformat numwidth pagesize pause pno recsep recsepchar repfooter repheader serveroutput shiftinout show showmode spool sqlblanklines sqlcase sqlcode sqlcontinue sqlnumber sqlpluscompatibility sqlprefix sqlprompt sqlterminator suffix tab term termout timing trimout trimspool ttitle underline verify version wrap\",\n    types: $980814c1590cb610$var$SQLTypes + \"ascii bfile bfilename bigserial bit blob dec long number nvarchar nvarchar2 serial smallint string text uid varchar2 xml\",\n    operatorChars: \"*/+-%<>!=~\",\n    doubleQuotedStrings: true,\n    charSetCasts: true,\n    plsqlQuotingMechanism: true\n});\n\n});\n\n\n//# sourceMappingURL=dist.4498a2df.js.map\n","import { syntaxTree, indentNodeProp, continuedIndent, foldNodeProp, LRLanguage, LanguageSupport } from '@codemirror/language';\nimport { styleTags, tags } from '@lezer/highlight';\nimport { ExternalTokenizer, LRParser } from '@lezer/lr';\nimport { ifNotIn, completeFromList } from '@codemirror/autocomplete';\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst whitespace = 36,\n  LineComment = 1,\n  BlockComment = 2,\n  String$1 = 3,\n  Number = 4,\n  Bool = 5,\n  Null = 6,\n  ParenL = 7,\n  ParenR = 8,\n  BraceL = 9,\n  BraceR = 10,\n  BracketL = 11,\n  BracketR = 12,\n  Semi = 13,\n  Dot = 14,\n  Operator = 15,\n  Punctuation = 16,\n  SpecialVar = 17,\n  Identifier = 18,\n  QuotedIdentifier = 19,\n  Keyword = 20,\n  Type = 21,\n  Bits = 22,\n  Bytes = 23,\n  Builtin = 24;\n\nfunction isAlpha(ch) {\n    return ch >= 65 /* Ch.A */ && ch <= 90 /* Ch.Z */ || ch >= 97 /* Ch.a */ && ch <= 122 /* Ch.z */ || ch >= 48 /* Ch._0 */ && ch <= 57 /* Ch._9 */;\n}\nfunction isHexDigit(ch) {\n    return ch >= 48 /* Ch._0 */ && ch <= 57 /* Ch._9 */ || ch >= 97 /* Ch.a */ && ch <= 102 /* Ch.f */ || ch >= 65 /* Ch.A */ && ch <= 70 /* Ch.F */;\n}\nfunction readLiteral(input, endQuote, backslashEscapes) {\n    for (let escaped = false;;) {\n        if (input.next < 0)\n            return;\n        if (input.next == endQuote && !escaped) {\n            input.advance();\n            return;\n        }\n        escaped = backslashEscapes && !escaped && input.next == 92 /* Ch.Backslash */;\n        input.advance();\n    }\n}\nfunction readDoubleDollarLiteral(input, tag) {\n    scan: for (;;) {\n        if (input.next < 0)\n            return;\n        if (input.next == 36 /* Ch.Dollar */) {\n            input.advance();\n            for (let i = 0; i < tag.length; i++) {\n                if (input.next != tag.charCodeAt(i))\n                    continue scan;\n                input.advance();\n            }\n            if (input.next == 36 /* Ch.Dollar */) {\n                input.advance();\n                return;\n            }\n        }\n        else {\n            input.advance();\n        }\n    }\n}\nfunction readPLSQLQuotedLiteral(input, openDelim) {\n    let matchingDelim = \"[{<(\".indexOf(String.fromCharCode(openDelim));\n    let closeDelim = matchingDelim < 0 ? openDelim : \"]}>)\".charCodeAt(matchingDelim);\n    for (;;) {\n        if (input.next < 0)\n            return;\n        if (input.next == closeDelim && input.peek(1) == 39 /* Ch.SingleQuote */) {\n            input.advance(2);\n            return;\n        }\n        input.advance();\n    }\n}\nfunction readWord(input, result) {\n    for (;;) {\n        if (input.next != 95 /* Ch.Underscore */ && !isAlpha(input.next))\n            break;\n        if (result != null)\n            result += String.fromCharCode(input.next);\n        input.advance();\n    }\n    return result;\n}\nfunction readWordOrQuoted(input) {\n    if (input.next == 39 /* Ch.SingleQuote */ || input.next == 34 /* Ch.DoubleQuote */ || input.next == 96 /* Ch.Backtick */) {\n        let quote = input.next;\n        input.advance();\n        readLiteral(input, quote, false);\n    }\n    else {\n        readWord(input);\n    }\n}\nfunction readBits(input, endQuote) {\n    while (input.next == 48 /* Ch._0 */ || input.next == 49 /* Ch._1 */)\n        input.advance();\n    if (endQuote && input.next == endQuote)\n        input.advance();\n}\nfunction readNumber(input, sawDot) {\n    for (;;) {\n        if (input.next == 46 /* Ch.Dot */) {\n            if (sawDot)\n                break;\n            sawDot = true;\n        }\n        else if (input.next < 48 /* Ch._0 */ || input.next > 57 /* Ch._9 */) {\n            break;\n        }\n        input.advance();\n    }\n    if (input.next == 69 /* Ch.E */ || input.next == 101 /* Ch.e */) {\n        input.advance();\n        if (input.next == 43 /* Ch.Plus */ || input.next == 45 /* Ch.Dash */)\n            input.advance();\n        while (input.next >= 48 /* Ch._0 */ && input.next <= 57 /* Ch._9 */)\n            input.advance();\n    }\n}\nfunction eol(input) {\n    while (!(input.next < 0 || input.next == 10 /* Ch.Newline */))\n        input.advance();\n}\nfunction inString(ch, str) {\n    for (let i = 0; i < str.length; i++)\n        if (str.charCodeAt(i) == ch)\n            return true;\n    return false;\n}\nconst Space = \" \\t\\r\\n\";\nfunction keywords(keywords, types, builtin) {\n    let result = Object.create(null);\n    result[\"true\"] = result[\"false\"] = Bool;\n    result[\"null\"] = result[\"unknown\"] = Null;\n    for (let kw of keywords.split(\" \"))\n        if (kw)\n            result[kw] = Keyword;\n    for (let tp of types.split(\" \"))\n        if (tp)\n            result[tp] = Type;\n    for (let kw of (builtin || \"\").split(\" \"))\n        if (kw)\n            result[kw] = Builtin;\n    return result;\n}\nconst SQLTypes = \"array binary bit boolean char character clob date decimal double float int integer interval large national nchar nclob numeric object precision real smallint time timestamp varchar varying \";\nconst SQLKeywords = \"absolute action add after all allocate alter and any are as asc assertion at authorization before begin between both breadth by call cascade cascaded case cast catalog check close collate collation column commit condition connect connection constraint constraints constructor continue corresponding count create cross cube current current_date current_default_transform_group current_transform_group_for_type current_path current_role current_time current_timestamp current_user cursor cycle data day deallocate declare default deferrable deferred delete depth deref desc describe descriptor deterministic diagnostics disconnect distinct do domain drop dynamic each else elseif end end-exec equals escape except exception exec execute exists exit external fetch first for foreign found from free full function general get global go goto grant group grouping handle having hold hour identity if immediate in indicator initially inner inout input insert intersect into is isolation join key language last lateral leading leave left level like limit local localtime localtimestamp locator loop map match method minute modifies module month names natural nesting new next no none not of old on only open option or order ordinality out outer output overlaps pad parameter partial path prepare preserve primary prior privileges procedure public read reads recursive redo ref references referencing relative release repeat resignal restrict result return returns revoke right role rollback rollup routine row rows savepoint schema scroll search second section select session session_user set sets signal similar size some space specific specifictype sql sqlexception sqlstate sqlwarning start state static system_user table temporary then timezone_hour timezone_minute to trailing transaction translation treat trigger under undo union unique unnest until update usage user using value values view when whenever where while with without work write year zone \";\nconst defaults = {\n    backslashEscapes: false,\n    hashComments: false,\n    spaceAfterDashes: false,\n    slashComments: false,\n    doubleQuotedStrings: false,\n    doubleDollarQuotedStrings: false,\n    unquotedBitLiterals: false,\n    treatBitsAsBytes: false,\n    charSetCasts: false,\n    plsqlQuotingMechanism: false,\n    operatorChars: \"*+\\-%<>!=&|~^/\",\n    specialVar: \"?\",\n    identifierQuotes: '\"',\n    caseInsensitiveIdentifiers: false,\n    words: /*@__PURE__*/keywords(SQLKeywords, SQLTypes)\n};\nfunction dialect(spec, kws, types, builtin) {\n    let dialect = {};\n    for (let prop in defaults)\n        dialect[prop] = (spec.hasOwnProperty(prop) ? spec : defaults)[prop];\n    if (kws)\n        dialect.words = keywords(kws, types || \"\", builtin);\n    return dialect;\n}\nfunction tokensFor(d) {\n    return new ExternalTokenizer(input => {\n        var _a;\n        let { next } = input;\n        input.advance();\n        if (inString(next, Space)) {\n            while (inString(input.next, Space))\n                input.advance();\n            input.acceptToken(whitespace);\n        }\n        else if (next == 36 /* Ch.Dollar */ && d.doubleDollarQuotedStrings) {\n            let tag = readWord(input, \"\");\n            if (input.next == 36 /* Ch.Dollar */) {\n                input.advance();\n                readDoubleDollarLiteral(input, tag);\n                input.acceptToken(String$1);\n            }\n        }\n        else if (next == 39 /* Ch.SingleQuote */ || next == 34 /* Ch.DoubleQuote */ && d.doubleQuotedStrings) {\n            readLiteral(input, next, d.backslashEscapes);\n            input.acceptToken(String$1);\n        }\n        else if (next == 35 /* Ch.Hash */ && d.hashComments ||\n            next == 47 /* Ch.Slash */ && input.next == 47 /* Ch.Slash */ && d.slashComments) {\n            eol(input);\n            input.acceptToken(LineComment);\n        }\n        else if (next == 45 /* Ch.Dash */ && input.next == 45 /* Ch.Dash */ &&\n            (!d.spaceAfterDashes || input.peek(1) == 32 /* Ch.Space */)) {\n            eol(input);\n            input.acceptToken(LineComment);\n        }\n        else if (next == 47 /* Ch.Slash */ && input.next == 42 /* Ch.Star */) {\n            input.advance();\n            for (let depth = 1;;) {\n                let cur = input.next;\n                if (input.next < 0)\n                    break;\n                input.advance();\n                if (cur == 42 /* Ch.Star */ && input.next == 47 /* Ch.Slash */) {\n                    depth--;\n                    input.advance();\n                    if (!depth)\n                        break;\n                }\n                else if (cur == 47 /* Ch.Slash */ && input.next == 42 /* Ch.Star */) {\n                    depth++;\n                    input.advance();\n                }\n            }\n            input.acceptToken(BlockComment);\n        }\n        else if ((next == 101 /* Ch.e */ || next == 69 /* Ch.E */) && input.next == 39 /* Ch.SingleQuote */) {\n            input.advance();\n            readLiteral(input, 39 /* Ch.SingleQuote */, true);\n            input.acceptToken(String$1);\n        }\n        else if ((next == 110 /* Ch.n */ || next == 78 /* Ch.N */) && input.next == 39 /* Ch.SingleQuote */ &&\n            d.charSetCasts) {\n            input.advance();\n            readLiteral(input, 39 /* Ch.SingleQuote */, d.backslashEscapes);\n            input.acceptToken(String$1);\n        }\n        else if (next == 95 /* Ch.Underscore */ && d.charSetCasts) {\n            for (let i = 0;; i++) {\n                if (input.next == 39 /* Ch.SingleQuote */ && i > 1) {\n                    input.advance();\n                    readLiteral(input, 39 /* Ch.SingleQuote */, d.backslashEscapes);\n                    input.acceptToken(String$1);\n                    break;\n                }\n                if (!isAlpha(input.next))\n                    break;\n                input.advance();\n            }\n        }\n        else if (d.plsqlQuotingMechanism &&\n            (next == 113 /* Ch.q */ || next == 81 /* Ch.Q */) && input.next == 39 /* Ch.SingleQuote */ &&\n            input.peek(1) > 0 && !inString(input.peek(1), Space)) {\n            let openDelim = input.peek(1);\n            input.advance(2);\n            readPLSQLQuotedLiteral(input, openDelim);\n            input.acceptToken(String$1);\n        }\n        else if (next == 40 /* Ch.ParenL */) {\n            input.acceptToken(ParenL);\n        }\n        else if (next == 41 /* Ch.ParenR */) {\n            input.acceptToken(ParenR);\n        }\n        else if (next == 123 /* Ch.BraceL */) {\n            input.acceptToken(BraceL);\n        }\n        else if (next == 125 /* Ch.BraceR */) {\n            input.acceptToken(BraceR);\n        }\n        else if (next == 91 /* Ch.BracketL */) {\n            input.acceptToken(BracketL);\n        }\n        else if (next == 93 /* Ch.BracketR */) {\n            input.acceptToken(BracketR);\n        }\n        else if (next == 59 /* Ch.Semi */) {\n            input.acceptToken(Semi);\n        }\n        else if (d.unquotedBitLiterals && next == 48 /* Ch._0 */ && input.next == 98 /* Ch.b */) {\n            input.advance();\n            readBits(input);\n            input.acceptToken(Bits);\n        }\n        else if ((next == 98 /* Ch.b */ || next == 66 /* Ch.B */) && (input.next == 39 /* Ch.SingleQuote */ || input.next == 34 /* Ch.DoubleQuote */)) {\n            const quoteStyle = input.next;\n            input.advance();\n            if (d.treatBitsAsBytes) {\n                readLiteral(input, quoteStyle, d.backslashEscapes);\n                input.acceptToken(Bytes);\n            }\n            else {\n                readBits(input, quoteStyle);\n                input.acceptToken(Bits);\n            }\n        }\n        else if (next == 48 /* Ch._0 */ && (input.next == 120 /* Ch.x */ || input.next == 88 /* Ch.X */) ||\n            (next == 120 /* Ch.x */ || next == 88 /* Ch.X */) && input.next == 39 /* Ch.SingleQuote */) {\n            let quoted = input.next == 39 /* Ch.SingleQuote */;\n            input.advance();\n            while (isHexDigit(input.next))\n                input.advance();\n            if (quoted && input.next == 39 /* Ch.SingleQuote */)\n                input.advance();\n            input.acceptToken(Number);\n        }\n        else if (next == 46 /* Ch.Dot */ && input.next >= 48 /* Ch._0 */ && input.next <= 57 /* Ch._9 */) {\n            readNumber(input, true);\n            input.acceptToken(Number);\n        }\n        else if (next == 46 /* Ch.Dot */) {\n            input.acceptToken(Dot);\n        }\n        else if (next >= 48 /* Ch._0 */ && next <= 57 /* Ch._9 */) {\n            readNumber(input, false);\n            input.acceptToken(Number);\n        }\n        else if (inString(next, d.operatorChars)) {\n            while (inString(input.next, d.operatorChars))\n                input.advance();\n            input.acceptToken(Operator);\n        }\n        else if (inString(next, d.specialVar)) {\n            if (input.next == next)\n                input.advance();\n            readWordOrQuoted(input);\n            input.acceptToken(SpecialVar);\n        }\n        else if (inString(next, d.identifierQuotes)) {\n            readLiteral(input, next, false);\n            input.acceptToken(QuotedIdentifier);\n        }\n        else if (next == 58 /* Ch.Colon */ || next == 44 /* Ch.Comma */) {\n            input.acceptToken(Punctuation);\n        }\n        else if (isAlpha(next)) {\n            let word = readWord(input, String.fromCharCode(next));\n            input.acceptToken(input.next == 46 /* Ch.Dot */ || input.peek(-word.length - 1) == 46 /* Ch.Dot */\n                ? Identifier : (_a = d.words[word.toLowerCase()]) !== null && _a !== void 0 ? _a : Identifier);\n        }\n    });\n}\nconst tokens = /*@__PURE__*/tokensFor(defaults);\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst parser$1 = /*@__PURE__*/LRParser.deserialize({\n  version: 14,\n  states: \"%vQ]QQOOO#wQRO'#DSO$OQQO'#CwO%eQQO'#CxO%lQQO'#CyO%sQQO'#CzOOQQ'#DS'#DSOOQQ'#C}'#C}O'UQRO'#C{OOQQ'#Cv'#CvOOQQ'#C|'#C|Q]QQOOQOQQOOO'`QQO'#DOO(xQRO,59cO)PQQO,59cO)UQQO'#DSOOQQ,59d,59dO)cQQO,59dOOQQ,59e,59eO)jQQO,59eOOQQ,59f,59fO)qQQO,59fOOQQ-E6{-E6{OOQQ,59b,59bOOQQ-E6z-E6zOOQQ,59j,59jOOQQ-E6|-E6|O+VQRO1G.}O+^QQO,59cOOQQ1G/O1G/OOOQQ1G/P1G/POOQQ1G/Q1G/QP+kQQO'#C}O+rQQO1G.}O)PQQO,59cO,PQQO'#Cw\",\n  stateData: \",[~OtOSPOSQOS~ORUOSUOTUOUUOVROXSOZTO]XO^QO_UO`UOaPObPOcPOdUOeUOfUOgUOhUO~O^]ORvXSvXTvXUvXVvXXvXZvX]vX_vX`vXavXbvXcvXdvXevXfvXgvXhvX~OsvX~P!jOa_Ob_Oc_O~ORUOSUOTUOUUOVROXSOZTO^tO_UO`UOa`Ob`Oc`OdUOeUOfUOgUOhUO~OWaO~P$ZOYcO~P$ZO[eO~P$ZORUOSUOTUOUUOVROXSOZTO^QO_UO`UOaPObPOcPOdUOeUOfUOgUOhUO~O]hOsoX~P%zOajObjOcjO~O^]ORkaSkaTkaUkaVkaXkaZka]ka_ka`kaakabkackadkaekafkagkahka~Oska~P'kO^]O~OWvXYvX[vX~P!jOWnO~P$ZOYoO~P$ZO[pO~P$ZO^]ORkiSkiTkiUkiVkiXkiZki]ki_ki`kiakibkickidkiekifkigkihki~Oski~P)xOWkaYka[ka~P'kO]hO~P$ZOWkiYki[ki~P)xOasObsOcsO~O\",\n  goto: \"#hwPPPPPPPPPPPPPPPPPPPPPPPPPPx||||!Y!^!d!xPPP#[TYOZeUORSTWZbdfqT[OZQZORiZSWOZQbRQdSQfTZgWbdfqQ^PWk^lmrQl_Qm`RrseVORSTWZbdfq\",\n  nodeNames: \"⚠ LineComment BlockComment String Number Bool Null ( ) { } [ ] ; . Operator Punctuation SpecialVar Identifier QuotedIdentifier Keyword Type Bits Bytes Builtin Script Statement CompositeIdentifier Parens Braces Brackets Statement\",\n  maxTerm: 38,\n  nodeProps: [\n    [\"isolate\", -4,1,2,3,19,\"\"]\n  ],\n  skippedNodes: [0,1,2],\n  repeatNodeCount: 3,\n  tokenData: \"RORO\",\n  tokenizers: [0, tokens],\n  topRules: {\"Script\":[0,25]},\n  tokenPrec: 0\n});\n\nfunction tokenBefore(tree) {\n    let cursor = tree.cursor().moveTo(tree.from, -1);\n    while (/Comment/.test(cursor.name))\n        cursor.moveTo(cursor.from, -1);\n    return cursor.node;\n}\nfunction idName(doc, node) {\n    let text = doc.sliceString(node.from, node.to);\n    let quoted = /^([`'\"])(.*)\\1$/.exec(text);\n    return quoted ? quoted[2] : text;\n}\nfunction plainID(node) {\n    return node && (node.name == \"Identifier\" || node.name == \"QuotedIdentifier\");\n}\nfunction pathFor(doc, id) {\n    if (id.name == \"CompositeIdentifier\") {\n        let path = [];\n        for (let ch = id.firstChild; ch; ch = ch.nextSibling)\n            if (plainID(ch))\n                path.push(idName(doc, ch));\n        return path;\n    }\n    return [idName(doc, id)];\n}\nfunction parentsFor(doc, node) {\n    for (let path = [];;) {\n        if (!node || node.name != \".\")\n            return path;\n        let name = tokenBefore(node);\n        if (!plainID(name))\n            return path;\n        path.unshift(idName(doc, name));\n        node = tokenBefore(name);\n    }\n}\nfunction sourceContext(state, startPos) {\n    let pos = syntaxTree(state).resolveInner(startPos, -1);\n    let aliases = getAliases(state.doc, pos);\n    if (pos.name == \"Identifier\" || pos.name == \"QuotedIdentifier\" || pos.name == \"Keyword\") {\n        return { from: pos.from,\n            quoted: pos.name == \"QuotedIdentifier\" ? state.doc.sliceString(pos.from, pos.from + 1) : null,\n            parents: parentsFor(state.doc, tokenBefore(pos)),\n            aliases };\n    }\n    if (pos.name == \".\") {\n        return { from: startPos, quoted: null, parents: parentsFor(state.doc, pos), aliases };\n    }\n    else {\n        return { from: startPos, quoted: null, parents: [], empty: true, aliases };\n    }\n}\nconst EndFrom = /*@__PURE__*/new Set(/*@__PURE__*/\"where group having order union intersect except all distinct limit offset fetch for\".split(\" \"));\nfunction getAliases(doc, at) {\n    let statement;\n    for (let parent = at; !statement; parent = parent.parent) {\n        if (!parent)\n            return null;\n        if (parent.name == \"Statement\")\n            statement = parent;\n    }\n    let aliases = null;\n    for (let scan = statement.firstChild, sawFrom = false, prevID = null; scan; scan = scan.nextSibling) {\n        let kw = scan.name == \"Keyword\" ? doc.sliceString(scan.from, scan.to).toLowerCase() : null;\n        let alias = null;\n        if (!sawFrom) {\n            sawFrom = kw == \"from\";\n        }\n        else if (kw == \"as\" && prevID && plainID(scan.nextSibling)) {\n            alias = idName(doc, scan.nextSibling);\n        }\n        else if (kw && EndFrom.has(kw)) {\n            break;\n        }\n        else if (prevID && plainID(scan)) {\n            alias = idName(doc, scan);\n        }\n        if (alias) {\n            if (!aliases)\n                aliases = Object.create(null);\n            aliases[alias] = pathFor(doc, prevID);\n        }\n        prevID = /Identifier$/.test(scan.name) ? scan : null;\n    }\n    return aliases;\n}\nfunction maybeQuoteCompletions(quote, completions) {\n    if (!quote)\n        return completions;\n    return completions.map(c => ({ ...c, label: c.label[0] == quote ? c.label : quote + c.label + quote, apply: undefined }));\n}\nconst Span = /^\\w*$/, QuotedSpan = /^[`'\"]?\\w*[`'\"]?$/;\nfunction isSelfTag(namespace) {\n    return namespace.self && typeof namespace.self.label == \"string\";\n}\nclass CompletionLevel {\n    constructor(idQuote, idCaseInsensitive) {\n        this.idQuote = idQuote;\n        this.idCaseInsensitive = idCaseInsensitive;\n        this.list = [];\n        this.children = undefined;\n    }\n    child(name) {\n        let children = this.children || (this.children = Object.create(null));\n        let found = children[name];\n        if (found)\n            return found;\n        if (name && !this.list.some(c => c.label == name))\n            this.list.push(nameCompletion(name, \"type\", this.idQuote, this.idCaseInsensitive));\n        return (children[name] = new CompletionLevel(this.idQuote, this.idCaseInsensitive));\n    }\n    maybeChild(name) {\n        return this.children ? this.children[name] : null;\n    }\n    addCompletion(option) {\n        let found = this.list.findIndex(o => o.label == option.label);\n        if (found > -1)\n            this.list[found] = option;\n        else\n            this.list.push(option);\n    }\n    addCompletions(completions) {\n        for (let option of completions)\n            this.addCompletion(typeof option == \"string\" ? nameCompletion(option, \"property\", this.idQuote, this.idCaseInsensitive) : option);\n    }\n    addNamespace(namespace) {\n        if (Array.isArray(namespace)) {\n            this.addCompletions(namespace);\n        }\n        else if (isSelfTag(namespace)) {\n            this.addNamespace(namespace.children);\n        }\n        else {\n            this.addNamespaceObject(namespace);\n        }\n    }\n    addNamespaceObject(namespace) {\n        for (let name of Object.keys(namespace)) {\n            let children = namespace[name], self = null;\n            let parts = name.replace(/\\\\?\\./g, p => p == \".\" ? \"\\0\" : p).split(\"\\0\");\n            let scope = this;\n            if (isSelfTag(children)) {\n                self = children.self;\n                children = children.children;\n            }\n            for (let i = 0; i < parts.length; i++) {\n                if (self && i == parts.length - 1)\n                    scope.addCompletion(self);\n                scope = scope.child(parts[i].replace(/\\\\\\./g, \".\"));\n            }\n            scope.addNamespace(children);\n        }\n    }\n}\nfunction nameCompletion(label, type, idQuote, idCaseInsensitive) {\n    if ((new RegExp(\"^[a-z_][a-z_\\\\d]*$\", idCaseInsensitive ? \"i\" : \"\")).test(label))\n        return { label, type };\n    return { label, type, apply: idQuote + label + idQuote };\n}\n// Some of this is more gnarly than it has to be because we're also\n// supporting the deprecated, not-so-well-considered style of\n// supplying the schema (dotted property names for schemas, separate\n// `tables` and `schemas` completions).\nfunction completeFromSchema(schema, tables, schemas, defaultTableName, defaultSchemaName, dialect) {\n    var _a;\n    let idQuote = ((_a = dialect === null || dialect === void 0 ? void 0 : dialect.spec.identifierQuotes) === null || _a === void 0 ? void 0 : _a[0]) || '\"';\n    let top = new CompletionLevel(idQuote, !!(dialect === null || dialect === void 0 ? void 0 : dialect.spec.caseInsensitiveIdentifiers));\n    let defaultSchema = defaultSchemaName ? top.child(defaultSchemaName) : null;\n    top.addNamespace(schema);\n    if (tables)\n        (defaultSchema || top).addCompletions(tables);\n    if (schemas)\n        top.addCompletions(schemas);\n    if (defaultSchema)\n        top.addCompletions(defaultSchema.list);\n    if (defaultTableName)\n        top.addCompletions((defaultSchema || top).child(defaultTableName).list);\n    return (context) => {\n        let { parents, from, quoted, empty, aliases } = sourceContext(context.state, context.pos);\n        if (empty && !context.explicit)\n            return null;\n        if (aliases && parents.length == 1)\n            parents = aliases[parents[0]] || parents;\n        let level = top;\n        for (let name of parents) {\n            while (!level.children || !level.children[name]) {\n                if (level == top && defaultSchema)\n                    level = defaultSchema;\n                else if (level == defaultSchema && defaultTableName)\n                    level = level.child(defaultTableName);\n                else\n                    return null;\n            }\n            let next = level.maybeChild(name);\n            if (!next)\n                return null;\n            level = next;\n        }\n        let quoteAfter = quoted && context.state.sliceDoc(context.pos, context.pos + 1) == quoted;\n        let options = level.list;\n        if (level == top && aliases)\n            options = options.concat(Object.keys(aliases).map(name => ({ label: name, type: \"constant\" })));\n        return {\n            from,\n            to: quoteAfter ? context.pos + 1 : undefined,\n            options: maybeQuoteCompletions(quoted, options),\n            validFor: quoted ? QuotedSpan : Span\n        };\n    };\n}\nfunction completionType(tokenType) {\n    return tokenType == Type ? \"type\" : tokenType == Keyword ? \"keyword\" : \"variable\";\n}\nfunction completeKeywords(keywords, upperCase, build) {\n    let completions = Object.keys(keywords)\n        .map(keyword => build(upperCase ? keyword.toUpperCase() : keyword, completionType(keywords[keyword])));\n    return ifNotIn([\"QuotedIdentifier\", \"String\", \"LineComment\", \"BlockComment\", \".\"], completeFromList(completions));\n}\n\nlet parser = /*@__PURE__*/parser$1.configure({\n    props: [\n        /*@__PURE__*/indentNodeProp.add({\n            Statement: /*@__PURE__*/continuedIndent()\n        }),\n        /*@__PURE__*/foldNodeProp.add({\n            Statement(tree, state) { return { from: Math.min(tree.from + 100, state.doc.lineAt(tree.from).to), to: tree.to }; },\n            BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }\n        }),\n        /*@__PURE__*/styleTags({\n            Keyword: tags.keyword,\n            Type: tags.typeName,\n            Builtin: /*@__PURE__*/tags.standard(tags.name),\n            Bits: tags.number,\n            Bytes: tags.string,\n            Bool: tags.bool,\n            Null: tags.null,\n            Number: tags.number,\n            String: tags.string,\n            Identifier: tags.name,\n            QuotedIdentifier: /*@__PURE__*/tags.special(tags.string),\n            SpecialVar: /*@__PURE__*/tags.special(tags.name),\n            LineComment: tags.lineComment,\n            BlockComment: tags.blockComment,\n            Operator: tags.operator,\n            \"Semi Punctuation\": tags.punctuation,\n            \"( )\": tags.paren,\n            \"{ }\": tags.brace,\n            \"[ ]\": tags.squareBracket\n        })\n    ]\n});\n/**\nRepresents an SQL dialect.\n*/\nclass SQLDialect {\n    constructor(\n    /**\n    @internal\n    */\n    dialect, \n    /**\n    The language for this dialect.\n    */\n    language, \n    /**\n    The spec used to define this dialect.\n    */\n    spec) {\n        this.dialect = dialect;\n        this.language = language;\n        this.spec = spec;\n    }\n    /**\n    Returns the language for this dialect as an extension.\n    */\n    get extension() { return this.language.extension; }\n    /**\n    Reconfigure the parser used by this dialect. Returns a new\n    dialect object.\n    */\n    configureLanguage(options, name) {\n        return new SQLDialect(this.dialect, this.language.configure(options, name), this.spec);\n    }\n    /**\n    Define a new dialect.\n    */\n    static define(spec) {\n        let d = dialect(spec, spec.keywords, spec.types, spec.builtin);\n        let language = LRLanguage.define({\n            name: \"sql\",\n            parser: parser.configure({\n                tokenizers: [{ from: tokens, to: tokensFor(d) }]\n            }),\n            languageData: {\n                commentTokens: { line: \"--\", block: { open: \"/*\", close: \"*/\" } },\n                closeBrackets: { brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"`\"] }\n            }\n        });\n        return new SQLDialect(d, language, spec);\n    }\n}\nfunction defaultKeyword(label, type) { return { label, type, boost: -1 }; }\n/**\nReturns a completion source that provides keyword completion for\nthe given SQL dialect.\n*/\nfunction keywordCompletionSource(dialect, upperCase = false, build) {\n    return completeKeywords(dialect.dialect.words, upperCase, build || defaultKeyword);\n}\n/**\nReturns a completion sources that provides schema-based completion\nfor the given configuration.\n*/\nfunction schemaCompletionSource(config) {\n    return config.schema ? completeFromSchema(config.schema, config.tables, config.schemas, config.defaultTable, config.defaultSchema, config.dialect || StandardSQL)\n        : () => null;\n}\nfunction schemaCompletion(config) {\n    return config.schema ? (config.dialect || StandardSQL).language.data.of({\n        autocomplete: schemaCompletionSource(config)\n    }) : [];\n}\n/**\nSQL language support for the given SQL dialect, with keyword\ncompletion, and, if provided, schema-based completion as extra\nextensions.\n*/\nfunction sql(config = {}) {\n    let lang = config.dialect || StandardSQL;\n    return new LanguageSupport(lang.language, [\n        schemaCompletion(config),\n        lang.language.data.of({\n            autocomplete: keywordCompletionSource(lang, config.upperCaseKeywords, config.keywordCompletion)\n        })\n    ]);\n}\n/**\nThe standard SQL dialect.\n*/\nconst StandardSQL = /*@__PURE__*/SQLDialect.define({});\n/**\nDialect for [PostgreSQL](https://www.postgresql.org).\n*/\nconst PostgreSQL = /*@__PURE__*/SQLDialect.define({\n    charSetCasts: true,\n    doubleDollarQuotedStrings: true,\n    operatorChars: \"+-*/<>=~!@#%^&|`?\",\n    specialVar: \"\",\n    keywords: SQLKeywords + \"abort abs absent access according ada admin aggregate alias also always analyse analyze array_agg array_max_cardinality asensitive assert assignment asymmetric atomic attach attribute attributes avg backward base64 begin_frame begin_partition bernoulli bit_length blocked bom cache called cardinality catalog_name ceil ceiling chain char_length character_length character_set_catalog character_set_name character_set_schema characteristics characters checkpoint class class_origin cluster coalesce cobol collation_catalog collation_name collation_schema collect column_name columns command_function command_function_code comment comments committed concurrently condition_number configuration conflict connection_name constant constraint_catalog constraint_name constraint_schema contains content control conversion convert copy corr cost covar_pop covar_samp csv cume_dist current_catalog current_row current_schema cursor_name database datalink datatype datetime_interval_code datetime_interval_precision db debug defaults defined definer degree delimiter delimiters dense_rank depends derived detach detail dictionary disable discard dispatch dlnewcopy dlpreviouscopy dlurlcomplete dlurlcompleteonly dlurlcompletewrite dlurlpath dlurlpathonly dlurlpathwrite dlurlscheme dlurlserver dlvalue document dump dynamic_function dynamic_function_code element elsif empty enable encoding encrypted end_frame end_partition endexec enforced enum errcode error event every exclude excluding exclusive exp explain expression extension extract family file filter final first_value flag floor following force foreach fortran forward frame_row freeze fs functions fusion generated granted greatest groups handler header hex hierarchy hint id ignore ilike immediately immutable implementation implicit import include including increment indent index indexes info inherit inherits inline insensitive instance instantiable instead integrity intersection invoker isnull key_member key_type label lag last_value lead leakproof least length library like_regex link listen ln load location lock locked log logged lower mapping matched materialized max max_cardinality maxvalue member merge message message_length message_octet_length message_text min minvalue mod mode more move multiset mumps name namespace nfc nfd nfkc nfkd nil normalize normalized nothing notice notify notnull nowait nth_value ntile nullable nullif nulls number occurrences_regex octet_length octets off offset oids operator options ordering others over overlay overriding owned owner parallel parameter_mode parameter_name parameter_ordinal_position parameter_specific_catalog parameter_specific_name parameter_specific_schema parser partition pascal passing passthrough password percent percent_rank percentile_cont percentile_disc perform period permission pg_context pg_datatype_name pg_exception_context pg_exception_detail pg_exception_hint placing plans pli policy portion position position_regex power precedes preceding prepared print_strict_params procedural procedures program publication query quote raise range rank reassign recheck recovery refresh regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy regr_syy reindex rename repeatable replace replica requiring reset respect restart restore result_oid returned_cardinality returned_length returned_octet_length returned_sqlstate returning reverse routine_catalog routine_name routine_schema routines row_count row_number rowtype rule scale schema_name schemas scope scope_catalog scope_name scope_schema security selective self sensitive sequence sequences serializable server server_name setof share show simple skip slice snapshot source specific_name sqlcode sqlerror sqrt stable stacked standalone statement statistics stddev_pop stddev_samp stdin stdout storage strict strip structure style subclass_origin submultiset subscription substring substring_regex succeeds sum symmetric sysid system system_time table_name tables tablesample tablespace temp template ties token top_level_count transaction_active transactions_committed transactions_rolled_back transform transforms translate translate_regex trigger_catalog trigger_name trigger_schema trim trim_array truncate trusted type types uescape unbounded uncommitted unencrypted unlink unlisten unlogged unnamed untyped upper uri use_column use_variable user_defined_type_catalog user_defined_type_code user_defined_type_name user_defined_type_schema vacuum valid validate validator value_of var_pop var_samp varbinary variable_conflict variadic verbose version versioning views volatile warning whitespace width_bucket window within wrapper xmlagg xmlattributes xmlbinary xmlcast xmlcomment xmlconcat xmldeclaration xmldocument xmlelement xmlexists xmlforest xmliterate xmlnamespaces xmlparse xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltext xmlvalidate yes\",\n    types: SQLTypes + \"bigint int8 bigserial serial8 varbit bool box bytea cidr circle precision float8 inet int4 json jsonb line lseg macaddr macaddr8 money numeric pg_lsn point polygon float4 int2 smallserial serial2 serial serial4 text timetz timestamptz tsquery tsvector txid_snapshot uuid xml\"\n});\nconst MySQLKeywords = \"accessible algorithm analyze asensitive authors auto_increment autocommit avg avg_row_length binlog btree cache catalog_name chain change changed checkpoint checksum class_origin client_statistics coalesce code collations columns comment committed completion concurrent consistent contains contributors convert database databases day_hour day_microsecond day_minute day_second delay_key_write delayed delimiter des_key_file dev_pop dev_samp deviance directory disable discard distinctrow div dual dumpfile enable enclosed ends engine engines enum errors escaped even event events every explain extended fast field fields flush force found_rows fulltext grants handler hash high_priority hosts hour_microsecond hour_minute hour_second ignore ignore_server_ids import index index_statistics infile innodb insensitive insert_method install invoker iterate keys kill linear lines list load lock logs low_priority master master_heartbeat_period master_ssl_verify_server_cert masters max max_rows maxvalue message_text middleint migrate min min_rows minute_microsecond minute_second mod mode modify mutex mysql_errno no_write_to_binlog offline offset one online optimize optionally outfile pack_keys parser partition partitions password phase plugin plugins prev processlist profile profiles purge query quick range read_write rebuild recover regexp relaylog remove rename reorganize repair repeatable replace require resume rlike row_format rtree schedule schema_name schemas second_microsecond security sensitive separator serializable server share show slave slow snapshot soname spatial sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_no_cache sql_small_result ssl starting starts std stddev stddev_pop stddev_samp storage straight_join subclass_origin sum suspend table_name table_statistics tables tablespace terminated triggers truncate uncommitted uninstall unlock upgrade use use_frm user_resources user_statistics utc_date utc_time utc_timestamp variables views warnings xa xor year_month zerofill\";\nconst MySQLTypes = SQLTypes + \"bool blob long longblob longtext medium mediumblob mediumint mediumtext tinyblob tinyint tinytext text bigint int1 int2 int3 int4 int8 float4 float8 varbinary varcharacter precision datetime unsigned signed\";\nconst MySQLBuiltin = \"charset clear edit ego help nopager notee nowarning pager print prompt quit rehash source status system tee\";\n/**\n[MySQL](https://dev.mysql.com/) dialect.\n*/\nconst MySQL = /*@__PURE__*/SQLDialect.define({\n    operatorChars: \"*+-%<>!=&|^\",\n    charSetCasts: true,\n    doubleQuotedStrings: true,\n    unquotedBitLiterals: true,\n    hashComments: true,\n    spaceAfterDashes: true,\n    specialVar: \"@?\",\n    identifierQuotes: \"`\",\n    keywords: SQLKeywords + \"group_concat \" + MySQLKeywords,\n    types: MySQLTypes,\n    builtin: MySQLBuiltin\n});\n/**\nVariant of [`MySQL`](https://codemirror.net/6/docs/ref/#lang-sql.MySQL) for\n[MariaDB](https://mariadb.org/).\n*/\nconst MariaSQL = /*@__PURE__*/SQLDialect.define({\n    operatorChars: \"*+-%<>!=&|^\",\n    charSetCasts: true,\n    doubleQuotedStrings: true,\n    unquotedBitLiterals: true,\n    hashComments: true,\n    spaceAfterDashes: true,\n    specialVar: \"@?\",\n    identifierQuotes: \"`\",\n    keywords: SQLKeywords + \"always generated groupby_concat hard persistent shutdown soft virtual \" + MySQLKeywords,\n    types: MySQLTypes,\n    builtin: MySQLBuiltin\n});\nlet MSSQLBuiltin = \n// Aggregate https://msdn.microsoft.com/en-us/library/ms173454.aspx\n\"approx_count_distinct approx_percentile_cont approx_percentile_disc avg checksum_agg count count_big grouping grouping_id max min product stdev stdevp sum var varp \" +\n    // AI https://learn.microsoft.com/en-us/sql/t-sql/functions/ai-functions-transact-sql?view=sql-server-ver17\n    \"ai_generate_embeddings ai_generate_chunks \" +\n    // Analytic https://learn.microsoft.com/en-us/sql/t-sql/functions/analytic-functions-transact-sql?view=sql-server-ver17\n    \"cume_dist first_value lag last_value lead percentile_cont percentile_disc percent_rank \" +\n    // Bit Manipulation https://learn.microsoft.com/en-us/sql/t-sql/functions/bit-manipulation-functions-overview?view=sql-server-ver17\n    \"left_shift right_shift bit_count get_bit set_bit \" +\n    // Collation Functions https://learn.microsoft.com/en-us/sql/t-sql/functions/collation-functions-collationproperty-transact-sql?view=sql-server-ver17\n    \"collationproperty tertiary_weights \" +\n    // Configuration https://learn.microsoft.com/en-us/sql/t-sql/functions/configuration-functions-transact-sql?view=sql-server-ver17\n    \"@@datefirst @@dbts @@langid @@language @@lock_timeout @@max_connections @@max_precision @@nestlevel @@options @@remserver @@servername @@servicename @@spid @@textsize @@version \" +\n    // Conversion https://learn.microsoft.com/en-us/sql/t-sql/functions/conversion-functions-transact-sql?view=sql-server-ver17\n    \"cast convert parse try_cast try_convert try_parse \" +\n    // Cryptographic https://learn.microsoft.com/en-us/sql/t-sql/functions/cryptographic-functions-transact-sql?view=sql-server-ver17\n    \"asymkey_id asymkeyproperty certproperty cert_id crypt_gen_random decryptbyasymkey decryptbycert decryptbykey decryptbykeyautoasymkey decryptbykeyautocert decryptbypassphrase encryptbyasymkey encryptbycert encryptbykey encryptbypassphrase hashbytes is_objectsigned key_guid key_id key_name signbyasymkey signbycert symkeyproperty verifysignedbycert verifysignedbyasymkey \" +\n    // Cursor https://learn.microsoft.com/en-us/sql/t-sql/functions/cursor-functions-transact-sql?view=sql-server-ver17\n    \"@@cursor_rows @@fetch_status cursor_status \" +\n    // Data type https://learn.microsoft.com/en-us/sql/t-sql/functions/data-type-functions-transact-sql?view=sql-server-ver17\n    \"datalength ident_current ident_incr ident_seed identity sql_variant_property \" +\n    // Date & time https://learn.microsoft.com/en-us/sql/t-sql/functions/date-and-time-data-types-and-functions-transact-sql?view=sql-server-ver17\n    \"@@datefirst current_timestamp current_timezone current_timezone_id date_bucket dateadd datediff datediff_big datefromparts datename datepart datetime2fromparts datetimefromparts datetimeoffsetfromparts datetrunc day eomonth getdate getutcdate isdate month smalldatetimefromparts switchoffset sysdatetime sysdatetimeoffset sysutcdatetime timefromparts todatetimeoffset year \" +\n    // Fuzzy string match https://learn.microsoft.com/en-us/sql/t-sql/functions/edit-distance-transact-sql?view=sql-server-ver17\n    \"edit_distance edit_distance_similarity jaro_winkler_distance jaro_winkler_similarity \" +\n    // Graph https://learn.microsoft.com/en-us/sql/t-sql/functions/graph-functions-transact-sql?view=sql-server-ver17\n    \"edge_id_from_parts graph_id_from_edge_id graph_id_from_node_id node_id_from_parts object_id_from_edge_id object_id_from_node_id \" +\n    // JSON https://learn.microsoft.com/en-us/sql/t-sql/functions/json-functions-transact-sql?view=sql-server-ver17\n    \"json isjson json_array json_contains json_modify json_object json_path_exists json_query json_value \" +\n    // Regular Expressions https://learn.microsoft.com/en-us/sql/t-sql/functions/regular-expressions-functions-transact-sql?view=sql-server-ver17\n    \"regexp_like regexp_replace regexp_substr regexp_instr regexp_count regexp_matches regexp_split_to_table \" +\n    // Mathematical https://learn.microsoft.com/en-us/sql/t-sql/functions/mathematical-functions-transact-sql?view=sql-server-ver17\n    \"abs acos asin atan atn2 ceiling cos cot degrees exp floor log log10 pi power radians rand round sign sin sqrt square tan \" +\n    // Logical https://learn.microsoft.com/en-us/sql/t-sql/functions/logical-functions-choose-transact-sql?view=sql-server-ver17\n    \"choose greatest iif least \" +\n    // Metadata https://learn.microsoft.com/en-us/sql/t-sql/functions/metadata-functions-transact-sql?view=sql-server-ver17\n    \"@@procid app_name applock_mode applock_test assemblyproperty col_length col_name columnproperty databasepropertyex db_id db_name file_id file_idex file_name filegroup_id filegroup_name filegroupproperty fileproperty filepropertyex fulltextcatalogproperty fulltextserviceproperty index_col indexkey_property indexproperty next value for object_definition object_id object_name object_schema_name objectproperty objectpropertyex original_db_name parsename schema_id schema_name scope_identity serverproperty stats_date type_id type_name typeproperty \" +\n    // Ranking https://learn.microsoft.com/en-us/sql/t-sql/functions/ranking-functions-transact-sql?view=sql-server-ver17\n    \"dense_rank ntile rank row_number \" +\n    // Replication https://learn.microsoft.com/en-us/sql/t-sql/functions/replication-functions-publishingservername?view=sql-server-ver17\n    \"publishingservername \" +\n    // Security https://learn.microsoft.com/en-us/sql/t-sql/functions/security-functions-transact-sql?view=sql-server-ver17\n    \"certenclosed certprivatekey current_user database_principal_id has_dbaccess has_perms_by_name is_member is_rolemember is_srvrolemember loginproperty original_login permissions pwdencrypt pwdcompare session_user sessionproperty suser_id suser_name suser_sid suser_sname system_user user user_id user_name \" +\n    // String https://learn.microsoft.com/en-us/sql/t-sql/functions/string-functions-transact-sql?view=sql-server-ver17\n    \"ascii char charindex concat concat_ws difference format left len lower ltrim nchar patindex quotename replace replicate reverse right rtrim soundex space str string_agg string_escape stuff substring translate trim unicode upper \" +\n    // System https://learn.microsoft.com/en-us/sql/t-sql/functions/system-functions-transact-sql?view=sql-server-ver17\n    \"$partition @@error @@identity @@pack_received @@rowcount @@trancount binary_checksum checksum compress connectionproperty context_info current_request_id current_transaction_id decompress error_line error_message error_number error_procedure error_severity error_state formatmessage get_filestream_transaction_context getansinull host_id host_name isnull isnumeric min_active_rowversion newid newsequentialid rowcount_big session_context xact_state \" +\n    // System Statistical https://learn.microsoft.com/en-us/sql/t-sql/functions/system-statistical-functions-transact-sql?view=sql-server-ver17\n    \"@@connections @@cpu_busy @@idle @@io_busy @@pack_sent @@packet_errors @@timeticks @@total_errors @@total_read @@total_write \" +\n    // Text & Image https://learn.microsoft.com/en-us/sql/t-sql/functions/text-and-image-functions-textptr-transact-sql?view=sql-server-ver17\n    \"textptr textvalid \" +\n    // Trigger https://learn.microsoft.com/en-us/sql/t-sql/functions/trigger-functions-transact-sql?view=sql-server-ver17\n    \"columns_updated eventdata trigger_nestlevel \" +\n    // Vectors https://learn.microsoft.com/en-us/sql/t-sql/functions/vector-functions-transact-sql?view=sql-server-ver17\n    \"vector_distance vectorproperty vector_search \" +\n    // Relational operators https://msdn.microsoft.com/en-us/library/ms187957.aspx\n    \"generate_series opendatasource openjson openquery openrowset openxml predict string_split \" +\n    // Other\n    \"coalesce nullif apply catch filter force include keep keepfixed modify optimize parameterization parameters partition recompile sequence set\";\n/**\nSQL dialect for Microsoft [SQL\nServer](https://www.microsoft.com/en-us/sql-server).\n*/\nconst MSSQL = /*@__PURE__*/SQLDialect.define({\n    keywords: SQLKeywords +\n        // Reserved Keywords https://learn.microsoft.com/en-us/sql/t-sql/language-elements/reserved-keywords-transact-sql?view=sql-server-ver17\n        \"add external procedure all fetch public alter file raiserror and fillfactor read any for readtext as foreign reconfigure asc freetext references authorization freetexttable replication backup from restore begin full restrict between function return break goto revert browse grant revoke bulk group right by having rollback cascade holdlock rowcount case identity rowguidcol check identity_insert rule checkpoint identitycol save close if schema clustered in securityaudit coalesce index select collate inner semantickeyphrasetable column insert semanticsimilaritydetailstable commit intersect semanticsimilaritytable compute into session_user constraint is set contains join setuser containstable key shutdown continue kill some convert left statistics create like system_user cross lineno table current load tablesample current_date merge textsize current_time national then current_timestamp nocheck to current_user nonclustered top cursor not tran database null transaction dbcc nullif trigger deallocate of truncate declare off try_convert default offsets tsequal delete on union deny open unique desc opendatasource unpivot disk openquery update distinct openrowset updatetext distributed openxml use double option user drop or values dump order varying else outer view end over waitfor errlvl percent when escape pivot where except plan while exec precision with execute primary within group exists print writetext exit proc \" +\n        // table hints https://learn.microsoft.com/en-us/sql/t-sql/queries/hints-transact-sql-table?view=sql-server-ver17\n        \"noexpand index forceseek forcescan holdlock nolock nowait paglock readcommitted readcommittedlock readpast readuncommitted repeatableread rowlock serializable snapshot spatial_window_max_cells tablock tablockx updlock xlock keepidentity keepdefaults ignore_constraints ignore_triggers\",\n    types: SQLTypes + \"smalldatetime datetimeoffset datetime2 datetime bigint smallint smallmoney tinyint money real text nvarchar ntext varbinary image hierarchyid uniqueidentifier sql_variant xml\",\n    builtin: MSSQLBuiltin,\n    operatorChars: \"*+-%<>!=^&|/\",\n    specialVar: \"@\"\n});\n/**\n[SQLite](https://sqlite.org/) dialect.\n*/\nconst SQLite = /*@__PURE__*/SQLDialect.define({\n    keywords: SQLKeywords + \"abort analyze attach autoincrement conflict database detach exclusive fail glob ignore index indexed instead isnull notnull offset plan pragma query raise regexp reindex rename replace temp vacuum virtual\",\n    types: SQLTypes + \"bool blob long longblob longtext medium mediumblob mediumint mediumtext tinyblob tinyint tinytext text bigint int2 int8 unsigned signed real\",\n    builtin: \"auth backup bail changes clone databases dbinfo dump echo eqp explain fullschema headers help import imposter indexes iotrace lint load log mode nullvalue once print prompt quit restore save scanstats separator shell show stats system tables testcase timeout timer trace vfsinfo vfslist vfsname width\",\n    operatorChars: \"*+-%<>!=&|/~\",\n    identifierQuotes: \"`\\\"\",\n    specialVar: \"@:?$\"\n});\n/**\nDialect for [Cassandra](https://cassandra.apache.org/)'s SQL-ish query language.\n*/\nconst Cassandra = /*@__PURE__*/SQLDialect.define({\n    keywords: \"add all allow alter and any apply as asc authorize batch begin by clustering columnfamily compact consistency count create custom delete desc distinct drop each_quorum exists filtering from grant if in index insert into key keyspace keyspaces level limit local_one local_quorum modify nan norecursive nosuperuser not of on one order password permission permissions primary quorum rename revoke schema select set storage superuser table three to token truncate ttl two type unlogged update use user users using values where with writetime infinity NaN\",\n    types: SQLTypes + \"ascii bigint blob counter frozen inet list map static text timeuuid tuple uuid varint\",\n    slashComments: true\n});\n/**\n[PL/SQL](https://en.wikipedia.org/wiki/PL/SQL) dialect.\n*/\nconst PLSQL = /*@__PURE__*/SQLDialect.define({\n    keywords: SQLKeywords + \"abort accept access add all alter and any arraylen as asc assert assign at attributes audit authorization avg base_table begin between binary_integer body by case cast char_base check close cluster clusters colauth column comment commit compress connected constant constraint crash create current currval cursor data_base database dba deallocate debugoff debugon declare default definition delay delete desc digits dispose distinct do drop else elseif elsif enable end entry exception exception_init exchange exclusive exists external fast fetch file for force form from function generic goto grant group having identified if immediate in increment index indexes indicator initial initrans insert interface intersect into is key level library like limited local lock log logging loop master maxextents maxtrans member minextents minus mislabel mode modify multiset new next no noaudit nocompress nologging noparallel not nowait number_base of off offline on online only option or order out package parallel partition pctfree pctincrease pctused pls_integer positive positiven pragma primary prior private privileges procedure public raise range raw rebuild record ref references refresh rename replace resource restrict return returning returns reverse revoke rollback row rowid rowlabel rownum rows run savepoint schema segment select separate set share snapshot some space split sql start statement storage subtype successful synonym tabauth table tables tablespace task terminate then to trigger truncate type union unique unlimited unrecoverable unusable update use using validate value values variable view views when whenever where while with work\",\n    builtin: \"appinfo arraysize autocommit autoprint autorecovery autotrace blockterminator break btitle cmdsep colsep compatibility compute concat copycommit copytypecheck define echo editfile embedded feedback flagger flush heading headsep instance linesize lno loboffset logsource longchunksize markup native newpage numformat numwidth pagesize pause pno recsep recsepchar repfooter repheader serveroutput shiftinout show showmode spool sqlblanklines sqlcase sqlcode sqlcontinue sqlnumber sqlpluscompatibility sqlprefix sqlprompt sqlterminator suffix tab term termout timing trimout trimspool ttitle underline verify version wrap\",\n    types: SQLTypes + \"ascii bfile bfilename bigserial bit blob dec long number nvarchar nvarchar2 serial smallint string text uid varchar2 xml\",\n    operatorChars: \"*/+-%<>!=~\",\n    doubleQuotedStrings: true,\n    charSetCasts: true,\n    plsqlQuotingMechanism: true\n});\n\nexport { Cassandra, MSSQL, MariaSQL, MySQL, PLSQL, PostgreSQL, SQLDialect, SQLite, StandardSQL, keywordCompletionSource, schemaCompletionSource, sql };\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","parcelRegister","register","module","exports","$980814c1590cb610$export$cb7041a7779156a7","$980814c1590cb610$export$3b2ae0de3f836403","$980814c1590cb610$export$17bf40d4487b589f","$980814c1590cb610$export$4a7746173d1ef2e1","$980814c1590cb610$export$6e9c87fa17e36c5d","$980814c1590cb610$export$b9f73592be0033d5","$980814c1590cb610$export$89bad9ac1f3785f8","$980814c1590cb610$export$3f21b786f95184f1","$980814c1590cb610$export$6d6505b17ff77046","$980814c1590cb610$export$b5e94ff8bafecf74","$980814c1590cb610$export$7a0261e5cc11a0c5","$980814c1590cb610$export$fd3143eacf0ff224","$eyb1x","$dTUZ7","$cXi2l","$a586V","$980814c1590cb610$var$isAlpha","ch","$980814c1590cb610$var$readLiteral","input","endQuote","backslashEscapes","escaped","next","advance","$980814c1590cb610$var$readWord","result","String","fromCharCode","$980814c1590cb610$var$readBits","$980814c1590cb610$var$readNumber","sawDot","$980814c1590cb610$var$eol","$980814c1590cb610$var$inString","str","i","length","charCodeAt","$980814c1590cb610$var$Space","$980814c1590cb610$var$keywords","keywords","types","builtin","create","kw","split","tp","$980814c1590cb610$var$SQLTypes","$980814c1590cb610$var$SQLKeywords","$980814c1590cb610$var$defaults","hashComments","spaceAfterDashes","slashComments","doubleQuotedStrings","doubleDollarQuotedStrings","unquotedBitLiterals","treatBitsAsBytes","charSetCasts","plsqlQuotingMechanism","operatorChars","specialVar","identifierQuotes","caseInsensitiveIdentifiers","words","$980814c1590cb610$var$tokensFor","d","ExternalTokenizer","acceptToken","tag","$980814c1590cb610$var$readDoubleDollarLiteral","scan","peek","depth","cur","openDelim","$980814c1590cb610$var$readPLSQLQuotedLiteral","matchingDelim","indexOf","closeDelim","quoteStyle","quoted","_a","quote","word","toLowerCase","$980814c1590cb610$var$tokens","$980814c1590cb610$var$parser$1","LRParser","deserialize","version","states","stateData","goto","nodeNames","maxTerm","nodeProps","skippedNodes","repeatNodeCount","tokenData","tokenizers","topRules","tokenPrec","$980814c1590cb610$var$tokenBefore","tree","cursor","moveTo","from","test","name","node","$980814c1590cb610$var$idName","doc","text","sliceString","to","exec","$980814c1590cb610$var$plainID","$980814c1590cb610$var$parentsFor","path","unshift","$980814c1590cb610$var$EndFrom","Set","$980814c1590cb610$var$Span","$980814c1590cb610$var$QuotedSpan","$980814c1590cb610$var$isSelfTag","namespace","self","label","$980814c1590cb610$var$CompletionLevel","idQuote","idCaseInsensitive","list","children","undefined","child","found","some","c","push","$980814c1590cb610$var$nameCompletion","maybeChild","addCompletion","option","findIndex","o","addCompletions","completions","addNamespace","Array","isArray","addNamespaceObject","keys","parts","replace","p","scope","type","RegExp","apply","$980814c1590cb610$var$parser","configure","props","indentNodeProp","add","Statement","continuedIndent","foldNodeProp","state","Math","min","lineAt","BlockComment","styleTags","Keyword","tags","keyword","Type","typeName","Builtin","standard","Bits","number","Bytes","string","Bool","bool","Null","null","Number","Identifier","QuotedIdentifier","special","SpecialVar","LineComment","lineComment","blockComment","Operator","operator","punctuation","paren","brace","squareBracket","dialect","language","spec","extension","configureLanguage","options","define","$980814c1590cb610$var$dialect","kws","prop","hasOwnProperty","LRLanguage","parser","languageData","commentTokens","line","block","open","close","closeBrackets","brackets","$980814c1590cb610$var$defaultKeyword","boost","upperCase","build","map","tokenType","toUpperCase","ifNotIn","completeFromList","config","schema","tables","schemas","defaultTableName","defaultSchemaName","top","defaultSchema","defaultTable","context","startPos","pos","aliases","parents","empty","syntaxTree","resolveInner","$980814c1590cb610$var$getAliases","at","statement","parent","firstChild","sawFrom","prevID","nextSibling","alias","has","$980814c1590cb610$var$pathFor","id","explicit","level","quoteAfter","sliceDoc","concat","validFor","lang","LanguageSupport","data","of","autocomplete","upperCaseKeywords","keywordCompletion","$980814c1590cb610$var$MySQLKeywords","$980814c1590cb610$var$MySQLTypes","$980814c1590cb610$var$MySQLBuiltin"],"version":3,"file":"dist.4498a2df.js.map"}