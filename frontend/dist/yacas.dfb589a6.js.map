{"mappings":"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","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/yacas.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"2jz5F\", function(module, exports) {\n\n$parcel$export(module.exports, \"yacas\", () => $1af89355af9bfb28$export$dccaee8bed4a3d34);\nfunction $1af89355af9bfb28$var$words(str) {\n    var obj = {}, words = str.split(\" \");\n    for(var i = 0; i < words.length; ++i)obj[words[i]] = true;\n    return obj;\n}\nvar $1af89355af9bfb28$var$bodiedOps = $1af89355af9bfb28$var$words(\"Assert BackQuote D Defun Deriv For ForEach FromFile FromString Function Integrate InverseTaylor Limit LocalSymbols Macro MacroRule MacroRulePattern NIntegrate Rule RulePattern Subst TD TExplicitSum TSum Taylor Taylor1 Taylor2 Taylor3 ToFile ToStdout ToString TraceRule Until While\");\n// patterns\nvar $1af89355af9bfb28$var$pFloatForm = \"(?:(?:\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)(?:[eE][+-]?\\\\d+)?)\";\nvar $1af89355af9bfb28$var$pIdentifier = \"(?:[a-zA-Z\\\\$'][a-zA-Z0-9\\\\$']*)\";\n// regular expressions\nvar $1af89355af9bfb28$var$reFloatForm = new RegExp($1af89355af9bfb28$var$pFloatForm);\nvar $1af89355af9bfb28$var$reIdentifier = new RegExp($1af89355af9bfb28$var$pIdentifier);\nvar $1af89355af9bfb28$var$rePattern = new RegExp($1af89355af9bfb28$var$pIdentifier + \"?_\" + $1af89355af9bfb28$var$pIdentifier);\nvar $1af89355af9bfb28$var$reFunctionLike = new RegExp($1af89355af9bfb28$var$pIdentifier + \"\\\\s*\\\\(\");\nfunction $1af89355af9bfb28$var$tokenBase(stream, state) {\n    var ch;\n    // get next character\n    ch = stream.next();\n    // string\n    if (ch === '\"') {\n        state.tokenize = $1af89355af9bfb28$var$tokenString;\n        return state.tokenize(stream, state);\n    }\n    // comment\n    if (ch === '/') {\n        if (stream.eat('*')) {\n            state.tokenize = $1af89355af9bfb28$var$tokenComment;\n            return state.tokenize(stream, state);\n        }\n        if (stream.eat(\"/\")) {\n            stream.skipToEnd();\n            return \"comment\";\n        }\n    }\n    // go back one character\n    stream.backUp(1);\n    // update scope info\n    var m = stream.match(/^(\\w+)\\s*\\(/, false);\n    if (m !== null && $1af89355af9bfb28$var$bodiedOps.hasOwnProperty(m[1])) state.scopes.push('bodied');\n    var scope = $1af89355af9bfb28$var$currentScope(state);\n    if (scope === 'bodied' && ch === '[') state.scopes.pop();\n    if (ch === '[' || ch === '{' || ch === '(') state.scopes.push(ch);\n    scope = $1af89355af9bfb28$var$currentScope(state);\n    if (scope === '[' && ch === ']' || scope === '{' && ch === '}' || scope === '(' && ch === ')') state.scopes.pop();\n    if (ch === ';') while(scope === 'bodied'){\n        state.scopes.pop();\n        scope = $1af89355af9bfb28$var$currentScope(state);\n    }\n    // look for ordered rules\n    if (stream.match(/\\d+ *#/, true, false)) return 'qualifier';\n    // look for numbers\n    if (stream.match($1af89355af9bfb28$var$reFloatForm, true, false)) return 'number';\n    // look for placeholders\n    if (stream.match($1af89355af9bfb28$var$rePattern, true, false)) return 'variableName.special';\n    // match all braces separately\n    if (stream.match(/(?:\\[|\\]|{|}|\\(|\\))/, true, false)) return 'bracket';\n    // literals looking like function calls\n    if (stream.match($1af89355af9bfb28$var$reFunctionLike, true, false)) {\n        stream.backUp(1);\n        return 'variableName.function';\n    }\n    // all other identifiers\n    if (stream.match($1af89355af9bfb28$var$reIdentifier, true, false)) return 'variable';\n    // operators; note that operators like @@ or /; are matched separately for each symbol.\n    if (stream.match(/(?:\\\\|\\+|\\-|\\*|\\/|,|;|\\.|:|@|~|=|>|<|&|\\||_|`|'|\\^|\\?|!|%|#)/, true, false)) return 'operator';\n    // everything else is an error\n    return 'error';\n}\nfunction $1af89355af9bfb28$var$tokenString(stream, state) {\n    var next, end = false, escaped = false;\n    while((next = stream.next()) != null){\n        if (next === '\"' && !escaped) {\n            end = true;\n            break;\n        }\n        escaped = !escaped && next === '\\\\';\n    }\n    if (end && !escaped) state.tokenize = $1af89355af9bfb28$var$tokenBase;\n    return 'string';\n}\nfunction $1af89355af9bfb28$var$tokenComment(stream, state) {\n    var prev, next;\n    while((next = stream.next()) != null){\n        if (prev === '*' && next === '/') {\n            state.tokenize = $1af89355af9bfb28$var$tokenBase;\n            break;\n        }\n        prev = next;\n    }\n    return 'comment';\n}\nfunction $1af89355af9bfb28$var$currentScope(state) {\n    var scope = null;\n    if (state.scopes.length > 0) scope = state.scopes[state.scopes.length - 1];\n    return scope;\n}\nconst $1af89355af9bfb28$export$dccaee8bed4a3d34 = {\n    name: \"yacas\",\n    startState: function() {\n        return {\n            tokenize: $1af89355af9bfb28$var$tokenBase,\n            scopes: []\n        };\n    },\n    token: function(stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n    },\n    indent: function(state, textAfter, cx) {\n        if (state.tokenize !== $1af89355af9bfb28$var$tokenBase && state.tokenize !== null) return null;\n        var delta = 0;\n        if (textAfter === ']' || textAfter === '];' || textAfter === '}' || textAfter === '};' || textAfter === ');') delta = -1;\n        return (state.scopes.length + delta) * cx.unit;\n    },\n    languageData: {\n        electricInput: /[{}\\[\\]()\\;]/,\n        commentTokens: {\n            line: \"//\",\n            block: {\n                open: \"/*\",\n                close: \"*/\"\n            }\n        }\n    }\n};\n\n});\n\n\n//# sourceMappingURL=yacas.dfb589a6.js.map\n","function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nvar bodiedOps = words(\"Assert BackQuote D Defun Deriv For ForEach FromFile \" +\n                      \"FromString Function Integrate InverseTaylor Limit \" +\n                      \"LocalSymbols Macro MacroRule MacroRulePattern \" +\n                      \"NIntegrate Rule RulePattern Subst TD TExplicitSum \" +\n                      \"TSum Taylor Taylor1 Taylor2 Taylor3 ToFile \" +\n                      \"ToStdout ToString TraceRule Until While\");\n\n// patterns\nvar pFloatForm  = \"(?:(?:\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)(?:[eE][+-]?\\\\d+)?)\";\nvar pIdentifier = \"(?:[a-zA-Z\\\\$'][a-zA-Z0-9\\\\$']*)\";\n\n// regular expressions\nvar reFloatForm    = new RegExp(pFloatForm);\nvar reIdentifier   = new RegExp(pIdentifier);\nvar rePattern      = new RegExp(pIdentifier + \"?_\" + pIdentifier);\nvar reFunctionLike = new RegExp(pIdentifier + \"\\\\s*\\\\(\");\n\nfunction tokenBase(stream, state) {\n  var ch;\n\n  // get next character\n  ch = stream.next();\n\n  // string\n  if (ch === '\"') {\n    state.tokenize = tokenString;\n    return state.tokenize(stream, state);\n  }\n\n  // comment\n  if (ch === '/') {\n    if (stream.eat('*')) {\n      state.tokenize = tokenComment;\n      return state.tokenize(stream, state);\n    }\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n\n  // go back one character\n  stream.backUp(1);\n\n  // update scope info\n  var m = stream.match(/^(\\w+)\\s*\\(/, false);\n  if (m !== null && bodiedOps.hasOwnProperty(m[1]))\n    state.scopes.push('bodied');\n\n  var scope = currentScope(state);\n\n  if (scope === 'bodied' && ch === '[')\n    state.scopes.pop();\n\n  if (ch === '[' || ch === '{' || ch === '(')\n    state.scopes.push(ch);\n\n  scope = currentScope(state);\n\n  if (scope === '[' && ch === ']' ||\n      scope === '{' && ch === '}' ||\n      scope === '(' && ch === ')')\n    state.scopes.pop();\n\n  if (ch === ';') {\n    while (scope === 'bodied') {\n      state.scopes.pop();\n      scope = currentScope(state);\n    }\n  }\n\n  // look for ordered rules\n  if (stream.match(/\\d+ *#/, true, false)) {\n    return 'qualifier';\n  }\n\n  // look for numbers\n  if (stream.match(reFloatForm, true, false)) {\n    return 'number';\n  }\n\n  // look for placeholders\n  if (stream.match(rePattern, true, false)) {\n    return 'variableName.special';\n  }\n\n  // match all braces separately\n  if (stream.match(/(?:\\[|\\]|{|}|\\(|\\))/, true, false)) {\n    return 'bracket';\n  }\n\n  // literals looking like function calls\n  if (stream.match(reFunctionLike, true, false)) {\n    stream.backUp(1);\n    return 'variableName.function';\n  }\n\n  // all other identifiers\n  if (stream.match(reIdentifier, true, false)) {\n    return 'variable';\n  }\n\n  // operators; note that operators like @@ or /; are matched separately for each symbol.\n  if (stream.match(/(?:\\\\|\\+|\\-|\\*|\\/|,|;|\\.|:|@|~|=|>|<|&|\\||_|`|'|\\^|\\?|!|%|#)/, true, false)) {\n    return 'operator';\n  }\n\n  // everything else is an error\n  return 'error';\n}\n\nfunction tokenString(stream, state) {\n  var next, end = false, escaped = false;\n  while ((next = stream.next()) != null) {\n    if (next === '\"' && !escaped) {\n      end = true;\n      break;\n    }\n    escaped = !escaped && next === '\\\\';\n  }\n  if (end && !escaped) {\n    state.tokenize = tokenBase;\n  }\n  return 'string';\n};\n\nfunction tokenComment(stream, state) {\n  var prev, next;\n  while((next = stream.next()) != null) {\n    if (prev === '*' && next === '/') {\n      state.tokenize = tokenBase;\n      break;\n    }\n    prev = next;\n  }\n  return 'comment';\n}\n\nfunction currentScope(state) {\n  var scope = null;\n  if (state.scopes.length > 0)\n    scope = state.scopes[state.scopes.length - 1];\n  return scope;\n}\n\nexport const yacas = {\n  name: \"yacas\",\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      scopes: []\n    };\n  },\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  },\n  indent: function(state, textAfter, cx) {\n    if (state.tokenize !== tokenBase && state.tokenize !== null)\n      return null;\n\n    var delta = 0;\n    if (textAfter === ']' || textAfter === '];' ||\n        textAfter === '}' || textAfter === '};' ||\n        textAfter === ');')\n      delta = -1;\n\n    return (state.scopes.length + delta) * cx.unit;\n  },\n\n  languageData: {\n    electricInput: /[{}\\[\\]()\\;]/,\n    commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}}\n  }\n};\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","Object","defineProperty","get","$1af89355af9bfb28$export$dccaee8bed4a3d34","set","s","enumerable","configurable","$1af89355af9bfb28$var$bodiedOps","$1af89355af9bfb28$var$words","str","obj","words","split","i","length","$1af89355af9bfb28$var$pIdentifier","$1af89355af9bfb28$var$reFloatForm","RegExp","$1af89355af9bfb28$var$reIdentifier","$1af89355af9bfb28$var$rePattern","$1af89355af9bfb28$var$reFunctionLike","$1af89355af9bfb28$var$tokenBase","stream","state","ch","next","tokenize","$1af89355af9bfb28$var$tokenString","eat","$1af89355af9bfb28$var$tokenComment","skipToEnd","backUp","m","match","hasOwnProperty","scopes","push","scope","$1af89355af9bfb28$var$currentScope","pop","end","escaped","prev","name","startState","token","eatSpace","indent","textAfter","cx","delta","unit","languageData","electricInput","commentTokens","line","block","open","close"],"version":3,"file":"yacas.dfb589a6.js.map"}