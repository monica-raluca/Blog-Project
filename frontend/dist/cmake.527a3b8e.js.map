{"mappings":"A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,Q,C,I,I,E,I,K,E,W,C,E,a,C,C,GCAA,IAAI,EAAiB,wBAErB,SAAS,EAAY,CAAM,CAAE,CAAK,EAEhC,IADA,IAAI,EAAS,EAAM,EAAY,CAAA,EACxB,CAAC,EAAO,GAAG,IAAO,AAAA,CAAA,EAAU,EAAO,IAAI,EAAA,GAAO,EAAM,OAAO,EAAE,CAClE,GAAI,AAAY,MAAZ,GAAmB,AAAQ,MAAR,GAAgB,AAAiB,KAAjB,EAAM,OAAO,CAAS,CAC3D,EAAY,CAAA,EACZ,KACF,CACA,EAAO,CACT,CASA,OARI,GACF,EAAO,MAAM,CAAC,GAEZ,GAAW,EAAM,OAAO,CAC1B,EAAM,cAAc,CAAG,CAAA,EAEvB,EAAM,cAAc,CAAG,CAAA,EAElB,QACT,CA4CO,IAAM,EAAQ,CACnB,KAAM,QACN,WAAY,WACV,IAAI,EAAQ,CAAC,EAKb,OAJA,EAAM,YAAY,CAAG,CAAA,EACrB,EAAM,SAAS,CAAG,CAAA,EAClB,EAAM,cAAc,CAAG,CAAA,EACvB,EAAM,OAAO,CAAG,CAAA,EACT,CACT,EACA,MAAO,SAAU,CAAM,CAAE,CAAK,EAC5B,GAAI,EAAO,QAAQ,GAAI,OAAO,SApD5B,EAAK,AAqDS,EArDF,IAAI,SAGpB,AAAI,AAAO,MAAP,EACF,AAAI,AAiDY,EAjDL,KAAK,CAAC,GACR,uBAEF,WAGT,AAAI,AA2CsB,EA3ChB,cAAc,EAEtB,AAyCgB,EAzCT,MAAM,CAAC,GACP,EAwCS,EAAQ,IApCtB,AAoCc,EApCP,KAAK,CAAC,gBAAkB,AAoCjB,EApCwB,KAAK,CAAC,kBAC9C,AAmCgB,EAnCT,MAAM,CAAC,GACP,OAEL,AAAM,KAAN,GACF,AA+BgB,EA/BT,SAAS,GACT,WAGL,AAAM,KAAN,GAAa,AAAM,KAAN,GAEf,AAyBwB,EAzBlB,OAAO,CAAG,EAET,EAuBS,EAAQ,IArBtB,AAAM,KAAN,GAAa,AAAM,KAAN,EACR,UAEL,EAAG,KAAK,CAAC,SACJ,UAET,AAekB,EAfX,QAAQ,CAAC,SACT,KAeP,CACF,C","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/cmake.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"jIPm0\", function(module, exports) {\n\n$parcel$export(module.exports, \"cmake\", () => $e5b9f63933403c3c$export$450e0ffbc76d5f72);\nvar $e5b9f63933403c3c$var$variable_regex = /({)?[a-zA-Z0-9_]+(})?/;\nfunction $e5b9f63933403c3c$var$tokenString(stream, state) {\n    var current, prev, found_var = false;\n    while(!stream.eol() && (current = stream.next()) != state.pending){\n        if (current === '$' && prev != '\\\\' && state.pending == '\"') {\n            found_var = true;\n            break;\n        }\n        prev = current;\n    }\n    if (found_var) stream.backUp(1);\n    if (current == state.pending) state.continueString = false;\n    else state.continueString = true;\n    return \"string\";\n}\nfunction $e5b9f63933403c3c$var$tokenize(stream, state) {\n    var ch = stream.next();\n    // Have we found a variable?\n    if (ch === '$') {\n        if (stream.match($e5b9f63933403c3c$var$variable_regex)) return 'variableName.special';\n        return 'variable';\n    }\n    // Should we still be looking for the end of a string?\n    if (state.continueString) {\n        // If so, go through the loop again\n        stream.backUp(1);\n        return $e5b9f63933403c3c$var$tokenString(stream, state);\n    }\n    // Do we just have a function on our hands?\n    // In 'cmake_minimum_required (VERSION 2.8.8)', 'cmake_minimum_required' is matched\n    if (stream.match(/(\\s+)?\\w+\\(/) || stream.match(/(\\s+)?\\w+\\ \\(/)) {\n        stream.backUp(1);\n        return 'def';\n    }\n    if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n    }\n    // Have we found a string?\n    if (ch == \"'\" || ch == '\"') {\n        // Store the type (single or double)\n        state.pending = ch;\n        // Perform the looping function to find the end\n        return $e5b9f63933403c3c$var$tokenString(stream, state);\n    }\n    if (ch == '(' || ch == ')') return 'bracket';\n    if (ch.match(/[0-9]/)) return 'number';\n    stream.eatWhile(/[\\w-]/);\n    return null;\n}\nconst $e5b9f63933403c3c$export$450e0ffbc76d5f72 = {\n    name: \"cmake\",\n    startState: function() {\n        var state = {};\n        state.inDefinition = false;\n        state.inInclude = false;\n        state.continueString = false;\n        state.pending = false;\n        return state;\n    },\n    token: function(stream, state) {\n        if (stream.eatSpace()) return null;\n        return $e5b9f63933403c3c$var$tokenize(stream, state);\n    }\n};\n\n});\n\n\n//# sourceMappingURL=cmake.527a3b8e.js.map\n","var variable_regex = /({)?[a-zA-Z0-9_]+(})?/;\n\nfunction tokenString(stream, state) {\n  var current, prev, found_var = false;\n  while (!stream.eol() && (current = stream.next()) != state.pending) {\n    if (current === '$' && prev != '\\\\' && state.pending == '\"') {\n      found_var = true;\n      break;\n    }\n    prev = current;\n  }\n  if (found_var) {\n    stream.backUp(1);\n  }\n  if (current == state.pending) {\n    state.continueString = false;\n  } else {\n    state.continueString = true;\n  }\n  return \"string\";\n}\n\nfunction tokenize(stream, state) {\n  var ch = stream.next();\n\n  // Have we found a variable?\n  if (ch === '$') {\n    if (stream.match(variable_regex)) {\n      return 'variableName.special';\n    }\n    return 'variable';\n  }\n  // Should we still be looking for the end of a string?\n  if (state.continueString) {\n    // If so, go through the loop again\n    stream.backUp(1);\n    return tokenString(stream, state);\n  }\n  // Do we just have a function on our hands?\n  // In 'cmake_minimum_required (VERSION 2.8.8)', 'cmake_minimum_required' is matched\n  if (stream.match(/(\\s+)?\\w+\\(/) || stream.match(/(\\s+)?\\w+\\ \\(/)) {\n    stream.backUp(1);\n    return 'def';\n  }\n  if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  // Have we found a string?\n  if (ch == \"'\" || ch == '\"') {\n    // Store the type (single or double)\n    state.pending = ch;\n    // Perform the looping function to find the end\n    return tokenString(stream, state);\n  }\n  if (ch == '(' || ch == ')') {\n    return 'bracket';\n  }\n  if (ch.match(/[0-9]/)) {\n    return 'number';\n  }\n  stream.eatWhile(/[\\w-]/);\n  return null;\n}\nexport const cmake = {\n  name: \"cmake\",\n  startState: function () {\n    var state = {};\n    state.inDefinition = false;\n    state.inInclude = false;\n    state.continueString = false;\n    state.pending = false;\n    return state;\n  },\n  token: function (stream, state) {\n    if (stream.eatSpace()) return null;\n    return tokenize(stream, state);\n  }\n};\n\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","Object","defineProperty","get","$e5b9f63933403c3c$export$450e0ffbc76d5f72","set","s","enumerable","configurable","$e5b9f63933403c3c$var$variable_regex","$e5b9f63933403c3c$var$tokenString","stream","state","current","prev","found_var","eol","next","pending","backUp","continueString","name","startState","inDefinition","inInclude","token","eatSpace","ch","match","skipToEnd","eatWhile"],"version":3,"file":"cmake.527a3b8e.js.map"}