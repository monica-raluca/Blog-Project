{"mappings":"A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,ECAA,SAAS,EAAM,CAAK,EAElB,IAAK,IADD,EAAO,CAAC,EACH,EAAI,EAAG,EAAI,EAAM,MAAM,CAAE,EAAE,EAClC,CAAI,CAAC,CAAK,CAAC,EAAE,CAAC,CAAG,CAAA,EAEnB,OAAO,CACT,C,O,c,C,E,O,C,U,C,I,I,E,I,K,E,W,C,E,a,C,C,GAEA,IAAI,EAAW,EAAM,CACnB,WAAY,SAAU,cAAe,WACrC,QAAS,SAAU,eAAgB,YACnC,OAAQ,QAAS,OAAQ,OAAQ,OACjC,QAAS,QAAS,SAAU,WAC5B,WAAY,QAAS,OAAQ,aAC7B,SAAU,WAAY,YAAa,KACnC,YAAa,OAAQ,SAAU,MAC/B,QAAS,QAAS,aAAc,cAChC,OAAQ,WAAY,YAAa,QACjC,SAAU,SAAU,WAAY,UAChC,KAAM,OAAQ,KAAM,WAAY,SAAU,UAC1C,UAAW,SAAU,YAAa,YAClC,SAAU,WAAY,gBACtB,kBAAmB,OAAQ,SAC3B,UAAW,OAAQ,WAAY,UAC/B,YAAa,OAAQ,QAAS,UAC9B,QAAS,UAAW,UAAW,YAC/B,SAAU,OAAQ,OAAQ,YAAa,SACvC,SAAU,SAAU,OAAQ,SAAU,WACtC,OAAQ,aAAc,SAAU,OAAQ,KAAM,OAC9C,MAAO,QAAS,WAAY,QAAS,QACrC,QAAQ,EACN,EAAW,EAAM,CAAC,QAAS,MAAO,SAAU,QAAS,OACnC,UAAW,UAAW,QAAS,OAAQ,QACvC,MAAO,YAAa,OAAQ,OAAQ,OACpC,OAAQ,MAAO,QAAS,MAAO,OAC/B,aAAc,OAAQ,OAAQ,QAAS,OACvC,QAAS,WAAY,QAAS,OAAQ,OACtC,UAAW,OAAQ,OAAQ,QAAS,QACpC,OAAQ,QAAS,yBACjB,UAAW,QAAS,MAAO,OAAQ,QACnC,WAAY,SAAU,OAAQ,QAAS,QACvC,WAAY,QAAS,eAAgB,aACrC,gBAAiB,cAAe,cAChC,UAAW,cAAe,cAC1B,aAAc,oBACd,mBAAoB,iBAAkB,OACtC,QAAS,QAAS,QAAS,gBAC3B,QAAS,QAAS,SAAU,QAAS,QACrC,SAAU,OAAQ,OAAQ,QAAS,OAAQ,OAC3C,QAAS,OAAQ,SAAU,MAAO,OAAQ,OAC1C,OAAQ,OAAQ,OAAQ,OAAQ,QAChC,cAAe,QAAS,QAAS,QACjC,OAAQ,QAAS,QAAS,OAAQ,QAClC,UAAW,UAAW,MAAO,OAAQ,QACrC,OAAQ,MAAO,WAAY,kBAC3B,QAAS,OAAQ,QAAS,QAAS,QACnC,QAAS,OAAQ,QAAS,OAAQ,WAClC,QAAS,QAAS,QAAS,SAAU,SACrC,cAAe,uBACf,2BAA4B,SAC5B,SAAU,SAAU,SAAU,SAC9B,SAAU,SAAU,SAAU,OAAQ,OACtC,SAAU,OAAQ,QAAS,QAAS,QACpC,QAAS,QAAS,QAAS,OAAQ,QACnC,SAAU,OAAQ,SAAU,OAAQ,OACpC,WAAY,QAAS,MAAO,MAAO,QACnC,SAAU,QAAS,SAAU,QAC7B,gBAAiB,gBAAiB,gBAClC,QAAS,OAAQ,OAAQ,SAAU,MAAO,WAC1C,MAAO,MAAO,OAAQ,MAAO,MAAO,SAAU,MAC9C,MAAO,UAAW,OAAQ,SAAU,QAAS,QAC7C,SAAU,MAAO,cAAe,SAAU,SAC1C,SAAU,QAAS,aAAc,MAAO,cACxC,SAAU,SAAU,MAAO,SAAU,SACrC,UAAW,WAAY,OAAQ,MAAO,KAAM,OAC5C,SAAU,YAAa,UAAW,UAAW,QAC7C,OAAQ,gBAAiB,cAAe,QACxC,OAAQ,WAAY,SAAU,SAAU,UACxC,YAAa,SAAU,eAAgB,QACvC,OAAQ,SAAU,oBAClB,qBAAsB,eAAgB,QACtC,QAAS,OAAQ,SAAU,OAAQ,MAAO,QAC1C,OAAQ,UAAW,SAAU,OAAQ,QAAS,OAC9C,MAAO,SAAU,SAAU,eAAgB,MAC3C,OAAQ,OAAQ,OAAQ,WAAY,YACpC,OAAQ,SAAU,SAAU,QAAS,SACrC,SAAU,SAAU,MAAO,OAAQ,OAAQ,OAC3C,OAAQ,OAAQ,QAAQ,EAE1C,EAAa,EAAM,CAAC,SAAU,SAAU,WAAY,mBAChC,UAAW,kBAAmB,WAAY,QAC1C,YAAa,YAAa,YAAa,WACvC,iBAAkB,iBAAkB,iBACpC,gBAAiB,kBAAmB,kBACpC,kBAAmB,iBAAkB,aACrC,aAAc,SAAU,gBACxB,wBAAyB,cAAe,QACxC,UAAW,gBAAiB,WAAY,YACxC,UAAW,SAAU,UAAW,UAAW,OAAO,EACtE,EAAiB,iBACjB,EAAc,gDAyDX,IAAM,EAAU,CACrB,KAAM,UACN,WAAY,WACV,MAAO,CAAC,SAAU,IAAI,CACxB,EAEA,MAAO,SAAS,CAAM,CAAE,CAAK,EAC3B,GAAI,EAAO,QAAQ,GAAI,OAAO,KAC9B,IAAI,EAAQ,AAAC,CAAA,EAAM,QAAQ,EA/D/B,SAAmB,CAAM,CAAE,CAAK,EAE9B,GAAI,EAAO,KAAK,CAAC,GACf,MAAO,WAGT,IAgCmB,EAhCf,EAAK,EAAO,IAAI,GACpB,GAAI,AAAM,KAAN,EAEF,OADA,EAAO,SAAS,GACT,UAET,GAAI,AAAM,KAAN,GAAa,AAAM,KAAN,EAEf,CAAA,OAyBiB,EA1BY,EAA7B,EAAM,QAAQ,CA2BT,SAAS,CAAM,CAAE,CAAK,EAE3B,IADA,IAAqB,EAAjB,EAAU,CAAA,EAAa,EAAM,CAAA,EACzB,AAAyB,MAAzB,CAAA,EAAO,EAAO,IAAI,EAAA,GAAa,CACrC,GAAI,GAAQ,GAAS,CAAC,EAAS,CAC7B,EAAM,CAAA,EACN,KACF,CACA,EAAU,CAAC,GAAW,AAAQ,MAAR,CACxB,CAEA,MADI,CAAA,GAAO,CAAC,CAAA,GAAS,CAAA,EAAM,QAAQ,CAAG,IAAtC,EACO,QACT,EArCS,EAAM,QAAQ,CAAC,EAAQ,EAA9B,CAEF,GAAI,cAAc,IAAI,CAAC,GACrB,OAAO,KAET,GAAI,KAAK,IAAI,CAAC,GAEZ,OADA,EAAO,QAAQ,CAAC,UACT,SAET,GAAI,EAAe,IAAI,CAAC,GAEtB,OADA,EAAO,QAAQ,CAAC,GACT,WAET,EAAO,QAAQ,CAAC,WAChB,IAAI,EAAO,EAAO,OAAO,GAAG,WAAW,UAEvC,AAAI,EAAS,cAAc,CAAC,GACnB,UAEL,EAAS,cAAc,CAAC,IAAS,EAAU,cAAc,CAAC,GACrD,UAEF,UACT,CA2BmC,EAAW,EAAQ,GAElD,OAAO,CACT,CACF,C","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/fortran.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"cbC5b\", function(module, exports) {\n\n$parcel$export(module.exports, \"fortran\", () => $8df40d84a0996e2e$export$d3a09a4d92a601e7);\nfunction $8df40d84a0996e2e$var$words(array) {\n    var keys = {};\n    for(var i = 0; i < array.length; ++i)keys[array[i]] = true;\n    return keys;\n}\nvar $8df40d84a0996e2e$var$keywords = $8df40d84a0996e2e$var$words([\n    \"abstract\",\n    \"accept\",\n    \"allocatable\",\n    \"allocate\",\n    \"array\",\n    \"assign\",\n    \"asynchronous\",\n    \"backspace\",\n    \"bind\",\n    \"block\",\n    \"byte\",\n    \"call\",\n    \"case\",\n    \"class\",\n    \"close\",\n    \"common\",\n    \"contains\",\n    \"continue\",\n    \"cycle\",\n    \"data\",\n    \"deallocate\",\n    \"decode\",\n    \"deferred\",\n    \"dimension\",\n    \"do\",\n    \"elemental\",\n    \"else\",\n    \"encode\",\n    \"end\",\n    \"endif\",\n    \"entry\",\n    \"enumerator\",\n    \"equivalence\",\n    \"exit\",\n    \"external\",\n    \"extrinsic\",\n    \"final\",\n    \"forall\",\n    \"format\",\n    \"function\",\n    \"generic\",\n    \"go\",\n    \"goto\",\n    \"if\",\n    \"implicit\",\n    \"import\",\n    \"include\",\n    \"inquire\",\n    \"intent\",\n    \"interface\",\n    \"intrinsic\",\n    \"module\",\n    \"namelist\",\n    \"non_intrinsic\",\n    \"non_overridable\",\n    \"none\",\n    \"nopass\",\n    \"nullify\",\n    \"open\",\n    \"optional\",\n    \"options\",\n    \"parameter\",\n    \"pass\",\n    \"pause\",\n    \"pointer\",\n    \"print\",\n    \"private\",\n    \"program\",\n    \"protected\",\n    \"public\",\n    \"pure\",\n    \"read\",\n    \"recursive\",\n    \"result\",\n    \"return\",\n    \"rewind\",\n    \"save\",\n    \"select\",\n    \"sequence\",\n    \"stop\",\n    \"subroutine\",\n    \"target\",\n    \"then\",\n    \"to\",\n    \"type\",\n    \"use\",\n    \"value\",\n    \"volatile\",\n    \"where\",\n    \"while\",\n    \"write\"\n]);\nvar $8df40d84a0996e2e$var$builtins = $8df40d84a0996e2e$var$words([\n    \"abort\",\n    \"abs\",\n    \"access\",\n    \"achar\",\n    \"acos\",\n    \"adjustl\",\n    \"adjustr\",\n    \"aimag\",\n    \"aint\",\n    \"alarm\",\n    \"all\",\n    \"allocated\",\n    \"alog\",\n    \"amax\",\n    \"amin\",\n    \"amod\",\n    \"and\",\n    \"anint\",\n    \"any\",\n    \"asin\",\n    \"associated\",\n    \"atan\",\n    \"besj\",\n    \"besjn\",\n    \"besy\",\n    \"besyn\",\n    \"bit_size\",\n    \"btest\",\n    \"cabs\",\n    \"ccos\",\n    \"ceiling\",\n    \"cexp\",\n    \"char\",\n    \"chdir\",\n    \"chmod\",\n    \"clog\",\n    \"cmplx\",\n    \"command_argument_count\",\n    \"complex\",\n    \"conjg\",\n    \"cos\",\n    \"cosh\",\n    \"count\",\n    \"cpu_time\",\n    \"cshift\",\n    \"csin\",\n    \"csqrt\",\n    \"ctime\",\n    \"c_funloc\",\n    \"c_loc\",\n    \"c_associated\",\n    \"c_null_ptr\",\n    \"c_null_funptr\",\n    \"c_f_pointer\",\n    \"c_null_char\",\n    \"c_alert\",\n    \"c_backspace\",\n    \"c_form_feed\",\n    \"c_new_line\",\n    \"c_carriage_return\",\n    \"c_horizontal_tab\",\n    \"c_vertical_tab\",\n    \"dabs\",\n    \"dacos\",\n    \"dasin\",\n    \"datan\",\n    \"date_and_time\",\n    \"dbesj\",\n    \"dbesj\",\n    \"dbesjn\",\n    \"dbesy\",\n    \"dbesy\",\n    \"dbesyn\",\n    \"dble\",\n    \"dcos\",\n    \"dcosh\",\n    \"ddim\",\n    \"derf\",\n    \"derfc\",\n    \"dexp\",\n    \"digits\",\n    \"dim\",\n    \"dint\",\n    \"dlog\",\n    \"dlog\",\n    \"dmax\",\n    \"dmin\",\n    \"dmod\",\n    \"dnint\",\n    \"dot_product\",\n    \"dprod\",\n    \"dsign\",\n    \"dsinh\",\n    \"dsin\",\n    \"dsqrt\",\n    \"dtanh\",\n    \"dtan\",\n    \"dtime\",\n    \"eoshift\",\n    \"epsilon\",\n    \"erf\",\n    \"erfc\",\n    \"etime\",\n    \"exit\",\n    \"exp\",\n    \"exponent\",\n    \"extends_type_of\",\n    \"fdate\",\n    \"fget\",\n    \"fgetc\",\n    \"float\",\n    \"floor\",\n    \"flush\",\n    \"fnum\",\n    \"fputc\",\n    \"fput\",\n    \"fraction\",\n    \"fseek\",\n    \"fstat\",\n    \"ftell\",\n    \"gerror\",\n    \"getarg\",\n    \"get_command\",\n    \"get_command_argument\",\n    \"get_environment_variable\",\n    \"getcwd\",\n    \"getenv\",\n    \"getgid\",\n    \"getlog\",\n    \"getpid\",\n    \"getuid\",\n    \"gmtime\",\n    \"hostnm\",\n    \"huge\",\n    \"iabs\",\n    \"iachar\",\n    \"iand\",\n    \"iargc\",\n    \"ibclr\",\n    \"ibits\",\n    \"ibset\",\n    \"ichar\",\n    \"idate\",\n    \"idim\",\n    \"idint\",\n    \"idnint\",\n    \"ieor\",\n    \"ierrno\",\n    \"ifix\",\n    \"imag\",\n    \"imagpart\",\n    \"index\",\n    \"int\",\n    \"ior\",\n    \"irand\",\n    \"isatty\",\n    \"ishft\",\n    \"ishftc\",\n    \"isign\",\n    \"iso_c_binding\",\n    \"is_iostat_end\",\n    \"is_iostat_eor\",\n    \"itime\",\n    \"kill\",\n    \"kind\",\n    \"lbound\",\n    \"len\",\n    \"len_trim\",\n    \"lge\",\n    \"lgt\",\n    \"link\",\n    \"lle\",\n    \"llt\",\n    \"lnblnk\",\n    \"loc\",\n    \"log\",\n    \"logical\",\n    \"long\",\n    \"lshift\",\n    \"lstat\",\n    \"ltime\",\n    \"matmul\",\n    \"max\",\n    \"maxexponent\",\n    \"maxloc\",\n    \"maxval\",\n    \"mclock\",\n    \"merge\",\n    \"move_alloc\",\n    \"min\",\n    \"minexponent\",\n    \"minloc\",\n    \"minval\",\n    \"mod\",\n    \"modulo\",\n    \"mvbits\",\n    \"nearest\",\n    \"new_line\",\n    \"nint\",\n    \"not\",\n    \"or\",\n    \"pack\",\n    \"perror\",\n    \"precision\",\n    \"present\",\n    \"product\",\n    \"radix\",\n    \"rand\",\n    \"random_number\",\n    \"random_seed\",\n    \"range\",\n    \"real\",\n    \"realpart\",\n    \"rename\",\n    \"repeat\",\n    \"reshape\",\n    \"rrspacing\",\n    \"rshift\",\n    \"same_type_as\",\n    \"scale\",\n    \"scan\",\n    \"second\",\n    \"selected_int_kind\",\n    \"selected_real_kind\",\n    \"set_exponent\",\n    \"shape\",\n    \"short\",\n    \"sign\",\n    \"signal\",\n    \"sinh\",\n    \"sin\",\n    \"sleep\",\n    \"sngl\",\n    \"spacing\",\n    \"spread\",\n    \"sqrt\",\n    \"srand\",\n    \"stat\",\n    \"sum\",\n    \"symlnk\",\n    \"system\",\n    \"system_clock\",\n    \"tan\",\n    \"tanh\",\n    \"time\",\n    \"tiny\",\n    \"transfer\",\n    \"transpose\",\n    \"trim\",\n    \"ttynam\",\n    \"ubound\",\n    \"umask\",\n    \"unlink\",\n    \"unpack\",\n    \"verify\",\n    \"xor\",\n    \"zabs\",\n    \"zcos\",\n    \"zexp\",\n    \"zlog\",\n    \"zsin\",\n    \"zsqrt\"\n]);\nvar $8df40d84a0996e2e$var$dataTypes = $8df40d84a0996e2e$var$words([\n    \"c_bool\",\n    \"c_char\",\n    \"c_double\",\n    \"c_double_complex\",\n    \"c_float\",\n    \"c_float_complex\",\n    \"c_funptr\",\n    \"c_int\",\n    \"c_int16_t\",\n    \"c_int32_t\",\n    \"c_int64_t\",\n    \"c_int8_t\",\n    \"c_int_fast16_t\",\n    \"c_int_fast32_t\",\n    \"c_int_fast64_t\",\n    \"c_int_fast8_t\",\n    \"c_int_least16_t\",\n    \"c_int_least32_t\",\n    \"c_int_least64_t\",\n    \"c_int_least8_t\",\n    \"c_intmax_t\",\n    \"c_intptr_t\",\n    \"c_long\",\n    \"c_long_double\",\n    \"c_long_double_complex\",\n    \"c_long_long\",\n    \"c_ptr\",\n    \"c_short\",\n    \"c_signed_char\",\n    \"c_size_t\",\n    \"character\",\n    \"complex\",\n    \"double\",\n    \"integer\",\n    \"logical\",\n    \"real\"\n]);\nvar $8df40d84a0996e2e$var$isOperatorChar = /[+\\-*&=<>\\/\\:]/;\nvar $8df40d84a0996e2e$var$litOperator = /^\\.(and|or|eq|lt|le|gt|ge|ne|not|eqv|neqv)\\./i;\nfunction $8df40d84a0996e2e$var$tokenBase(stream, state) {\n    if (stream.match($8df40d84a0996e2e$var$litOperator)) return 'operator';\n    var ch = stream.next();\n    if (ch == \"!\") {\n        stream.skipToEnd();\n        return \"comment\";\n    }\n    if (ch == '\"' || ch == \"'\") {\n        state.tokenize = $8df40d84a0996e2e$var$tokenString(ch);\n        return state.tokenize(stream, state);\n    }\n    if (/[\\[\\]\\(\\),]/.test(ch)) return null;\n    if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n    }\n    if ($8df40d84a0996e2e$var$isOperatorChar.test(ch)) {\n        stream.eatWhile($8df40d84a0996e2e$var$isOperatorChar);\n        return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_]/);\n    var word = stream.current().toLowerCase();\n    if ($8df40d84a0996e2e$var$keywords.hasOwnProperty(word)) return 'keyword';\n    if ($8df40d84a0996e2e$var$builtins.hasOwnProperty(word) || $8df40d84a0996e2e$var$dataTypes.hasOwnProperty(word)) return 'builtin';\n    return \"variable\";\n}\nfunction $8df40d84a0996e2e$var$tokenString(quote) {\n    return function(stream, state) {\n        var escaped = false, next, end = false;\n        while((next = stream.next()) != null){\n            if (next == quote && !escaped) {\n                end = true;\n                break;\n            }\n            escaped = !escaped && next == \"\\\\\";\n        }\n        if (end || !escaped) state.tokenize = null;\n        return \"string\";\n    };\n}\nconst $8df40d84a0996e2e$export$d3a09a4d92a601e7 = {\n    name: \"fortran\",\n    startState: function() {\n        return {\n            tokenize: null\n        };\n    },\n    token: function(stream, state) {\n        if (stream.eatSpace()) return null;\n        var style = (state.tokenize || $8df40d84a0996e2e$var$tokenBase)(stream, state);\n        if (style == \"comment\" || style == \"meta\") return style;\n        return style;\n    }\n};\n\n});\n\n\n//# sourceMappingURL=fortran.0622e3cf.js.map\n","function words(array) {\n  var keys = {};\n  for (var i = 0; i < array.length; ++i) {\n    keys[array[i]] = true;\n  }\n  return keys;\n}\n\nvar keywords = words([\n  \"abstract\", \"accept\", \"allocatable\", \"allocate\",\n  \"array\", \"assign\", \"asynchronous\", \"backspace\",\n  \"bind\", \"block\", \"byte\", \"call\", \"case\",\n  \"class\", \"close\", \"common\", \"contains\",\n  \"continue\", \"cycle\", \"data\", \"deallocate\",\n  \"decode\", \"deferred\", \"dimension\", \"do\",\n  \"elemental\", \"else\", \"encode\", \"end\",\n  \"endif\", \"entry\", \"enumerator\", \"equivalence\",\n  \"exit\", \"external\", \"extrinsic\", \"final\",\n  \"forall\", \"format\", \"function\", \"generic\",\n  \"go\", \"goto\", \"if\", \"implicit\", \"import\", \"include\",\n  \"inquire\", \"intent\", \"interface\", \"intrinsic\",\n  \"module\", \"namelist\", \"non_intrinsic\",\n  \"non_overridable\", \"none\", \"nopass\",\n  \"nullify\", \"open\", \"optional\", \"options\",\n  \"parameter\", \"pass\", \"pause\", \"pointer\",\n  \"print\", \"private\", \"program\", \"protected\",\n  \"public\", \"pure\", \"read\", \"recursive\", \"result\",\n  \"return\", \"rewind\", \"save\", \"select\", \"sequence\",\n  \"stop\", \"subroutine\", \"target\", \"then\", \"to\", \"type\",\n  \"use\", \"value\", \"volatile\", \"where\", \"while\",\n  \"write\"]);\nvar builtins = words([\"abort\", \"abs\", \"access\", \"achar\", \"acos\",\n                      \"adjustl\", \"adjustr\", \"aimag\", \"aint\", \"alarm\",\n                      \"all\", \"allocated\", \"alog\", \"amax\", \"amin\",\n                      \"amod\", \"and\", \"anint\", \"any\", \"asin\",\n                      \"associated\", \"atan\", \"besj\", \"besjn\", \"besy\",\n                      \"besyn\", \"bit_size\", \"btest\", \"cabs\", \"ccos\",\n                      \"ceiling\", \"cexp\", \"char\", \"chdir\", \"chmod\",\n                      \"clog\", \"cmplx\", \"command_argument_count\",\n                      \"complex\", \"conjg\", \"cos\", \"cosh\", \"count\",\n                      \"cpu_time\", \"cshift\", \"csin\", \"csqrt\", \"ctime\",\n                      \"c_funloc\", \"c_loc\", \"c_associated\", \"c_null_ptr\",\n                      \"c_null_funptr\", \"c_f_pointer\", \"c_null_char\",\n                      \"c_alert\", \"c_backspace\", \"c_form_feed\",\n                      \"c_new_line\", \"c_carriage_return\",\n                      \"c_horizontal_tab\", \"c_vertical_tab\", \"dabs\",\n                      \"dacos\", \"dasin\", \"datan\", \"date_and_time\",\n                      \"dbesj\", \"dbesj\", \"dbesjn\", \"dbesy\", \"dbesy\",\n                      \"dbesyn\", \"dble\", \"dcos\", \"dcosh\", \"ddim\", \"derf\",\n                      \"derfc\", \"dexp\", \"digits\", \"dim\", \"dint\", \"dlog\",\n                      \"dlog\", \"dmax\", \"dmin\", \"dmod\", \"dnint\",\n                      \"dot_product\", \"dprod\", \"dsign\", \"dsinh\",\n                      \"dsin\", \"dsqrt\", \"dtanh\", \"dtan\", \"dtime\",\n                      \"eoshift\", \"epsilon\", \"erf\", \"erfc\", \"etime\",\n                      \"exit\", \"exp\", \"exponent\", \"extends_type_of\",\n                      \"fdate\", \"fget\", \"fgetc\", \"float\", \"floor\",\n                      \"flush\", \"fnum\", \"fputc\", \"fput\", \"fraction\",\n                      \"fseek\", \"fstat\", \"ftell\", \"gerror\", \"getarg\",\n                      \"get_command\", \"get_command_argument\",\n                      \"get_environment_variable\", \"getcwd\",\n                      \"getenv\", \"getgid\", \"getlog\", \"getpid\",\n                      \"getuid\", \"gmtime\", \"hostnm\", \"huge\", \"iabs\",\n                      \"iachar\", \"iand\", \"iargc\", \"ibclr\", \"ibits\",\n                      \"ibset\", \"ichar\", \"idate\", \"idim\", \"idint\",\n                      \"idnint\", \"ieor\", \"ierrno\", \"ifix\", \"imag\",\n                      \"imagpart\", \"index\", \"int\", \"ior\", \"irand\",\n                      \"isatty\", \"ishft\", \"ishftc\", \"isign\",\n                      \"iso_c_binding\", \"is_iostat_end\", \"is_iostat_eor\",\n                      \"itime\", \"kill\", \"kind\", \"lbound\", \"len\", \"len_trim\",\n                      \"lge\", \"lgt\", \"link\", \"lle\", \"llt\", \"lnblnk\", \"loc\",\n                      \"log\", \"logical\", \"long\", \"lshift\", \"lstat\", \"ltime\",\n                      \"matmul\", \"max\", \"maxexponent\", \"maxloc\", \"maxval\",\n                      \"mclock\", \"merge\", \"move_alloc\", \"min\", \"minexponent\",\n                      \"minloc\", \"minval\", \"mod\", \"modulo\", \"mvbits\",\n                      \"nearest\", \"new_line\", \"nint\", \"not\", \"or\", \"pack\",\n                      \"perror\", \"precision\", \"present\", \"product\", \"radix\",\n                      \"rand\", \"random_number\", \"random_seed\", \"range\",\n                      \"real\", \"realpart\", \"rename\", \"repeat\", \"reshape\",\n                      \"rrspacing\", \"rshift\", \"same_type_as\", \"scale\",\n                      \"scan\", \"second\", \"selected_int_kind\",\n                      \"selected_real_kind\", \"set_exponent\", \"shape\",\n                      \"short\", \"sign\", \"signal\", \"sinh\", \"sin\", \"sleep\",\n                      \"sngl\", \"spacing\", \"spread\", \"sqrt\", \"srand\", \"stat\",\n                      \"sum\", \"symlnk\", \"system\", \"system_clock\", \"tan\",\n                      \"tanh\", \"time\", \"tiny\", \"transfer\", \"transpose\",\n                      \"trim\", \"ttynam\", \"ubound\", \"umask\", \"unlink\",\n                      \"unpack\", \"verify\", \"xor\", \"zabs\", \"zcos\", \"zexp\",\n                      \"zlog\", \"zsin\", \"zsqrt\"]);\n\nvar dataTypes =  words([\"c_bool\", \"c_char\", \"c_double\", \"c_double_complex\",\n                        \"c_float\", \"c_float_complex\", \"c_funptr\", \"c_int\",\n                        \"c_int16_t\", \"c_int32_t\", \"c_int64_t\", \"c_int8_t\",\n                        \"c_int_fast16_t\", \"c_int_fast32_t\", \"c_int_fast64_t\",\n                        \"c_int_fast8_t\", \"c_int_least16_t\", \"c_int_least32_t\",\n                        \"c_int_least64_t\", \"c_int_least8_t\", \"c_intmax_t\",\n                        \"c_intptr_t\", \"c_long\", \"c_long_double\",\n                        \"c_long_double_complex\", \"c_long_long\", \"c_ptr\",\n                        \"c_short\", \"c_signed_char\", \"c_size_t\", \"character\",\n                        \"complex\", \"double\", \"integer\", \"logical\", \"real\"]);\nvar isOperatorChar = /[+\\-*&=<>\\/\\:]/;\nvar litOperator = /^\\.(and|or|eq|lt|le|gt|ge|ne|not|eqv|neqv)\\./i;\n\nfunction tokenBase(stream, state) {\n\n  if (stream.match(litOperator)){\n    return 'operator';\n  }\n\n  var ch = stream.next();\n  if (ch == \"!\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  if (ch == '\"' || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (/[\\[\\]\\(\\),]/.test(ch)) {\n    return null;\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_]/);\n  var word = stream.current().toLowerCase();\n\n  if (keywords.hasOwnProperty(word)){\n    return 'keyword';\n  }\n  if (builtins.hasOwnProperty(word) || dataTypes.hasOwnProperty(word)) {\n    return 'builtin';\n  }\n  return \"variable\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !escaped) state.tokenize = null;\n    return \"string\";\n  };\n}\n\n// Interface\n\nexport const fortran = {\n  name: \"fortran\",\n  startState: function() {\n    return {tokenize: null};\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\" || style == \"meta\") return style;\n    return style;\n  }\n};\n\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","$8df40d84a0996e2e$var$words","array","keys","i","length","Object","defineProperty","get","$8df40d84a0996e2e$export$d3a09a4d92a601e7","set","s","enumerable","configurable","$8df40d84a0996e2e$var$keywords","$8df40d84a0996e2e$var$builtins","$8df40d84a0996e2e$var$dataTypes","$8df40d84a0996e2e$var$isOperatorChar","$8df40d84a0996e2e$var$litOperator","name","startState","tokenize","token","stream","state","eatSpace","style","match","quote","ch","next","skipToEnd","escaped","end","test","eatWhile","word","current","toLowerCase","hasOwnProperty"],"version":3,"file":"fortran.0622e3cf.js.map"}