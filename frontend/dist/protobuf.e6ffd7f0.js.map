{"mappings":"A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,W,C,I,I,E,I,K,E,W,C,E,a,C,C,GCIA,IAAI,EAAe,CACjB,UAAW,UAAW,SAAU,SAChC,WAAY,WAAY,WAAY,WAAY,UAAW,aAAc,SACzE,OAAQ,QAAS,SAAU,OAAQ,QAAS,SAC5C,QAAS,QAAS,SAAU,SAAU,SAAU,SAAU,UAAW,UAAW,WAAY,WAC5F,SAAU,UAAW,MAAO,UAC7B,CACG,EAVK,AAAI,OAAO,MAAQ,AAUF,EAVQ,IAAI,CAAC,OAAS,QAAS,KAYrD,EAAc,AAAI,OAAO,iCAmCtB,IAAM,EAAW,CACtB,KAAM,WACN,MAnCF,SAAmB,CAAM,SAEvB,AAAI,EAAO,QAAQ,GAAW,KAG1B,EAAO,KAAK,CAAC,OACf,EAAO,SAAS,GACT,WAIL,EAAO,KAAK,CAAC,aAAc,CAAA,KACzB,EAAO,KAAK,CAAC,yBAEb,EAAO,KAAK,CAAC,oCAEb,EAAO,KAAK,CAAC,+BAHR,SAQX,AAAI,EAAO,KAAK,CAAC,oBACb,EAAO,KAAK,CAAC,mBAD6B,SAI1C,EAAO,KAAK,CAAC,GAAoB,UACjC,EAAO,KAAK,CAAC,GAAuB,YAGxC,EAAO,IAAI,GACJ,KACT,EAKE,aAAc,CACZ,aAAc,CAChB,CACF,C","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/protobuf.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"gRjnr\", function(module, exports) {\n\n$parcel$export(module.exports, \"protobuf\", () => $c460a0753701e364$export$dd199a1422e1374);\nfunction $c460a0753701e364$var$wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n}\nvar $c460a0753701e364$var$keywordArray = [\n    \"package\",\n    \"message\",\n    \"import\",\n    \"syntax\",\n    \"required\",\n    \"optional\",\n    \"repeated\",\n    \"reserved\",\n    \"default\",\n    \"extensions\",\n    \"packed\",\n    \"bool\",\n    \"bytes\",\n    \"double\",\n    \"enum\",\n    \"float\",\n    \"string\",\n    \"int32\",\n    \"int64\",\n    \"uint32\",\n    \"uint64\",\n    \"sint32\",\n    \"sint64\",\n    \"fixed32\",\n    \"fixed64\",\n    \"sfixed32\",\n    \"sfixed64\",\n    \"option\",\n    \"service\",\n    \"rpc\",\n    \"returns\"\n];\nvar $c460a0753701e364$var$keywords = $c460a0753701e364$var$wordRegexp($c460a0753701e364$var$keywordArray);\nvar $c460a0753701e364$var$identifiers = new RegExp(\"^[_A-Za-z\\xa1-\\uffff][_A-Za-z0-9\\xa1-\\uffff]*\");\nfunction $c460a0753701e364$var$tokenBase(stream) {\n    // whitespaces\n    if (stream.eatSpace()) return null;\n    // Handle one line Comments\n    if (stream.match(\"//\")) {\n        stream.skipToEnd();\n        return \"comment\";\n    }\n    // Handle Number Literals\n    if (stream.match(/^[0-9\\.+-]/, false)) {\n        if (stream.match(/^[+-]?0x[0-9a-fA-F]+/)) return \"number\";\n        if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?/)) return \"number\";\n        if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?/)) return \"number\";\n    }\n    // Handle Strings\n    if (stream.match(/^\"([^\"]|(\"\"))*\"/)) return \"string\";\n    if (stream.match(/^'([^']|(''))*'/)) return \"string\";\n    // Handle words\n    if (stream.match($c460a0753701e364$var$keywords)) return \"keyword\";\n    if (stream.match($c460a0753701e364$var$identifiers)) return \"variable\";\n    // Handle non-detected items\n    stream.next();\n    return null;\n}\nconst $c460a0753701e364$export$dd199a1422e1374 = {\n    name: \"protobuf\",\n    token: $c460a0753701e364$var$tokenBase,\n    languageData: {\n        autocomplete: $c460a0753701e364$var$keywordArray\n    }\n};\n\n});\n\n\n//# sourceMappingURL=protobuf.e6ffd7f0.js.map\n","function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n};\n\nvar keywordArray = [\n  \"package\", \"message\", \"import\", \"syntax\",\n  \"required\", \"optional\", \"repeated\", \"reserved\", \"default\", \"extensions\", \"packed\",\n  \"bool\", \"bytes\", \"double\", \"enum\", \"float\", \"string\",\n  \"int32\", \"int64\", \"uint32\", \"uint64\", \"sint32\", \"sint64\", \"fixed32\", \"fixed64\", \"sfixed32\", \"sfixed64\",\n  \"option\", \"service\", \"rpc\", \"returns\"\n];\nvar keywords = wordRegexp(keywordArray);\n\nvar identifiers = new RegExp(\"^[_A-Za-z\\xa1-\\uffff][_A-Za-z0-9\\xa1-\\uffff]*\");\n\nfunction tokenBase(stream) {\n  // whitespaces\n  if (stream.eatSpace()) return null;\n\n  // Handle one line Comments\n  if (stream.match(\"//\")) {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  // Handle Number Literals\n  if (stream.match(/^[0-9\\.+-]/, false)) {\n    if (stream.match(/^[+-]?0x[0-9a-fA-F]+/))\n      return \"number\";\n    if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?/))\n      return \"number\";\n    if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?/))\n      return \"number\";\n  }\n\n  // Handle Strings\n  if (stream.match(/^\"([^\"]|(\"\"))*\"/)) { return \"string\"; }\n  if (stream.match(/^'([^']|(''))*'/)) { return \"string\"; }\n\n  // Handle words\n  if (stream.match(keywords)) { return \"keyword\"; }\n  if (stream.match(identifiers)) { return \"variable\"; } ;\n\n  // Handle non-detected items\n  stream.next();\n  return null;\n};\n\nexport const protobuf = {\n  name: \"protobuf\",\n  token: tokenBase,\n  languageData: {\n    autocomplete: keywordArray\n  }\n}\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","Object","defineProperty","get","$c460a0753701e364$export$dd199a1422e1374","set","s","enumerable","configurable","$c460a0753701e364$var$keywordArray","$c460a0753701e364$var$keywords","RegExp","words","join","$c460a0753701e364$var$identifiers","name","token","stream","eatSpace","match","skipToEnd","next","languageData","autocomplete"],"version":3,"file":"protobuf.e6ffd7f0.js.map"}