{"mappings":"A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,ECAA,SAAS,EAAgB,CAAM,EAC7B,IAAI,EAAQ,EAAO,KAAK,CAAC,UAEzB,OADA,EAAO,SAAS,GACT,EAAQ,QAAU,IAC3B,C,O,c,C,E,O,C,a,C,I,I,E,I,K,E,W,C,E,a,C,C,GAEO,IAAM,EAAa,CACxB,KAAM,aACN,MAAO,SAAS,CAAM,CAAE,CAAK,EAC3B,IAAI,EACJ,GAAI,AAAe,OAAf,EAAM,KAAK,QACb,AAAI,EAAO,GAAG,IAAO,CAAA,EAAI,EAAO,KAAK,CAAC,6BAAA,GACpC,EAAM,KAAK,CAAG,UACd,EAAM,IAAI,CAAG,CAAC,CAAC,EAAE,CACV,OAEF,EAAgB,GAClB,GAAI,AAAe,WAAf,EAAM,KAAK,CACpB,GAAI,EAAO,GAAG,IAAM,EAAO,KAAK,CAAC,SAE/B,OADA,EAAM,KAAK,CAAG,SACP,WACF,CACL,IAAI,EAAS,EAAgB,GAE7B,OADI,GAAQ,CAAA,EAAM,KAAK,CAAG,MAA1B,EACO,CACT,CACK,GAAI,AAAe,UAAf,EAAM,KAAK,CAGpB,OAFA,EAAO,SAAS,GAChB,EAAM,KAAK,CAAG,UACP,SACF,GAAI,AAAe,QAAf,EAAM,KAAK,CACpB,GAAI,EAAO,GAAG,IAAO,CAAA,EAAI,EAAO,KAAK,CAAC,2BAAA,SACpC,AAAI,CAAC,CAAC,EAAE,EAAI,EAAM,IAAI,CAAS,SAC/B,EAAM,KAAK,CAAG,MACP,mBAEP,AAAI,EAAO,QAAQ,CAAC,mBACX,MAEP,EAAO,IAAI,GACJ,SAGN,GAAI,AAAe,OAAf,EAAM,KAAK,CACpB,OAAO,EAAgB,EAE3B,EACA,UAAW,SAAS,CAAK,EACnB,AAAe,WAAf,EAAM,KAAK,EAAe,CAAA,EAAM,KAAK,CAAG,MAA5C,CACF,EACA,WAAY,WACV,MAAO,CAAC,MAAO,MAAO,KAAM,IAAI,CAClC,CACF,C","sources":["<anon>","node_modules/@codemirror/legacy-modes/mode/asciiarmor.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"lhX2l\", function(module, exports) {\n\n$parcel$export(module.exports, \"asciiArmor\", () => $f7f8fafe282e7f3b$export$cdde252db42de3ee);\nfunction $f7f8fafe282e7f3b$var$errorIfNotEmpty(stream) {\n    var nonWS = stream.match(/^\\s*\\S/);\n    stream.skipToEnd();\n    return nonWS ? \"error\" : null;\n}\nconst $f7f8fafe282e7f3b$export$cdde252db42de3ee = {\n    name: \"asciiarmor\",\n    token: function(stream, state) {\n        var m;\n        if (state.state == \"top\") {\n            if (stream.sol() && (m = stream.match(/^-----BEGIN (.*)?-----\\s*$/))) {\n                state.state = \"headers\";\n                state.type = m[1];\n                return \"tag\";\n            }\n            return $f7f8fafe282e7f3b$var$errorIfNotEmpty(stream);\n        } else if (state.state == \"headers\") {\n            if (stream.sol() && stream.match(/^\\w+:/)) {\n                state.state = \"header\";\n                return \"atom\";\n            } else {\n                var result = $f7f8fafe282e7f3b$var$errorIfNotEmpty(stream);\n                if (result) state.state = \"body\";\n                return result;\n            }\n        } else if (state.state == \"header\") {\n            stream.skipToEnd();\n            state.state = \"headers\";\n            return \"string\";\n        } else if (state.state == \"body\") {\n            if (stream.sol() && (m = stream.match(/^-----END (.*)?-----\\s*$/))) {\n                if (m[1] != state.type) return \"error\";\n                state.state = \"end\";\n                return \"tag\";\n            } else {\n                if (stream.eatWhile(/[A-Za-z0-9+\\/=]/)) return null;\n                else {\n                    stream.next();\n                    return \"error\";\n                }\n            }\n        } else if (state.state == \"end\") return $f7f8fafe282e7f3b$var$errorIfNotEmpty(stream);\n    },\n    blankLine: function(state) {\n        if (state.state == \"headers\") state.state = \"body\";\n    },\n    startState: function() {\n        return {\n            state: \"top\",\n            type: null\n        };\n    }\n};\n\n});\n\n\n//# sourceMappingURL=asciiarmor.279be026.js.map\n","function errorIfNotEmpty(stream) {\n  var nonWS = stream.match(/^\\s*\\S/);\n  stream.skipToEnd();\n  return nonWS ? \"error\" : null;\n}\n\nexport const asciiArmor = {\n  name: \"asciiarmor\",\n  token: function(stream, state) {\n    var m;\n    if (state.state == \"top\") {\n      if (stream.sol() && (m = stream.match(/^-----BEGIN (.*)?-----\\s*$/))) {\n        state.state = \"headers\";\n        state.type = m[1];\n        return \"tag\";\n      }\n      return errorIfNotEmpty(stream);\n    } else if (state.state == \"headers\") {\n      if (stream.sol() && stream.match(/^\\w+:/)) {\n        state.state = \"header\";\n        return \"atom\";\n      } else {\n        var result = errorIfNotEmpty(stream);\n        if (result) state.state = \"body\";\n        return result;\n      }\n    } else if (state.state == \"header\") {\n      stream.skipToEnd();\n      state.state = \"headers\";\n      return \"string\";\n    } else if (state.state == \"body\") {\n      if (stream.sol() && (m = stream.match(/^-----END (.*)?-----\\s*$/))) {\n        if (m[1] != state.type) return \"error\";\n        state.state = \"end\";\n        return \"tag\";\n      } else {\n        if (stream.eatWhile(/[A-Za-z0-9+\\/=]/)) {\n          return null;\n        } else {\n          stream.next();\n          return \"error\";\n        }\n      }\n    } else if (state.state == \"end\") {\n      return errorIfNotEmpty(stream);\n    }\n  },\n  blankLine: function(state) {\n    if (state.state == \"headers\") state.state = \"body\";\n  },\n  startState: function() {\n    return {state: \"top\", type: null};\n  }\n};\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","$f7f8fafe282e7f3b$var$errorIfNotEmpty","stream","nonWS","match","skipToEnd","Object","defineProperty","get","$f7f8fafe282e7f3b$export$cdde252db42de3ee","set","s","enumerable","configurable","name","token","state","m","sol","type","result","eatWhile","next","blankLine","startState"],"version":3,"file":"asciiarmor.279be026.js.map"}